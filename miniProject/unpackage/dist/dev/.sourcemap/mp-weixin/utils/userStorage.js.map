{"version":3,"file":"userStorage.js","sources":["utils/userStorage.ts"],"sourcesContent":["import CryptoJS from 'crypto-js';\r\n\r\n// 加密密钥，实际项目中应妥善保管\r\nconst SECRET_KEY = 'campus';\r\n\r\n// 存储用户信息的键名\r\nconst USER_INFO_KEY = 'userInfo';\r\n\r\n/**\r\n * 生成随机数\r\n * @returns 随机数\r\n */\r\nfunction getRandomWord() {\r\n    const randomWords = [\r\n        'apple', 'banana', 'cherry', 'date', 'elderberry',\r\n        'fig', 'grape', 'honeydew', 'kiwi', 'lemon',\r\n        'mango', 'nectarine', 'orange', 'papaya', 'quince',\r\n        'raspberry', 'strawberry', 'tangerine', 'ugli', 'vanilla'\r\n    ];\r\n    const randomIndex = Math.floor(Math.random() * randomWords.length);\r\n    return randomWords[randomIndex];\r\n}\r\n\r\n/**\r\n * 生成随机盐\r\n * @returns 随机盐\r\n */\r\nfunction generateSalt() {\r\n    const saltLength = 16;\r\n    let salt = '';\r\n    for (let i = 0; i < saltLength; i++) {\r\n        salt += getRandomWord();\r\n    }\r\n    return salt;\r\n}\r\n\r\n/**\r\n * 加密数据\r\n * @param data 需要加密的数据\r\n * @returns 加密后的字符串\r\n */\r\nfunction encryptData(data: any): string {\r\n    const salt = generateSalt();\r\n    const iv = CryptoJS.lib.WordArray.random(16); // 生成随机的初始化向量\r\n    const encrypted = CryptoJS.AES.encrypt(JSON.stringify(data), SECRET_KEY + salt, {\r\n        iv: iv,\r\n        padding: CryptoJS.pad.Pkcs7,\r\n        mode: CryptoJS.mode.CBC\r\n    });\r\n    return salt + ':' + iv.toString(CryptoJS.enc.Base64) + ':' + encrypted.toString();\r\n}\r\n\r\n/**\r\n * 解密数据\r\n * @param encryptedData 加密后的字符串\r\n * @returns 解密后的数据\r\n */\r\nfunction decryptData(encryptedData: string): any {\r\n    const parts = encryptedData.split(':');\r\n    const salt = parts[0];\r\n    const iv = CryptoJS.enc.Base64.parse(parts[1]);\r\n    const encrypted = parts[2];\r\n    const decrypted = CryptoJS.AES.decrypt(encrypted, SECRET_KEY + salt, {\r\n        iv: iv,\r\n        padding: CryptoJS.pad.Pkcs7,\r\n        mode: CryptoJS.mode.CBC\r\n    });\r\n    const originalText = decrypted.toString(CryptoJS.enc.Utf8);\r\n    return JSON.parse(originalText);\r\n}\r\n\r\n/**\r\n * 存储用户信息\r\n * @param userInfo 用户信息对象\r\n */\r\nexport function setUserInfo(userInfo: any): void {\r\n    const encryptedData = encryptData(userInfo);\r\n    uni.setStorageSync(USER_INFO_KEY, encryptedData);\r\n}\r\n\r\n/**\r\n * 获取用户信息\r\n * @returns 用户信息对象\r\n */\r\nexport function getUserInfo(): any {\r\n    const encryptedData = uni.getStorageSync(USER_INFO_KEY);\r\n    if (encryptedData) {\r\n        return decryptData(encryptedData);\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * 清除用户信息\r\n */\r\nexport function clearUserInfo(): void {\r\n    uni.removeStorageSync(USER_INFO_KEY);\r\n}"],"names":["CryptoJS","uni"],"mappings":";;AAGA,MAAM,aAAa;AAGnB,MAAM,gBAAgB;AAmDtB,SAAS,YAAY,eAA4B;AACvC,QAAA,QAAQ,cAAc,MAAM,GAAG;AAC/B,QAAA,OAAO,MAAM,CAAC;AACpB,QAAM,KAAKA,cAAS,SAAA,IAAI,OAAO,MAAM,MAAM,CAAC,CAAC;AACvC,QAAA,YAAY,MAAM,CAAC;AACzB,QAAM,YAAYA,cAAAA,SAAS,IAAI,QAAQ,WAAW,aAAa,MAAM;AAAA,IACjE;AAAA,IACA,SAASA,cAAAA,SAAS,IAAI;AAAA,IACtB,MAAMA,cAAAA,SAAS,KAAK;AAAA,EAAA,CACvB;AACD,QAAM,eAAe,UAAU,SAASA,cAAAA,SAAS,IAAI,IAAI;AAClD,SAAA,KAAK,MAAM,YAAY;AAClC;AAeO,SAAS,cAAmB;AACzB,QAAA,gBAAgBC,cAAAA,MAAI,eAAe,aAAa;AACtD,MAAI,eAAe;AACf,WAAO,YAAY,aAAa;AAAA,EACpC;AACO,SAAA;AACX;;"}