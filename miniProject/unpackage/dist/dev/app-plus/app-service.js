var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
if (typeof Promise !== "undefined" && !Promise.prototype.finally) {
  Promise.prototype.finally = function(callback) {
    const promise = this.constructor;
    return this.then(
      (value) => promise.resolve(callback()).then(() => value),
      (reason) => promise.resolve(callback()).then(() => {
        throw reason;
      })
    );
  };
}
;
if (typeof uni !== "undefined" && uni && uni.requireGlobal) {
  const global2 = uni.requireGlobal();
  ArrayBuffer = global2.ArrayBuffer;
  Int8Array = global2.Int8Array;
  Uint8Array = global2.Uint8Array;
  Uint8ClampedArray = global2.Uint8ClampedArray;
  Int16Array = global2.Int16Array;
  Uint16Array = global2.Uint16Array;
  Int32Array = global2.Int32Array;
  Uint32Array = global2.Uint32Array;
  Float32Array = global2.Float32Array;
  Float64Array = global2.Float64Array;
  BigInt64Array = global2.BigInt64Array;
  BigUint64Array = global2.BigUint64Array;
}
;
if (uni.restoreGlobal) {
  uni.restoreGlobal(Vue, weex, plus, setTimeout, clearTimeout, setInterval, clearInterval);
}
(function(vue) {
  "use strict";
  const numericProp = [Number, String];
  const makeRequiredProp = (type) => ({
    type,
    required: true
  });
  const makeArrayProp = () => ({
    type: Array,
    default: () => []
  });
  const makeBooleanProp = (defaultVal) => ({
    type: Boolean,
    default: defaultVal
  });
  const makeNumberProp = (defaultVal) => ({
    type: Number,
    default: defaultVal
  });
  const makeNumericProp = (defaultVal) => ({
    type: numericProp,
    default: defaultVal
  });
  const makeStringProp = (defaultVal) => ({
    type: String,
    default: defaultVal
  });
  const baseProps = {
    /**
     * 自定义根节点样式
     */
    customStyle: makeStringProp(""),
    /**
     * 自定义根节点样式类
     */
    customClass: makeStringProp("")
  };
  const skeletonProps = {
    /**
     * 骨架图风格，有基础、头像组合等两大类
     */
    theme: makeStringProp("text"),
    /**
     * 用于设置行列数量、宽度高度、间距等。
     * @example
     * 【示例一】，`[1, 1, 2]` 表示输出三行骨架图，第一行一列，第二行一列，第三行两列。
     * 【示例二】，`[1, 1, { width: '100px' }]` 表示自定义第三行的宽度为 `100px`。
     * 【示例三】，`[1, 2, [{ width, height }, { width, height, marginLeft }]]` 表示第三行有两列，且自定义宽度、高度和间距
     */
    rowCol: makeArrayProp(),
    /**
     * 是否为加载状态，如果是则显示骨架图，如果不是则显示加载完成的内容
     * @default true
     */
    loading: makeBooleanProp(true),
    /**
     * 动画效果，有「渐变加载动画」和「闪烁加载动画」两种。值为空则表示没有动画
     */
    animation: {
      type: String,
      default: ""
    },
    // 自定义类名
    customClass: {
      type: [String, Array, Object],
      default: ""
    },
    // 自定义样式
    customStyle: {
      type: Object,
      default() {
        return {};
      }
    }
  };
  class AbortablePromise {
    constructor(executor) {
      this._reject = null;
      this.promise = new Promise((resolve, reject) => {
        executor(resolve, reject);
        this._reject = reject;
      });
    }
    // 提供abort方法来中止Promise
    abort(error) {
      if (this._reject) {
        this._reject(error);
      }
    }
    then(onfulfilled, onrejected) {
      return this.promise.then(onfulfilled, onrejected);
    }
    catch(onrejected) {
      return this.promise.catch(onrejected);
    }
  }
  function uuid() {
    return s4() + s4() + s4() + s4() + s4() + s4() + s4() + s4();
  }
  function s4() {
    return Math.floor((1 + Math.random()) * 65536).toString(16).substring(1);
  }
  function addUnit(num) {
    return Number.isNaN(Number(num)) ? `${num}` : `${num}px`;
  }
  function isObj(value) {
    return Object.prototype.toString.call(value) === "[object Object]" || typeof value === "object";
  }
  function getType(target) {
    const typeStr = Object.prototype.toString.call(target);
    const match = typeStr.match(/\[object (\w+)\]/);
    const type = match && match.length ? match[1].toLowerCase() : "";
    return type;
  }
  const isDef = (value) => value !== void 0 && value !== null;
  const checkNumRange = (num, label = "value") => {
    if (num < 0) {
      throw new Error(`${label} shouldn't be less than zero`);
    }
  };
  function rgbToHex(r, g, b) {
    const hex = (r << 16 | g << 8 | b).toString(16);
    const paddedHex = "#" + "0".repeat(Math.max(0, 6 - hex.length)) + hex;
    return paddedHex;
  }
  function hexToRgb(hex) {
    const rgb = [];
    for (let i = 1; i < 7; i += 2) {
      rgb.push(parseInt("0x" + hex.slice(i, i + 2), 16));
    }
    return rgb;
  }
  const gradient = (startColor, endColor, step = 2) => {
    const sColor = hexToRgb(startColor);
    const eColor = hexToRgb(endColor);
    const rStep = (eColor[0] - sColor[0]) / step;
    const gStep = (eColor[1] - sColor[1]) / step;
    const bStep = (eColor[2] - sColor[2]) / step;
    const gradientColorArr = [];
    for (let i = 0; i < step; i++) {
      gradientColorArr.push(
        rgbToHex(parseInt(String(rStep * i + sColor[0])), parseInt(String(gStep * i + sColor[1])), parseInt(String(bStep * i + sColor[2])))
      );
    }
    return gradientColorArr;
  };
  const range = (num, min, max) => {
    return Math.min(Math.max(num, min), max);
  };
  const isEqual = (value1, value2) => {
    if (value1 === value2) {
      return true;
    }
    if (!Array.isArray(value1) || !Array.isArray(value2)) {
      return false;
    }
    if (value1.length !== value2.length) {
      return false;
    }
    for (let i = 0; i < value1.length; ++i) {
      if (value1[i] !== value2[i]) {
        return false;
      }
    }
    return true;
  };
  const padZero = (number, length = 2) => {
    let numStr = number.toString();
    while (numStr.length < length) {
      numStr = "0" + numStr;
    }
    return numStr;
  };
  const context = {
    id: 1e3
  };
  function getRect(selector, all, scope, useFields) {
    return new Promise((resolve, reject) => {
      let query = null;
      if (scope) {
        query = uni.createSelectorQuery().in(scope);
      } else {
        query = uni.createSelectorQuery();
      }
      const method = all ? "selectAll" : "select";
      const callback = (rect) => {
        if (all && isArray(rect) && rect.length > 0) {
          resolve(rect);
        } else if (!all && rect) {
          resolve(rect);
        } else {
          reject(new Error("No nodes found"));
        }
      };
      if (useFields) {
        query[method](selector).fields({ size: true, node: true }, callback).exec();
      } else {
        query[method](selector).boundingClientRect(callback).exec();
      }
    });
  }
  function kebabCase(word) {
    const newWord = word.replace(/[A-Z]/g, function(match) {
      return "-" + match;
    }).toLowerCase();
    return newWord;
  }
  function camelCase(word) {
    return word.replace(/-(\w)/g, (_, c) => c.toUpperCase());
  }
  function isArray(value) {
    if (typeof Array.isArray === "function") {
      return Array.isArray(value);
    }
    return Object.prototype.toString.call(value) === "[object Array]";
  }
  function isFunction(value) {
    return getType(value) === "function" || getType(value) === "asyncfunction";
  }
  function isString(value) {
    return getType(value) === "string";
  }
  function isNumber(value) {
    return getType(value) === "number";
  }
  function isPromise(value) {
    if (isObj(value) && isDef(value)) {
      return isFunction(value.then) && isFunction(value.catch);
    }
    return false;
  }
  function isUndefined(value) {
    return typeof value === "undefined";
  }
  function objToStyle(styles) {
    if (isArray(styles)) {
      return styles.filter(function(item) {
        return item != null && item !== "";
      }).map(function(item) {
        return objToStyle(item);
      }).join(";");
    }
    if (isString(styles)) {
      return styles;
    }
    if (isObj(styles)) {
      return Object.keys(styles).filter(function(key) {
        return styles[key] != null && styles[key] !== "";
      }).map(function(key) {
        return [kebabCase(key), styles[key]].join(":");
      }).join(";");
    }
    return "";
  }
  const pause = (ms = 1e3 / 30) => {
    return new AbortablePromise((resolve) => {
      const timer = setTimeout(() => {
        clearTimeout(timer);
        resolve(true);
      }, ms);
    });
  };
  function deepClone(obj, cache = /* @__PURE__ */ new Map()) {
    if (obj === null || typeof obj !== "object") {
      return obj;
    }
    if (isDate(obj)) {
      return new Date(obj.getTime());
    }
    if (obj instanceof RegExp) {
      return new RegExp(obj.source, obj.flags);
    }
    if (obj instanceof Error) {
      const errorCopy = new Error(obj.message);
      errorCopy.stack = obj.stack;
      return errorCopy;
    }
    if (cache.has(obj)) {
      return cache.get(obj);
    }
    const copy = Array.isArray(obj) ? [] : {};
    cache.set(obj, copy);
    for (const key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        copy[key] = deepClone(obj[key], cache);
      }
    }
    return copy;
  }
  function deepMerge(target, source) {
    target = deepClone(target);
    if (typeof target !== "object" || typeof source !== "object") {
      throw new Error("Both target and source must be objects.");
    }
    for (const prop in source) {
      if (!source.hasOwnProperty(prop))
        continue;
      target[prop] = source[prop];
    }
    return target;
  }
  function deepAssign(target, source) {
    Object.keys(source).forEach((key) => {
      const targetValue = target[key];
      const newObjValue = source[key];
      if (isObj(targetValue) && isObj(newObjValue)) {
        deepAssign(targetValue, newObjValue);
      } else {
        target[key] = newObjValue;
      }
    });
    return target;
  }
  function debounce(func, wait, options = {}) {
    let timeoutId = null;
    let lastArgs;
    let lastThis;
    let result;
    const leading = isDef(options.leading) ? options.leading : false;
    const trailing = isDef(options.trailing) ? options.trailing : true;
    function invokeFunc() {
      if (lastArgs !== void 0) {
        result = func.apply(lastThis, lastArgs);
        lastArgs = void 0;
      }
    }
    function startTimer() {
      timeoutId = setTimeout(() => {
        timeoutId = null;
        if (trailing) {
          invokeFunc();
        }
      }, wait);
    }
    function cancelTimer() {
      if (timeoutId !== null) {
        clearTimeout(timeoutId);
        timeoutId = null;
      }
    }
    function debounced(...args) {
      lastArgs = args;
      lastThis = this;
      if (timeoutId === null) {
        if (leading) {
          invokeFunc();
        }
        startTimer();
      } else if (trailing) {
        cancelTimer();
        startTimer();
      }
      return result;
    }
    return debounced;
  }
  const getPropByPath = (obj, path) => {
    const keys = path.split(".");
    try {
      return keys.reduce((acc, key) => acc !== void 0 && acc !== null ? acc[key] : void 0, obj);
    } catch (error) {
      return void 0;
    }
  };
  const isDate = (val) => Object.prototype.toString.call(val) === "[object Date]" && !Number.isNaN(val.getTime());
  function isVideoUrl(url2) {
    const videoRegex = /\.(mp4|mpg|mpeg|dat|asf|avi|rm|rmvb|mov|wmv|flv|mkv|video)/i;
    return videoRegex.test(url2);
  }
  function isImageUrl(url2) {
    const imageRegex = /\.(jpeg|jpg|gif|png|svg|webp|jfif|bmp|dpg|image)/i;
    return imageRegex.test(url2);
  }
  const isH5 = /* @__PURE__ */ (() => {
    let isH52 = false;
    return isH52;
  })();
  function omitBy(obj, predicate) {
    const newObj = deepClone(obj);
    Object.keys(newObj).forEach((key) => predicate(newObj[key], key) && delete newObj[key]);
    return newObj;
  }
  const __default__$I = {
    options: { virtualHost: true, addGlobalClass: true, styleIsolation: "shared" }
  };
  const _sfc_main$1b = /* @__PURE__ */ vue.defineComponent({
    ...__default__$I,
    __name: "wd-skeleton",
    props: skeletonProps,
    setup(__props, { expose: __expose }) {
      __expose();
      const themeMap = {
        avatar: [{ type: "circle", height: "64px", width: "64px" }],
        image: [{ type: "rect", height: "64px", width: "64px" }],
        text: [
          1,
          [
            { width: "24%", height: "16px", marginRight: "16px" },
            { width: "76%", height: "16px" }
          ]
        ],
        paragraph: [1, 1, 1, { width: "55%" }]
      };
      const props = __props;
      const rowCols = vue.ref([]);
      const parsedRowCols = vue.computed(() => {
        return rowCols.value.map((item) => {
          if (isNumber(item)) {
            return [
              {
                class: getColItemClass({ type: "text" }),
                style: {}
              }
            ];
          }
          if (Array.isArray(item)) {
            return item.map((col) => {
              return {
                ...col,
                class: getColItemClass(col),
                style: getColItemStyle(col)
              };
            });
          }
          const nItem = item;
          return [
            {
              ...nItem,
              class: getColItemClass(nItem),
              style: getColItemStyle(nItem)
            }
          ];
        });
      });
      function getColItemClass(rowCol) {
        return ["wd-skeleton__col", `wd-skeleton--type-${rowCol.type || "text"}`, { [`wd-skeleton--animation-${props.animation}`]: props.animation }];
      }
      function getColItemStyle(rowCol) {
        const style = {};
        const styleName = ["size", "width", "height", "margin", "background", "marginLeft", "marginRight", "borderRadius", "backgroundColor"];
        for (const name of styleName) {
          if (Object.prototype.hasOwnProperty.call(rowCol, name)) {
            const px = addUnit(rowCol[name]);
            if (name === "size") {
              style.width = px;
              style.height = px;
            } else {
              style[name] = px;
            }
          }
        }
        return style;
      }
      vue.watch(
        () => props.rowCol,
        (rowCol) => {
          rowCols.value = [...Array.isArray(rowCol) && rowCol.length ? props.rowCol : themeMap[props.theme]];
        },
        { immediate: true }
      );
      const show = vue.computed(() => props.loading == void 0 || props.loading === true);
      const __returned__ = { themeMap, props, rowCols, parsedRowCols, getColItemClass, getColItemStyle, show };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  const _export_sfc = (sfc, props) => {
    const target = sfc.__vccOpts || sfc;
    for (const [key, val] of props) {
      target[key] = val;
    }
    return target;
  };
  function _sfc_render$1a(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: vue.normalizeClass(`wd-skeleton ${_ctx.customClass}`),
        style: vue.normalizeStyle(_ctx.customStyle)
      },
      [
        $setup.show ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "wd-skeleton__content"
        }, [
          (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            null,
            vue.renderList($setup.parsedRowCols, (row, index) => {
              return vue.openBlock(), vue.createElementBlock("view", {
                class: "wd-skeleton__row",
                key: `row-${index}`
              }, [
                (vue.openBlock(true), vue.createElementBlock(
                  vue.Fragment,
                  null,
                  vue.renderList(row, (col, idx) => {
                    return vue.openBlock(), vue.createElementBlock(
                      "view",
                      {
                        key: `col-${idx}`,
                        class: vue.normalizeClass(col.class),
                        style: vue.normalizeStyle(col.style)
                      },
                      null,
                      6
                      /* CLASS, STYLE */
                    );
                  }),
                  128
                  /* KEYED_FRAGMENT */
                ))
              ]);
            }),
            128
            /* KEYED_FRAGMENT */
          ))
        ])) : (vue.openBlock(), vue.createElementBlock("view", { key: 1 }, [
          vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
        ]))
      ],
      6
      /* CLASS, STYLE */
    );
  }
  const __easycom_0$6 = /* @__PURE__ */ _export_sfc(_sfc_main$1b, [["render", _sfc_render$1a], ["__scopeId", "data-v-a7cc99aa"], ["__file", "G:/Code/campus/miniProject/uni_modules/wot-design-uni/components/wd-skeleton/wd-skeleton.vue"]]);
  const ON_SHOW = "onShow";
  const ON_LOAD = "onLoad";
  const ON_UNLOAD = "onUnload";
  const ON_REACH_BOTTOM = "onReachBottom";
  const ON_PULL_DOWN_REFRESH = "onPullDownRefresh";
  const ON_SHARE_TIMELINE = "onShareTimeline";
  const ON_SHARE_APP_MESSAGE = "onShareAppMessage";
  function formatAppLog(type, filename, ...args) {
    if (uni.__log__) {
      uni.__log__(type, filename, ...args);
    } else {
      console[type].apply(console, [...args, filename]);
    }
  }
  function resolveEasycom(component, easycom) {
    return typeof component === "string" ? easycom : component;
  }
  const createHook = (lifecycle) => (hook, target = vue.getCurrentInstance()) => {
    !vue.isInSSRComponentSetup && vue.injectHook(lifecycle, hook, target);
  };
  const onShow = /* @__PURE__ */ createHook(ON_SHOW);
  const onLoad = /* @__PURE__ */ createHook(ON_LOAD);
  const onUnload = /* @__PURE__ */ createHook(ON_UNLOAD);
  const onReachBottom = /* @__PURE__ */ createHook(ON_REACH_BOTTOM);
  const onPullDownRefresh = /* @__PURE__ */ createHook(ON_PULL_DOWN_REFRESH);
  const onShareTimeline = /* @__PURE__ */ createHook(ON_SHARE_TIMELINE);
  const onShareAppMessage = /* @__PURE__ */ createHook(ON_SHARE_APP_MESSAGE);
  const iconProps = {
    ...baseProps,
    /**
     * 使用的图标名字，可以使用链接图片
     */
    name: makeRequiredProp(String),
    /**
     * 图标的颜色
     */
    color: String,
    /**
     * 图标的字体大小
     */
    size: String,
    /**
     * 类名前缀，用于使用自定义图标
     */
    classPrefix: makeStringProp("wd-icon")
  };
  const __default__$H = {
    name: "wd-icon",
    options: {
      virtualHost: true,
      addGlobalClass: true,
      styleIsolation: "shared"
    }
  };
  const _sfc_main$1a = /* @__PURE__ */ vue.defineComponent({
    ...__default__$H,
    props: iconProps,
    emits: ["click", "touch"],
    setup(__props, { expose: __expose, emit: __emit }) {
      __expose();
      const props = __props;
      const emit = __emit;
      const isImage = vue.computed(() => {
        return isDef(props.name) && isImageUrl(props.name);
      });
      const rootClass = vue.computed(() => {
        const prefix = props.classPrefix;
        return `${prefix} ${props.customClass} ${isImage.value ? "wd-icon--image" : prefix + "-" + props.name}`;
      });
      const rootStyle = vue.computed(() => {
        const style = {};
        if (props.color) {
          style["color"] = props.color;
        }
        if (props.size) {
          style["font-size"] = addUnit(props.size);
        }
        return `${objToStyle(style)}; ${props.customStyle}`;
      });
      function handleClick(event) {
        emit("click", event);
      }
      const __returned__ = { props, emit, isImage, rootClass, rootStyle, handleClick };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$19(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        onClick: $setup.handleClick,
        class: vue.normalizeClass($setup.rootClass),
        style: vue.normalizeStyle($setup.rootStyle)
      },
      [
        $setup.isImage ? (vue.openBlock(), vue.createElementBlock("image", {
          key: 0,
          class: "wd-icon__image",
          src: _ctx.name
        }, null, 8, ["src"])) : vue.createCommentVNode("v-if", true)
      ],
      6
      /* CLASS, STYLE */
    );
  }
  const __easycom_0$5 = /* @__PURE__ */ _export_sfc(_sfc_main$1a, [["render", _sfc_render$19], ["__scopeId", "data-v-24906af6"], ["__file", "G:/Code/campus/miniProject/uni_modules/wot-design-uni/components/wd-icon/wd-icon.vue"]]);
  const noticeBarProps = {
    ...baseProps,
    /**
     * 设置通知栏文案
     */
    text: {
      type: [String, Array],
      default: ""
    },
    /**
     * 设置通知栏类型，可选值为：'warning' | 'info' | 'danger'
     */
    type: makeStringProp("warning"),
    /**
     * 是否可滚动
     */
    scrollable: makeBooleanProp(true),
    /**
     * 滚动延迟时间（秒）
     */
    delay: makeNumberProp(1),
    /**
     * 滚动速度（px/s）
     */
    speed: makeNumberProp(50),
    /**
     * 是否可关闭
     */
    closable: makeBooleanProp(false),
    /**
     * 是否换行显示
     */
    wrapable: makeBooleanProp(false),
    /**
     * 设置左侧图标，使用 icon 章节中的图标名
     */
    prefix: String,
    /**
     * 文字、图标颜色
     */
    color: String,
    /**
     * 背景颜色
     */
    backgroundColor: String,
    /**
     * 滚动方向
     */
    direction: makeStringProp("horizontal")
  };
  const __default__$G = {
    name: "wd-notice-bar",
    options: {
      virtualHost: true,
      addGlobalClass: true,
      styleIsolation: "shared"
    }
  };
  const _sfc_main$19 = /* @__PURE__ */ vue.defineComponent({
    ...__default__$G,
    props: noticeBarProps,
    emits: ["close", "next", "click"],
    setup(__props, { expose: __expose, emit: __emit }) {
      const $wrap = ".wd-notice-bar__wrap";
      const $content = ".wd-notice-bar__content";
      const props = __props;
      const emit = __emit;
      const wrapWidth = vue.ref(0);
      const show = vue.ref(true);
      const currentIndex = vue.ref(0);
      const textArray = vue.computed(() => Array.isArray(props.text) ? props.text : [props.text]);
      const currentText = vue.computed(() => textArray.value[currentIndex.value]);
      const verticalIndex = vue.ref(0);
      const wrapRect = vue.ref(null);
      const contentRect = vue.ref(null);
      const isHorizontal = vue.computed(() => props.direction === "horizontal");
      const isVertical = vue.computed(() => props.direction === "vertical");
      const transitionState = vue.reactive({
        transitionProperty: "unset",
        transitionDelay: "unset",
        transitionDuration: "unset",
        transform: "none",
        transitionTimingFunction: "linear"
      });
      const animation = vue.computed(() => {
        return objToStyle(transitionState);
      });
      const rootStyle = vue.computed(() => {
        const style = {};
        if (isDef(props.color)) {
          style.color = props.color;
        }
        if (isDef(props.backgroundColor)) {
          style.background = props.backgroundColor;
        }
        return `${objToStyle(style)};${props.customStyle}`;
      });
      const noticeBarClass = vue.computed(() => {
        const { type, wrapable, scrollable } = props;
        let noticeBarClasses = [];
        type && noticeBarClasses.push(`is-${type}`);
        if (isHorizontal.value) {
          !wrapable && !scrollable && noticeBarClasses.push("wd-notice-bar--ellipse");
        } else {
          noticeBarClasses.push("wd-notice-bar--ellipse");
        }
        wrapable && !scrollable && noticeBarClasses.push("wd-notice-bar--wrap");
        return noticeBarClasses.join(" ");
      });
      const { proxy } = vue.getCurrentInstance();
      vue.watch(
        () => props.text,
        () => {
          reset();
        },
        { deep: true }
      );
      vue.onMounted(() => {
        startTransition();
        const pages = getCurrentPages();
        const currentPage = pages[pages.length - 1];
        const currentWebview = currentPage.$getAppWebview();
        currentWebview.addEventListener("hide", () => {
          stopTransition();
        });
        currentWebview.addEventListener("show", () => {
          startTransition();
        });
      });
      vue.onActivated(() => {
        startTransition();
      });
      vue.onDeactivated(() => {
        stopTransition();
      });
      function reset() {
        stopTransition();
        startTransition();
      }
      function startTransition() {
        vue.nextTick(() => scroll());
      }
      function stopTransition() {
        transitionState.transitionProperty = "unset";
        transitionState.transitionDelay = "unset";
        transitionState.transitionDuration = "unset";
        transitionState.transform = "none";
        transitionState.transitionTimingFunction = "linear";
        currentIndex.value = 0;
        verticalIndex.value = 0;
      }
      function handleClose() {
        show.value = false;
        emit("close");
      }
      function setTransition({ duration, delay, translate }) {
        transitionState.transitionProperty = "all";
        transitionState.transitionDelay = `${delay}s`;
        transitionState.transitionDuration = `${duration}s`;
        transitionState.transform = `${props.direction === "vertical" ? "translateY" : "translateX"}(${translate}px)`;
        transitionState.transitionTimingFunction = "linear";
      }
      function queryRect() {
        return Promise.all([getRect($wrap, false, proxy), getRect($content, false, proxy)]);
      }
      async function verticalAnimate(height) {
        const translate = -(height / (textArray.value.length + 1)) * (currentIndex.value + 1);
        setTransition({
          duration: height / (textArray.value.length + 1) / props.speed,
          delay: props.delay,
          translate
        });
      }
      async function scroll() {
        const [wRect, cRect] = await queryRect();
        if (!wRect.width || !cRect.width || !cRect.height)
          return;
        wrapRect.value = wRect;
        contentRect.value = cRect;
        wrapWidth.value = wRect.width;
        if (isHorizontal.value) {
          if (props.scrollable) {
            setTransition({
              duration: cRect.width / props.speed,
              delay: props.delay,
              translate: -cRect.width
            });
          }
        } else {
          if (textArray.value.length > 1) {
            verticalAnimate(cRect.height);
          }
        }
      }
      function next() {
        if (currentIndex.value >= textArray.value.length - 1) {
          currentIndex.value = 0;
        } else {
          currentIndex.value++;
        }
        emit("next", currentIndex.value);
      }
      function animationEnd() {
        if (isHorizontal.value) {
          setTransition({
            duration: 0,
            delay: 0,
            translate: wrapWidth.value + 1
          });
        } else {
          if (++verticalIndex.value >= textArray.value.length) {
            verticalIndex.value = 0;
            setTransition({
              duration: 0,
              delay: 0,
              translate: 0
            });
          }
        }
        const timer = setTimeout(() => {
          next();
          vue.nextTick(async () => {
            try {
              const [wRect, cRect] = await queryRect();
              wrapRect.value = wRect;
              contentRect.value = cRect;
              wrapWidth.value = wRect.width || 0;
            } catch (error) {
            }
            if (!contentRect.value || !contentRect.value.width || !contentRect.value.height)
              return;
            if (isHorizontal.value) {
              setTransition({
                duration: (wrapWidth.value + contentRect.value.width) / props.speed,
                delay: props.delay,
                translate: -contentRect.value.width
              });
            } else {
              verticalAnimate(contentRect.value.height);
            }
          });
          clearTimeout(timer);
        }, 20);
      }
      function handleClick() {
        const result = isArray(props.text) ? {
          index: currentIndex.value,
          text: props.text[currentIndex.value]
        } : {
          index: 0,
          text: props.text
        };
        emit("click", result);
      }
      __expose({ reset });
      const __returned__ = { $wrap, $content, props, emit, wrapWidth, show, currentIndex, textArray, currentText, verticalIndex, wrapRect, contentRect, isHorizontal, isVertical, transitionState, animation, rootStyle, noticeBarClass, proxy, reset, startTransition, stopTransition, handleClose, setTransition, queryRect, verticalAnimate, scroll, next, animationEnd, handleClick, wdIcon: __easycom_0$5 };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$18(_ctx, _cache, $props, $setup, $data, $options) {
    return $setup.show ? (vue.openBlock(), vue.createElementBlock(
      "view",
      {
        key: 0,
        class: vue.normalizeClass(`wd-notice-bar ${_ctx.customClass} ${$setup.noticeBarClass}`),
        style: vue.normalizeStyle($setup.rootStyle)
      },
      [
        _ctx.prefix ? (vue.openBlock(), vue.createBlock($setup["wdIcon"], {
          key: 0,
          "custom-class": "wd-notice-bar__prefix",
          name: _ctx.prefix
        }, null, 8, ["name"])) : vue.renderSlot(_ctx.$slots, "prefix", { key: 1 }, void 0, true),
        vue.createElementVNode("view", { class: "wd-notice-bar__wrap" }, [
          vue.createElementVNode(
            "view",
            {
              class: "wd-notice-bar__content",
              style: vue.normalizeStyle($setup.animation),
              onTransitionend: $setup.animationEnd,
              onClick: $setup.handleClick
            },
            [
              $setup.isVertical ? (vue.openBlock(), vue.createElementBlock(
                vue.Fragment,
                { key: 0 },
                [
                  (vue.openBlock(true), vue.createElementBlock(
                    vue.Fragment,
                    null,
                    vue.renderList($setup.textArray, (item) => {
                      return vue.openBlock(), vue.createElementBlock(
                        "view",
                        { key: item },
                        vue.toDisplayString(item),
                        1
                        /* TEXT */
                      );
                    }),
                    128
                    /* KEYED_FRAGMENT */
                  )),
                  $setup.textArray.length > 1 ? (vue.openBlock(), vue.createElementBlock(
                    "view",
                    { key: 0 },
                    vue.toDisplayString($setup.textArray[0]),
                    1
                    /* TEXT */
                  )) : vue.createCommentVNode("v-if", true)
                ],
                64
                /* STABLE_FRAGMENT */
              )) : vue.renderSlot(_ctx.$slots, "default", { key: 1 }, () => [
                vue.createTextVNode(
                  vue.toDisplayString($setup.currentText),
                  1
                  /* TEXT */
                )
              ], true)
            ],
            36
            /* STYLE, NEED_HYDRATION */
          )
        ]),
        _ctx.closable ? (vue.openBlock(), vue.createBlock($setup["wdIcon"], {
          key: 2,
          "custom-class": "wd-notice-bar__suffix",
          name: "close-bold",
          onClick: $setup.handleClose
        })) : vue.renderSlot(_ctx.$slots, "suffix", { key: 3 }, void 0, true)
      ],
      6
      /* CLASS, STYLE */
    )) : vue.createCommentVNode("v-if", true);
  }
  const __easycom_0$4 = /* @__PURE__ */ _export_sfc(_sfc_main$19, [["render", _sfc_render$18], ["__scopeId", "data-v-e7a73070"], ["__file", "G:/Code/campus/miniProject/uni_modules/wot-design-uni/components/wd-notice-bar/wd-notice-bar.vue"]]);
  const zhCN = {
    calendar: {
      placeholder: "请选择",
      title: "选择日期",
      day: "日",
      week: "周",
      month: "月",
      confirm: "确定",
      startTime: "开始时间",
      endTime: "结束时间",
      to: "至",
      timeFormat: "YY年MM月DD日 HH:mm:ss",
      dateFormat: "YYYY年MM月DD日",
      weekFormat: (year, week) => `${year} 第 ${week} 周`,
      startWeek: "开始周",
      endWeek: "结束周",
      startMonth: "开始月",
      endMonth: "结束月",
      monthFormat: "YYYY年MM月"
    },
    calendarView: {
      startTime: "开始",
      endTime: "结束",
      weeks: {
        sun: "日",
        mon: "一",
        tue: "二",
        wed: "三",
        thu: "四",
        fri: "五",
        sat: "六"
      },
      rangePrompt: (maxRange) => `选择天数不能超过${maxRange}天`,
      rangePromptWeek: (maxRange) => `选择周数不能超过${maxRange}周`,
      rangePromptMonth: (maxRange) => `选择月份不能超过${maxRange}个月`,
      monthTitle: "YYYY年M月",
      yearTitle: "YYYY年",
      month: "M月",
      hour: (value) => `${value}时`,
      minute: (value) => `${value}分`,
      second: (value) => `${value}秒`
    },
    collapse: {
      expand: "展开",
      retract: "收起"
    },
    colPicker: {
      title: "请选择",
      placeholder: "请选择",
      select: "请选择"
    },
    datetimePicker: {
      start: "开始时间",
      end: "结束时间",
      to: "至",
      placeholder: "请选择",
      confirm: "完成",
      cancel: "取消"
    },
    loadmore: {
      loading: "正在努力加载中...",
      finished: "已加载完毕",
      error: "加载失败",
      retry: "点击重试"
    },
    messageBox: {
      inputPlaceholder: "请输入",
      confirm: "确定",
      cancel: "取消",
      inputNoValidate: "输入的数据不合法"
    },
    numberKeyboard: {
      confirm: "完成"
    },
    pagination: {
      prev: "上一页",
      next: "下一页",
      page: (value) => `当前页：${value}`,
      total: (total) => `当前数据：${total}条`,
      size: (size) => `分页大小：${size}`
    },
    picker: {
      cancel: "取消",
      done: "完成",
      placeholder: "请选择"
    },
    imgCropper: {
      confirm: "完成",
      cancel: "取消"
    },
    search: {
      search: "搜索",
      cancel: "取消"
    },
    steps: {
      wait: "未开始",
      finished: "已完成",
      process: "进行中",
      failed: "失败"
    },
    tabs: {
      all: "全部"
    },
    upload: {
      error: "上传失败"
    },
    input: {
      placeholder: "请输入..."
    },
    selectPicker: {
      title: "请选择",
      placeholder: "请选择",
      select: "请选择",
      confirm: "确认",
      filterPlaceholder: "搜索"
    },
    tag: {
      placeholder: "请输入",
      add: "新增标签"
    },
    textarea: {
      placeholder: "请输入..."
    },
    tableCol: {
      indexLabel: "序号"
    },
    signature: {
      confirmText: "确认",
      clearText: "清空"
    }
  };
  const lang = vue.ref("zh-CN");
  const messages = vue.reactive({
    "zh-CN": zhCN
  });
  const Locale = {
    messages() {
      return messages[lang.value];
    },
    use(newLang, newMessage) {
      lang.value = newLang;
      if (newMessage) {
        this.add({ [newLang]: newMessage });
      }
    },
    add(newMessages = {}) {
      deepAssign(messages, newMessages);
    }
  };
  const useTranslate = (name) => {
    const prefix = name ? camelCase(name) + "." : "";
    const translate = (key, ...args) => {
      const currentMessages = Locale.messages();
      const message = getPropByPath(currentMessages, prefix + key);
      return isFunction(message) ? message(...args) : message;
    };
    return { translate };
  };
  const searchProps = {
    ...baseProps,
    customInputClass: makeStringProp(""),
    /**
     * 输入框内容，双向绑定
     * 类型: string
     * 默认值: ''
     */
    modelValue: makeStringProp(""),
    /**
     * 是否使用输入框右侧插槽
     * 类型: boolean
     * 默认值: false
     * @deprecated 该属性已废弃，将在下一个minor版本被移除，直接使用插槽即可
     */
    useSuffixSlot: makeBooleanProp(false),
    /**
     * 搜索框占位文本
     * 类型: string
     */
    placeholder: String,
    /**
     * 搜索框右侧文本
     * 类型: string
     */
    cancelTxt: String,
    /**
     * 搜索框亮色（白色）
     * 类型: boolean
     * 默认值: false
     */
    light: makeBooleanProp(false),
    /**
     * 是否隐藏右侧文本
     * 类型: boolean
     * 默认值: false
     */
    hideCancel: makeBooleanProp(false),
    /**
     * 是否禁用搜索框
     * 类型: boolean
     * 默认值: false
     */
    disabled: makeBooleanProp(false),
    /**
     * 原生属性，设置最大长度。-1 表示无限制
     * 类型: string / number
     * 默认值: -1
     */
    maxlength: makeNumberProp(-1),
    /**
     * placeholder 居左边
     * 类型: boolean
     * 默认值: false
     */
    placeholderLeft: makeBooleanProp(false),
    /**
     * 是否自动聚焦
     * 类型: boolean
     * 默认值: false
     * 最低版本: 0.1.63
     */
    focus: makeBooleanProp(false),
    /**
     * 是否在点击清除按钮时聚焦输入框
     * 类型: boolean
     * 默认值: false
     * 最低版本: 0.1.63
     */
    focusWhenClear: makeBooleanProp(false),
    /**
     * 原生属性，指定 placeholder 的样式，目前仅支持color,font-size和font-weight
     */
    placeholderStyle: String,
    /**
     * 原生属性，指定 placeholder 的样式类
     */
    placeholderClass: makeStringProp("")
  };
  const __default__$F = {
    name: "wd-search",
    options: {
      virtualHost: true,
      addGlobalClass: true,
      styleIsolation: "shared"
    }
  };
  const _sfc_main$18 = /* @__PURE__ */ vue.defineComponent({
    ...__default__$F,
    props: searchProps,
    emits: ["update:modelValue", "change", "clear", "search", "focus", "blur", "cancel"],
    setup(__props, { expose: __expose, emit: __emit }) {
      __expose();
      const props = __props;
      const emit = __emit;
      const { translate } = useTranslate("search");
      const isFocused = vue.ref(false);
      const showInput = vue.ref(false);
      const str = vue.ref("");
      const showPlaceHolder = vue.ref(true);
      const clearing = vue.ref(false);
      vue.watch(
        () => props.modelValue,
        (newValue) => {
          str.value = newValue;
          if (newValue) {
            showInput.value = true;
          }
        },
        { immediate: true }
      );
      vue.watch(
        () => props.focus,
        (newValue) => {
          if (newValue) {
            if (props.disabled)
              return;
            closeCover();
          }
        }
      );
      vue.onMounted(() => {
        if (props.focus) {
          closeCover();
        }
      });
      const rootClass = vue.computed(() => {
        return `wd-search  ${props.light ? "is-light" : ""}  ${props.hideCancel ? "is-without-cancel" : ""} ${props.customClass}`;
      });
      const coverStyle = vue.computed(() => {
        const coverStyle2 = {
          display: str.value === "" && showPlaceHolder.value ? "flex" : "none"
        };
        return objToStyle(coverStyle2);
      });
      async function hackFocus(focus) {
        showInput.value = focus;
        await pause();
        isFocused.value = focus;
      }
      async function closeCover() {
        if (props.disabled)
          return;
        await pause(100);
        showPlaceHolder.value = false;
        hackFocus(true);
      }
      function inputValue(event) {
        str.value = event.detail.value;
        emit("update:modelValue", event.detail.value);
        emit("change", {
          value: event.detail.value
        });
      }
      async function clearSearch() {
        str.value = "";
        clearing.value = true;
        if (props.focusWhenClear) {
          isFocused.value = false;
        }
        await pause(100);
        if (props.focusWhenClear) {
          showPlaceHolder.value = false;
          hackFocus(true);
        } else {
          showPlaceHolder.value = true;
          hackFocus(false);
        }
        emit("change", {
          value: ""
        });
        emit("update:modelValue", "");
        emit("clear");
      }
      function search({ detail: { value } }) {
        emit("search", {
          value
        });
      }
      function searchFocus() {
        if (clearing.value) {
          clearing.value = false;
          return;
        }
        showPlaceHolder.value = false;
        emit("focus", {
          value: str.value
        });
      }
      function searchBlur() {
        if (clearing.value)
          return;
        showPlaceHolder.value = !str.value;
        showInput.value = !showPlaceHolder.value;
        isFocused.value = false;
        emit("blur", {
          value: str.value
        });
      }
      function handleCancel() {
        emit("cancel", {
          value: str.value
        });
      }
      const __returned__ = { props, emit, translate, isFocused, showInput, str, showPlaceHolder, clearing, rootClass, coverStyle, hackFocus, closeCover, inputValue, clearSearch, search, searchFocus, searchBlur, handleCancel, wdIcon: __easycom_0$5 };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$17(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: vue.normalizeClass($setup.rootClass),
        style: vue.normalizeStyle(_ctx.customStyle)
      },
      [
        vue.createElementVNode("view", { class: "wd-search__block" }, [
          vue.renderSlot(_ctx.$slots, "prefix", {}, void 0, true),
          vue.createElementVNode("view", { class: "wd-search__field" }, [
            !_ctx.placeholderLeft ? (vue.openBlock(), vue.createElementBlock(
              "view",
              {
                key: 0,
                style: vue.normalizeStyle($setup.coverStyle),
                class: "wd-search__cover",
                onClick: $setup.closeCover
              },
              [
                vue.createVNode($setup["wdIcon"], {
                  name: "search",
                  "custom-class": "wd-search__search-icon"
                }),
                vue.createElementVNode(
                  "text",
                  {
                    class: vue.normalizeClass(`wd-search__placeholder-txt ${_ctx.placeholderClass}`)
                  },
                  vue.toDisplayString(_ctx.placeholder || $setup.translate("search")),
                  3
                  /* TEXT, CLASS */
                )
              ],
              4
              /* STYLE */
            )) : vue.createCommentVNode("v-if", true),
            $setup.showInput || $setup.str || _ctx.placeholderLeft ? (vue.openBlock(), vue.createBlock($setup["wdIcon"], {
              key: 1,
              name: "search",
              "custom-class": "wd-search__search-left-icon"
            })) : vue.createCommentVNode("v-if", true),
            $setup.showInput || $setup.str || _ctx.placeholderLeft ? vue.withDirectives((vue.openBlock(), vue.createElementBlock("input", {
              key: 2,
              placeholder: _ctx.placeholder || $setup.translate("search"),
              "placeholder-class": `wd-search__placeholder-txt ${_ctx.placeholderClass}`,
              "placeholder-style": _ctx.placeholderStyle,
              "confirm-type": "search",
              "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $setup.str = $event),
              class: vue.normalizeClass(["wd-search__input", _ctx.customInputClass]),
              onFocus: $setup.searchFocus,
              onInput: $setup.inputValue,
              onBlur: $setup.searchBlur,
              onConfirm: $setup.search,
              disabled: _ctx.disabled,
              maxlength: _ctx.maxlength,
              focus: $setup.isFocused
            }, null, 42, ["placeholder", "placeholder-class", "placeholder-style", "disabled", "maxlength", "focus"])), [
              [vue.vModelText, $setup.str]
            ]) : vue.createCommentVNode("v-if", true),
            $setup.str ? (vue.openBlock(), vue.createBlock($setup["wdIcon"], {
              key: 3,
              "custom-class": "wd-search__clear wd-search__clear-icon",
              name: "error-fill",
              onClick: $setup.clearSearch
            })) : vue.createCommentVNode("v-if", true)
          ])
        ]),
        !_ctx.hideCancel ? vue.renderSlot(_ctx.$slots, "suffix", { key: 0 }, () => [
          vue.createElementVNode(
            "view",
            {
              class: "wd-search__cancel",
              onClick: $setup.handleCancel
            },
            vue.toDisplayString(_ctx.cancelTxt || $setup.translate("cancel")),
            1
            /* TEXT */
          )
        ], true) : vue.createCommentVNode("v-if", true)
      ],
      6
      /* CLASS, STYLE */
    );
  }
  const __easycom_1$5 = /* @__PURE__ */ _export_sfc(_sfc_main$18, [["render", _sfc_render$17], ["__scopeId", "data-v-cc0202be"], ["__file", "G:/Code/campus/miniProject/uni_modules/wot-design-uni/components/wd-search/wd-search.vue"]]);
  const imgProps = {
    ...baseProps,
    customImage: makeStringProp(""),
    /**
     * 图片链接
     */
    src: String,
    /**
     * 是否显示为圆形
     */
    round: makeBooleanProp(false),
    /**
     * 填充模式：'top left' / 'top right' / 'bottom left' / 'bottom right' / 'right' / 'left' / 'center' / 'bottom' / 'top' / 'heightFix' / 'widthFix' / 'aspectFill' / 'aspectFit' / 'scaleToFill'
     */
    mode: makeStringProp("scaleToFill"),
    /**
     * 是否懒加载
     */
    lazyLoad: makeBooleanProp(false),
    /**
     * 宽度，默认单位为px
     */
    width: numericProp,
    /**
     * 高度，默认单位为px
     */
    height: numericProp,
    /**
     * 圆角大小，默认单位为px
     */
    radius: numericProp,
    /**
     * 是否允许预览
     */
    enablePreview: makeBooleanProp(false),
    /**
     * 开启长按图片显示识别小程序码菜单，仅在微信小程序平台有效
     */
    showMenuByLongpress: makeBooleanProp(false)
  };
  const __default__$E = {
    name: "wd-img",
    options: {
      virtualHost: true,
      addGlobalClass: true,
      styleIsolation: "shared"
    }
  };
  const _sfc_main$17 = /* @__PURE__ */ vue.defineComponent({
    ...__default__$E,
    props: imgProps,
    emits: ["error", "click", "load"],
    setup(__props, { expose: __expose, emit: __emit }) {
      __expose();
      const props = __props;
      const emit = __emit;
      const rootStyle = vue.computed(() => {
        const style = {};
        if (isDef(props.height)) {
          style["height"] = addUnit(props.height);
        }
        if (isDef(props.width)) {
          style["width"] = addUnit(props.width);
        }
        if (isDef(props.radius)) {
          style["border-radius"] = addUnit(props.radius);
          style["overflow"] = "hidden";
        }
        return `${objToStyle(style)};${props.customStyle}`;
      });
      const rootClass = vue.computed(() => {
        return `wd-img  ${props.round ? "is-round" : ""} ${props.customClass}`;
      });
      const status = vue.ref("loading");
      function handleError(event) {
        status.value = "error";
        emit("error", event);
      }
      function handleClick(event) {
        if (props.enablePreview && props.src && status.value == "success") {
          uni.previewImage({
            urls: [props.src]
          });
        }
        emit("click", event);
      }
      function handleLoad(event) {
        status.value = "success";
        emit("load", event);
      }
      const __returned__ = { props, emit, rootStyle, rootClass, status, handleError, handleClick, handleLoad };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$16(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: vue.normalizeClass($setup.rootClass),
        onClick: $setup.handleClick,
        style: vue.normalizeStyle($setup.rootStyle)
      },
      [
        vue.createElementVNode("image", {
          class: vue.normalizeClass(`wd-img__image ${_ctx.customImage}`),
          style: vue.normalizeStyle($setup.status !== "success" ? "width: 0;height: 0;" : ""),
          src: _ctx.src,
          mode: _ctx.mode,
          "show-menu-by-longpress": _ctx.showMenuByLongpress,
          "lazy-load": _ctx.lazyLoad,
          onLoad: $setup.handleLoad,
          onError: $setup.handleError
        }, null, 46, ["src", "mode", "show-menu-by-longpress", "lazy-load"]),
        $setup.status === "loading" ? vue.renderSlot(_ctx.$slots, "loading", { key: 0 }, void 0, true) : vue.createCommentVNode("v-if", true),
        $setup.status === "error" ? vue.renderSlot(_ctx.$slots, "error", { key: 1 }, void 0, true) : vue.createCommentVNode("v-if", true)
      ],
      6
      /* CLASS, STYLE */
    );
  }
  const WdImg = /* @__PURE__ */ _export_sfc(_sfc_main$17, [["render", _sfc_render$16], ["__scopeId", "data-v-cb0c5dbc"], ["__file", "G:/Code/campus/miniProject/uni_modules/wot-design-uni/components/wd-img/wd-img.vue"]]);
  const textProps = {
    ...baseProps,
    /**
     * 主题类型
     * 类型：string
     * 可选值：'default' /'primary' / 'error' / 'warning' / 'success'
     * 默认值：'default'
     */
    type: makeStringProp("default"),
    /**
     * 文字
     * 类型：string | number
     * 默认值：'空字符串'
     */
    text: makeNumericProp(""),
    /**
     * 字体大小
     * 类型：string
     * 默认值：'空字符串'
     */
    size: makeStringProp(""),
    /**
     * 文本处理的匹配模式
     * 可选值：'text-普通文本' / 'date - 日期' / 'phone - 手机号' / 'name - 姓名' / 'price - 金额'
     * 类型：string
     * 默认值：'text'
     */
    mode: makeStringProp("text"),
    /**
     * 文字装饰，下划线，中划线等
     * 可选值：'underline/line-through/overline'
     * 类型：string
     * 默认值：'none'
     */
    decoration: makeStringProp("none"),
    /**
     * mode=phone时，点击文本是否拨打电话
     * 类型：boolean
     * 默认值：false
     */
    call: makeBooleanProp(false),
    /**
     * 是否粗体，默认normal
     * 类型：boolean
     * 默认值：false
     */
    bold: makeBooleanProp(false),
    /**
     * 是否脱敏,当mode为phone和name时生效
     * 类型：boolean
     * 默认值：false
     */
    format: makeBooleanProp(false),
    /**
     * 文本颜色
     * 类型：string
     * 默认值：''
     */
    color: makeStringProp(""),
    /**
     * 前置插槽
     * 类型：string
     * 默认值：''
     */
    prefix: String,
    /**
     * 后置插槽
     * 类型：string
     * 默认值：''
     */
    suffix: String,
    /**
     * 文本显示的行数，如果设置，超出此行数，将会显示省略号。最大值为5。
     */
    lines: Number,
    /**
     * 文本行高
     * 类型：string
     * 默认值：''
     */
    lineHeight: makeStringProp(""),
    /**
     * 自定义根节点样式
     */
    customStyle: makeStringProp(""),
    /**
     * 自定义根节点样式类
     */
    customClass: makeStringProp("")
  };
  class Dayjs {
    constructor(dateStr) {
      this.utc = false;
      const parsedDate = this.parseConfig(dateStr);
      this.date = new Date(parsedDate);
      this.timeZone = this.date.getTimezoneOffset() / 60;
      this.timeZoneString = this.padNumber(String(-1 * this.timeZone).replace(/^(.)?(\d)/, "$10$200"), 5, "+");
      this.mYear = this.date.getFullYear();
      this.mMonth = this.date.getMonth();
      this.mDay = this.date.getDate();
      this.mWeek = this.date.getDay();
      this.mHour = this.date.getHours();
      this.mMinute = this.date.getMinutes();
      this.mSecond = this.date.getSeconds();
    }
    parseConfig(dateStr) {
      if (!dateStr)
        return /* @__PURE__ */ new Date();
      if (isDate(dateStr))
        return dateStr;
      if (/^(\d){8}$/.test(dateStr)) {
        this.utc = true;
        return `${dateStr.substr(0, 4)}-${dateStr.substr(4, 2)}-${dateStr.substr(6, 2)}`;
      }
      return dateStr;
    }
    padNumber(num, length, padChar) {
      return !num || num.length >= length ? num : `${Array(length + 1 - num.length).join(padChar)}${num}`;
    }
    year() {
      return this.mYear;
    }
    month() {
      return this.mMonth;
    }
    unix() {
      const timeZoneOffset = this.utc ? 60 * this.timeZone * 60 * 1e3 : 0;
      return Math.floor((this.date.getTime() + timeZoneOffset) / 1e3);
    }
    toString() {
      return this.date.toUTCString();
    }
    startOf(unit) {
      switch (unit) {
        case "year":
          return new Dayjs(new Date(this.year(), 0, 1));
        case "month":
          return new Dayjs(new Date(this.year(), this.month(), 1));
        default:
          return this;
      }
    }
    add(amount, unit) {
      let interval;
      switch (unit) {
        case "m":
        case "minutes":
          interval = 60;
          break;
        case "h":
        case "hours":
          interval = 60 * 60;
          break;
        case "d":
        case "days":
          interval = 24 * 60 * 60;
          break;
        case "w":
        case "weeks":
          interval = 7 * 24 * 60 * 60;
          break;
        default:
          interval = 1;
      }
      const newUnixTime = this.unix() + amount * interval;
      return new Dayjs(1e3 * newUnixTime);
    }
    subtract(amount, unit) {
      return this.add(-1 * amount, unit);
    }
    format(formatStr = "YYYY-MM-DDTHH:mm:ssZ") {
      const weekdays = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
      return formatStr.replace(/Y{2,4}|M{1,2}|D{1,2}|d{1,4}|H{1,2}|m{1,2}|s{1,2}|Z{1,2}/g, (match) => {
        switch (match) {
          case "YY":
            return String(this.mYear).slice(-2);
          case "YYYY":
            return String(this.mYear);
          case "M":
            return String(this.mMonth + 1);
          case "MM":
            return this.padNumber(String(this.mMonth + 1), 2, "0");
          case "D":
            return String(this.mDay);
          case "DD":
            return this.padNumber(String(this.mDay), 2, "0");
          case "d":
            return String(this.mWeek);
          case "dddd":
            return weekdays[this.mWeek];
          case "H":
            return String(this.mHour);
          case "HH":
            return this.padNumber(String(this.mHour), 2, "0");
          case "m":
            return String(this.mMinute);
          case "mm":
            return this.padNumber(String(this.mMinute), 2, "0");
          case "s":
            return String(this.mSecond);
          case "ss":
            return this.padNumber(String(this.mSecond), 2, "0");
          case "Z":
            return `${this.timeZoneString.slice(0, -2)}:00`;
          case "ZZ":
            return this.timeZoneString;
          default:
            return match;
        }
      });
    }
  }
  function dayjs(dateStr) {
    return new Dayjs(dateStr);
  }
  const __default__$D = {
    name: "wd-text",
    options: {
      virtualHost: true,
      addGlobalClass: true,
      styleIsolation: "shared"
    }
  };
  const _sfc_main$16 = /* @__PURE__ */ vue.defineComponent({
    ...__default__$D,
    props: textProps,
    emits: ["click"],
    setup(__props, { expose: __expose, emit: __emit }) {
      __expose();
      const props = __props;
      const emit = __emit;
      const textClass = vue.ref("");
      vue.watch(
        () => ({
          type: props.type,
          text: props.text,
          mode: props.mode,
          color: props.color,
          bold: props.bold,
          lines: props.lines,
          format: props.format
        }),
        ({ type }) => {
          const types = ["primary", "error", "warning", "success", "default"];
          if (type && !types.includes(type)) {
            formatAppLog("error", "at uni_modules/wot-design-uni/components/wd-text/wd-text.vue:48", `type must be one of ${types.toString()}`);
          }
          computeTextClass();
        },
        { deep: true, immediate: true }
      );
      const rootClass = vue.computed(() => {
        return `wd-text ${props.customClass} ${textClass.value}`;
      });
      const rootStyle = vue.computed(() => {
        const rootStyle2 = {};
        if (props.color) {
          rootStyle2["color"] = props.color;
        }
        if (props.size) {
          rootStyle2["font-size"] = `${props.size}`;
        }
        if (props.lineHeight) {
          rootStyle2["line-height"] = `${props.lineHeight}`;
        }
        if (props.decoration) {
          rootStyle2["text-decoration"] = `${props.decoration}`;
        }
        return `${objToStyle(rootStyle2)};${props.customStyle}`;
      });
      function computeTextClass() {
        const { type, color, bold, lines } = props;
        const textClassList = [];
        if (!color) {
          textClassList.push(`is-${type}`);
        }
        if (isDef(lines)) {
          textClassList.push(`is-lines-${lines}`);
        }
        bold && textClassList.push("is-bold");
        textClass.value = textClassList.join(" ");
      }
      function formatText(text, format, mode) {
        if (format) {
          if (mode === "phone") {
            return text.replace(/^(\d{3})\d{4}(\d{4})$/, "$1****$2");
          } else if (mode === "name") {
            return text.replace(/^(.).*(.)$/, "$1**$2");
          } else {
            throw new Error("mode must be one of phone or name for encryption");
          }
        }
        return text;
      }
      function formatNumber(num) {
        num = Number(num).toFixed(2);
        const x = num.split(".");
        let x1 = x[0];
        const x2 = x.length > 1 ? "." + x[1] : "";
        const rgx = /(\d+)(\d{3})/;
        while (rgx.test(x1)) {
          x1 = x1.replace(rgx, "$1,$2");
        }
        return x1 + x2;
      }
      const formattedText = vue.computed(() => {
        const { text, mode, format } = props;
        if (mode === "date") {
          return dayjs(Number(text)).format("YYYY-MM-DD");
        }
        if (mode === "price") {
          return formatNumber(text);
        }
        return formatText(`${text}`, format, mode);
      });
      function handleClick(event) {
        emit("click", event);
      }
      const __returned__ = { props, emit, textClass, rootClass, rootStyle, computeTextClass, formatText, formatNumber, formattedText, handleClick };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$15(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "text",
      {
        onClick: $setup.handleClick,
        class: vue.normalizeClass($setup.rootClass),
        style: vue.normalizeStyle($setup.rootStyle)
      },
      [
        _ctx.$slots.prefix || _ctx.prefix ? vue.renderSlot(_ctx.$slots, "prefix", { key: 0 }, () => [
          vue.createTextVNode(
            vue.toDisplayString(_ctx.prefix),
            1
            /* TEXT */
          )
        ], true) : vue.createCommentVNode("v-if", true),
        vue.createElementVNode(
          "text",
          null,
          vue.toDisplayString($setup.formattedText),
          1
          /* TEXT */
        ),
        _ctx.$slots.suffix || _ctx.suffix ? vue.renderSlot(_ctx.$slots, "suffix", { key: 1 }, () => [
          vue.createTextVNode(
            vue.toDisplayString(_ctx.suffix),
            1
            /* TEXT */
          )
        ], true) : vue.createCommentVNode("v-if", true)
      ],
      6
      /* CLASS, STYLE */
    );
  }
  const __easycom_1$4 = /* @__PURE__ */ _export_sfc(_sfc_main$16, [["render", _sfc_render$15], ["__scopeId", "data-v-24041fa1"], ["__file", "G:/Code/campus/miniProject/uni_modules/wot-design-uni/components/wd-text/wd-text.vue"]]);
  const _b64chars = [..."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"];
  const _mkUriSafe = (src) => src.replace(/[+/]/g, (m0) => m0 === "+" ? "-" : "_").replace(/=+\$/m, "");
  const fromUint8Array = (src, rfc4648 = false) => {
    let b64 = "";
    for (let i = 0, l = src.length; i < l; i += 3) {
      const [a0, a1, a2] = [src[i], src[i + 1], src[i + 2]];
      const ord = a0 << 16 | a1 << 8 | a2;
      b64 += _b64chars[ord >>> 18];
      b64 += _b64chars[ord >>> 12 & 63];
      b64 += typeof a1 !== "undefined" ? _b64chars[ord >>> 6 & 63] : "=";
      b64 += typeof a2 !== "undefined" ? _b64chars[ord & 63] : "=";
    }
    return rfc4648 ? _mkUriSafe(b64) : b64;
  };
  const _btoa = typeof btoa === "function" ? (s) => btoa(s) : (s) => {
    if (s.charCodeAt(0) > 255) {
      throw new RangeError("The string contains invalid characters.");
    }
    return fromUint8Array(Uint8Array.from(s, (c) => c.charCodeAt(0)));
  };
  const utob = (src) => unescape(encodeURIComponent(src));
  function encode(src, rfc4648 = false) {
    const b64 = _btoa(utob(src));
    return rfc4648 ? _mkUriSafe(b64) : b64;
  }
  const loadingProps = {
    ...baseProps,
    /**
     * 加载指示器类型，可选值：'outline' | 'ring'
     */
    type: makeStringProp("ring"),
    /**
     * 设置加载指示器颜色
     */
    color: makeStringProp("#4D80F0"),
    /**
     * 设置加载指示器大小
     */
    size: makeNumericProp("")
  };
  const __default__$C = {
    name: "wd-loading",
    options: {
      virtualHost: true,
      addGlobalClass: true,
      styleIsolation: "shared"
    }
  };
  const _sfc_main$15 = /* @__PURE__ */ vue.defineComponent({
    ...__default__$C,
    props: loadingProps,
    setup(__props, { expose: __expose }) {
      __expose();
      const svgDefineId = context.id++;
      const svgDefineId1 = context.id++;
      const svgDefineId2 = context.id++;
      const icon = {
        outline(color = "#4D80F0") {
          return `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 42 42"><defs><linearGradient x1="100%" y1="0%" x2="0%" y2="0%" id="${svgDefineId}"><stop stop-color="#FFF" offset="0%" stop-opacity="0"/><stop stop-color="#FFF" offset="100%"/></linearGradient></defs><g fill="none" fill-rule="evenodd"><path d="M21 1c11.046 0 20 8.954 20 20s-8.954 20-20 20S1 32.046 1 21 9.954 1 21 1zm0 7C13.82 8 8 13.82 8 21s5.82 13 13 13 13-5.82 13-13S28.18 8 21 8z" fill="${color}"/><path d="M4.599 21c0 9.044 7.332 16.376 16.376 16.376 9.045 0 16.376-7.332 16.376-16.376" stroke="url(#${svgDefineId}) " stroke-width="3.5" stroke-linecap="round"/></g></svg>`;
        },
        ring(color = "#4D80F0", intermediateColor2 = "#a6bff7") {
          return `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 200 200"><linearGradient id="${svgDefineId1}" gradientUnits="userSpaceOnUse" x1="50" x2="50" y2="180"><stop offset="0" stop-color="${color}"></stop> <stop offset="1" stop-color="${intermediateColor2}"></stop></linearGradient> <path fill="url(#${svgDefineId1})" d="M20 100c0-44.1 35.9-80 80-80V0C44.8 0 0 44.8 0 100s44.8 100 100 100v-20c-44.1 0-80-35.9-80-80z"></path> <linearGradient id="${svgDefineId2}" gradientUnits="userSpaceOnUse" x1="150" y1="20" x2="150" y2="180"><stop offset="0" stop-color="#fff" stop-opacity="0"></stop> <stop offset="1" stop-color="${intermediateColor2}"></stop></linearGradient> <path fill="url(#${svgDefineId2})" d="M100 0v20c44.1 0 80 35.9 80 80s-35.9 80-80 80v20c55.2 0 100-44.8 100-100S155.2 0 100 0z"></path> <circle cx="100" cy="10" r="10" fill="${color}"></circle></svg>`;
        }
      };
      const props = __props;
      const svg = vue.ref("");
      const intermediateColor = vue.ref("");
      const iconSize = vue.ref(null);
      vue.watch(
        () => props.size,
        (newVal) => {
          iconSize.value = addUnit(newVal);
        },
        {
          deep: true,
          immediate: true
        }
      );
      vue.watch(
        () => props.type,
        () => {
          buildSvg();
        },
        {
          deep: true,
          immediate: true
        }
      );
      const rootStyle = vue.computed(() => {
        const style = {};
        if (isDef(iconSize.value)) {
          style.height = addUnit(iconSize.value);
          style.width = addUnit(iconSize.value);
        }
        return `${objToStyle(style)}; ${props.customStyle}`;
      });
      vue.onBeforeMount(() => {
        intermediateColor.value = gradient(props.color, "#ffffff", 2)[1];
        buildSvg();
      });
      function buildSvg() {
        const { type, color } = props;
        let ringType = isDef(type) ? type : "ring";
        const svgStr = `"data:image/svg+xml;base64,${encode(ringType === "ring" ? icon[ringType](color, intermediateColor.value) : icon[ringType](color))}"`;
        svg.value = svgStr;
      }
      const __returned__ = { svgDefineId, svgDefineId1, svgDefineId2, icon, props, svg, intermediateColor, iconSize, rootStyle, buildSvg };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$14(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: vue.normalizeClass(`wd-loading ${$setup.props.customClass}`),
        style: vue.normalizeStyle($setup.rootStyle)
      },
      [
        vue.createElementVNode("view", { class: "wd-loading__body" }, [
          vue.createElementVNode(
            "view",
            {
              class: "wd-loading__svg",
              style: vue.normalizeStyle(`background-image: url(${$setup.svg});`)
            },
            null,
            4
            /* STYLE */
          )
        ])
      ],
      6
      /* CLASS, STYLE */
    );
  }
  const __easycom_0$3 = /* @__PURE__ */ _export_sfc(_sfc_main$15, [["render", _sfc_render$14], ["__scopeId", "data-v-f2b508ee"], ["__file", "G:/Code/campus/miniProject/uni_modules/wot-design-uni/components/wd-loading/wd-loading.vue"]]);
  const transitionProps = {
    ...baseProps,
    /**
     * 是否展示组件
     * 类型：boolean
     * 默认值：false
     */
    show: makeBooleanProp(false),
    /**
     * 动画执行时间
     * 类型：number | boolean | Record<string, number>
     * 默认值：300 (毫秒)
     */
    duration: {
      type: [Object, Number, Boolean],
      default: 300
    },
    /**
     * 弹层内容懒渲染，触发展示时才渲染内容
     * 类型：boolean
     * 默认值：false
     */
    lazyRender: makeBooleanProp(false),
    /**
     * 动画类型
     * 类型：string
     * 可选值：fade / fade-up / fade-down / fade-left / fade-right / slide-up / slide-down / slide-left / slide-right / zoom-in
     * 默认值：'fade'
     */
    name: [String, Array],
    /**
     * 是否在动画结束时销毁子节点（display: none)
     * 类型：boolean
     * 默认值：false
     */
    destroy: makeBooleanProp(true),
    /**
     * 进入过渡的开始状态
     * 类型：string
     */
    enterClass: makeStringProp(""),
    /**
     * 进入过渡的激活状态
     * 类型：string
     */
    enterActiveClass: makeStringProp(""),
    /**
     * 进入过渡的结束状态
     * 类型：string
     */
    enterToClass: makeStringProp(""),
    /**
     * 离开过渡的开始状态
     * 类型：string
     */
    leaveClass: makeStringProp(""),
    /**
     * 离开过渡的激活状态
     * 类型：string
     */
    leaveActiveClass: makeStringProp(""),
    /**
     * 离开过渡的结束状态
     * 类型：string
     */
    leaveToClass: makeStringProp("")
  };
  const __default__$B = {
    name: "wd-transition",
    options: {
      addGlobalClass: true,
      virtualHost: true,
      styleIsolation: "shared"
    }
  };
  const _sfc_main$14 = /* @__PURE__ */ vue.defineComponent({
    ...__default__$B,
    props: transitionProps,
    emits: ["click", "before-enter", "enter", "before-leave", "leave", "after-leave", "after-enter"],
    setup(__props, { expose: __expose, emit: __emit }) {
      __expose();
      const getClassNames = (name) => {
        let enter2 = `${props.enterClass} ${props.enterActiveClass}`;
        let enterTo = `${props.enterToClass} ${props.enterActiveClass}`;
        let leave2 = `${props.leaveClass} ${props.leaveActiveClass}`;
        let leaveTo = `${props.leaveToClass} ${props.leaveActiveClass}`;
        if (Array.isArray(name)) {
          for (let index = 0; index < name.length; index++) {
            enter2 = `wd-${name[index]}-enter wd-${name[index]}-enter-active ${enter2}`;
            enterTo = `wd-${name[index]}-enter-to wd-${name[index]}-enter-active ${enterTo}`;
            leave2 = `wd-${name[index]}-leave wd-${name[index]}-leave-active ${leave2}`;
            leaveTo = `wd-${name[index]}-leave-to wd-${name[index]}-leave-active ${leaveTo}`;
          }
        } else if (name) {
          enter2 = `wd-${name}-enter wd-${name}-enter-active ${enter2}`;
          enterTo = `wd-${name}-enter-to wd-${name}-enter-active ${enterTo}`;
          leave2 = `wd-${name}-leave wd-${name}-leave-active ${leave2}`;
          leaveTo = `wd-${name}-leave-to wd-${name}-leave-active ${leaveTo}`;
        }
        return {
          enter: enter2,
          "enter-to": enterTo,
          leave: leave2,
          "leave-to": leaveTo
        };
      };
      const props = __props;
      const emit = __emit;
      const inited = vue.ref(false);
      const display = vue.ref(false);
      const status = vue.ref("");
      const transitionEnded = vue.ref(false);
      const currentDuration = vue.ref(300);
      const classes = vue.ref("");
      const enterPromise = vue.ref(null);
      const enterLifeCyclePromises = vue.ref(null);
      const leaveLifeCyclePromises = vue.ref(null);
      const style = vue.computed(() => {
        return `-webkit-transition-duration:${currentDuration.value}ms;transition-duration:${currentDuration.value}ms;${display.value || !props.destroy ? "" : "display: none;"}${props.customStyle}`;
      });
      const rootClass = vue.computed(() => {
        return `wd-transition ${props.customClass}  ${classes.value}`;
      });
      vue.onBeforeMount(() => {
        if (props.show) {
          enter();
        }
      });
      vue.watch(
        () => props.show,
        (newVal) => {
          handleShow(newVal);
        },
        { deep: true }
      );
      function handleClick() {
        emit("click");
      }
      function handleShow(value) {
        if (value) {
          handleAbortPromise();
          enter();
        } else {
          leave();
        }
      }
      function handleAbortPromise() {
        isPromise(enterPromise.value) && enterPromise.value.abort();
        isPromise(enterLifeCyclePromises.value) && enterLifeCyclePromises.value.abort();
        isPromise(leaveLifeCyclePromises.value) && leaveLifeCyclePromises.value.abort();
        enterPromise.value = null;
        enterLifeCyclePromises.value = null;
        leaveLifeCyclePromises.value = null;
      }
      function enter() {
        enterPromise.value = new AbortablePromise(async (resolve) => {
          try {
            const classNames = getClassNames(props.name);
            const duration = isObj(props.duration) ? props.duration.enter : props.duration;
            status.value = "enter";
            emit("before-enter");
            enterLifeCyclePromises.value = pause();
            await enterLifeCyclePromises.value;
            emit("enter");
            classes.value = classNames.enter;
            currentDuration.value = duration;
            enterLifeCyclePromises.value = pause();
            await enterLifeCyclePromises.value;
            inited.value = true;
            display.value = true;
            enterLifeCyclePromises.value = pause();
            await enterLifeCyclePromises.value;
            enterLifeCyclePromises.value = null;
            transitionEnded.value = false;
            classes.value = classNames["enter-to"];
            resolve();
          } catch (error) {
          }
        });
      }
      async function leave() {
        if (!enterPromise.value) {
          transitionEnded.value = false;
          return onTransitionEnd();
        }
        try {
          await enterPromise.value;
          if (!display.value)
            return;
          const classNames = getClassNames(props.name);
          const duration = isObj(props.duration) ? props.duration.leave : props.duration;
          status.value = "leave";
          emit("before-leave");
          currentDuration.value = duration;
          leaveLifeCyclePromises.value = pause();
          await leaveLifeCyclePromises.value;
          emit("leave");
          classes.value = classNames.leave;
          leaveLifeCyclePromises.value = pause();
          await leaveLifeCyclePromises.value;
          transitionEnded.value = false;
          classes.value = classNames["leave-to"];
          leaveLifeCyclePromises.value = setPromise(currentDuration.value);
          await leaveLifeCyclePromises.value;
          leaveLifeCyclePromises.value = null;
          onTransitionEnd();
          enterPromise.value = null;
        } catch (error) {
        }
      }
      function setPromise(duration) {
        return new AbortablePromise((resolve) => {
          const timer = setTimeout(() => {
            clearTimeout(timer);
            resolve();
          }, duration);
        });
      }
      function onTransitionEnd() {
        if (transitionEnded.value)
          return;
        transitionEnded.value = true;
        if (status.value === "leave") {
          emit("after-leave");
        } else if (status.value === "enter") {
          emit("after-enter");
        }
        if (!props.show && display.value) {
          display.value = false;
        }
      }
      const __returned__ = { getClassNames, props, emit, inited, display, status, transitionEnded, currentDuration, classes, enterPromise, enterLifeCyclePromises, leaveLifeCyclePromises, style, rootClass, handleClick, handleShow, handleAbortPromise, enter, leave, setPromise, onTransitionEnd };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$13(_ctx, _cache, $props, $setup, $data, $options) {
    return !_ctx.lazyRender || $setup.inited ? (vue.openBlock(), vue.createElementBlock(
      "view",
      {
        key: 0,
        class: vue.normalizeClass($setup.rootClass),
        style: vue.normalizeStyle($setup.style),
        onTransitionend: $setup.onTransitionEnd,
        onClick: $setup.handleClick
      },
      [
        vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
      ],
      38
      /* CLASS, STYLE, NEED_HYDRATION */
    )) : vue.createCommentVNode("v-if", true);
  }
  const wdTransition = /* @__PURE__ */ _export_sfc(_sfc_main$14, [["render", _sfc_render$13], ["__scopeId", "data-v-af59a128"], ["__file", "G:/Code/campus/miniProject/uni_modules/wot-design-uni/components/wd-transition/wd-transition.vue"]]);
  function usePopover(visibleArrow = true) {
    const { proxy } = vue.getCurrentInstance();
    const popStyle = vue.ref("");
    const arrowStyle = vue.ref("");
    const showStyle = vue.ref("");
    const arrowClass = vue.ref("");
    const popWidth = vue.ref(0);
    const popHeight = vue.ref(0);
    const left = vue.ref(0);
    const bottom = vue.ref(0);
    const width = vue.ref(0);
    const height = vue.ref(0);
    const top = vue.ref(0);
    function noop() {
    }
    function init(placement, visibleArrow2, selector) {
      if (visibleArrow2) {
        const arrowClassArr = [
          `wd-${selector}__arrow`,
          placement === "bottom" || placement === "bottom-start" || placement === "bottom-end" ? `wd-${selector}__arrow-up` : "",
          placement === "left" || placement === "left-start" || placement === "left-end" ? `wd-${selector}__arrow-right` : "",
          placement === "right" || placement === "right-start" || placement === "right-end" ? `wd-${selector}__arrow-left` : "",
          placement === "top" || placement === "top-start" || placement === "top-end" ? `wd-${selector}__arrow-down` : ""
        ];
        arrowClass.value = arrowClassArr.join(" ");
      }
      getRect("#target", false, proxy).then((rect) => {
        if (!rect)
          return;
        left.value = rect.left;
        bottom.value = rect.bottom;
        width.value = rect.width;
        height.value = rect.height;
        top.value = rect.top;
      });
      getRect("#pos", false, proxy).then((rect) => {
        if (!rect)
          return;
        popWidth.value = rect.width;
        popHeight.value = rect.height;
      });
    }
    function control(placement, offset) {
      const arrowSize = visibleArrow ? 9 : 0;
      const verticalX = width.value / 2;
      const verticalY = arrowSize + height.value + 5;
      const horizontalX = width.value + arrowSize + 5;
      const horizontalY = height.value / 2;
      let offsetX = 0;
      let offsetY = 0;
      if (Array.isArray(offset)) {
        offsetX = (verticalX - 17 > 0 ? 0 : verticalX - 25) + offset[0];
        offsetY = (horizontalY - 17 > 0 ? 0 : horizontalY - 25) + (offset[1] ? offset[1] : offset[0]);
      } else if (isObj(offset)) {
        offsetX = (verticalX - 17 > 0 ? 0 : verticalX - 25) + offset.x;
        offsetY = (horizontalY - 17 > 0 ? 0 : horizontalY - 25) + offset.y;
      } else {
        offsetX = (verticalX - 17 > 0 ? 0 : verticalX - 25) + offset;
        offsetY = (horizontalY - 17 > 0 ? 0 : horizontalY - 25) + offset;
      }
      const placements = /* @__PURE__ */ new Map([
        // 上
        ["top", [`left: ${verticalX}px; bottom: ${verticalY}px; transform: translateX(-50%);`, "left: 50%;"]],
        [
          "top-start",
          [
            `left: ${offsetX}px; bottom: ${verticalY}px;`,
            `left: ${(popWidth.value >= width.value ? width.value / 2 : popWidth.value - 25) - offsetX}px;`
          ]
        ],
        [
          "top-end",
          [
            `right: ${offsetX}px; bottom: ${verticalY}px;`,
            `right: ${(popWidth.value >= width.value ? width.value / 2 : popWidth.value - 25) - offsetX}px; transform: translateX(50%);`
          ]
        ],
        // 下
        ["bottom", [`left: ${verticalX}px; top: ${verticalY}px; transform: translateX(-50%);`, "left: 50%;"]],
        [
          "bottom-start",
          [`left: ${offsetX}px; top: ${verticalY}px;`, `left: ${(popWidth.value >= width.value ? width.value / 2 : popWidth.value - 25) - offsetX}px;`]
        ],
        [
          "bottom-end",
          [
            `right: ${offsetX}px; top: ${verticalY}px;`,
            `right: ${(popWidth.value >= width.value ? width.value / 2 : popWidth.value - 25) - offsetX}px; transform: translateX(50%);`
          ]
        ],
        // 左
        ["left", [`right: ${horizontalX}px; top: ${horizontalY}px; transform: translateY(-50%);`, "top: 50%"]],
        [
          "left-start",
          [
            `right: ${horizontalX}px; top: ${offsetY}px;`,
            `top: ${(popHeight.value >= height.value ? height.value / 2 : popHeight.value - 20) - offsetY}px;`
          ]
        ],
        [
          "left-end",
          [
            `right: ${horizontalX}px; bottom: ${offsetY}px;`,
            `bottom: ${(popHeight.value >= height.value ? height.value / 2 : popHeight.value - 20) - offsetY}px; transform: translateY(50%);`
          ]
        ],
        // 右
        ["right", [`left: ${horizontalX}px; top: ${horizontalY}px; transform: translateY(-50%);`, "top: 50%"]],
        [
          "right-start",
          [
            `left: ${horizontalX}px; top: ${offsetY}px;`,
            `top: ${(popHeight.value >= height.value ? height.value / 2 : popHeight.value - 20) - offsetY}px;`
          ]
        ],
        [
          "right-end",
          [
            `left: ${horizontalX}px; bottom: ${offsetY}px;`,
            `bottom: ${(popHeight.value >= height.value ? height.value / 2 : popHeight.value - 20) - offsetY}px; transform: translateY(50%);`
          ]
        ]
      ]);
      popStyle.value = placements.get(placement)[0];
      arrowStyle.value = placements.get(placement)[1];
    }
    return { popStyle, arrowStyle, showStyle, arrowClass, init, control, noop };
  }
  let queue = [];
  function pushToQueue(comp) {
    queue.push(comp);
  }
  function removeFromQueue(comp) {
    queue = queue.filter((item) => {
      return item.$.uid !== comp.$.uid;
    });
  }
  function closeOther(comp) {
    queue.forEach((item) => {
      if (item.$.uid !== comp.$.uid) {
        item.$.exposed.close();
      }
    });
  }
  const queueKey = "__QUEUE_KEY__";
  function useQueue() {
    const queue2 = vue.ref([]);
    function pushToQueue2(comp) {
      queue2.value.push(comp);
    }
    function removeFromQueue2(comp) {
      queue2.value = queue2.value.filter((item) => {
        return item.$.uid !== comp.$.uid;
      });
    }
    function closeOther2(comp) {
      queue2.value.forEach((item) => {
        if (item.$.uid !== comp.$.uid) {
          item.$.exposed.close();
        }
      });
    }
    function closeOutside() {
      queue2.value.forEach((item) => {
        item.$.exposed.close();
      });
    }
    vue.provide(queueKey, {
      queue: queue2,
      pushToQueue: pushToQueue2,
      removeFromQueue: removeFromQueue2,
      closeOther: closeOther2,
      closeOutside
    });
    return {
      closeOther: closeOther2,
      closeOutside
    };
  }
  const popoverProps = {
    ...baseProps,
    customArrow: makeStringProp(""),
    customPop: makeStringProp(""),
    /**
     * 是否显示 popover 箭头
     */
    visibleArrow: makeBooleanProp(true),
    /**
     * 显示的内容，也可以通过 slot#content 传入
     */
    content: [String, Object],
    /**
     * 指定 popover 的放置位置：top / top-start / top-end / bottom / bottom-start / bottom-end / left / left-start / left-end / right / right-start / right-end
     */
    placement: makeStringProp("bottom"),
    /**
     * 偏移量
     */
    offset: makeNumberProp(0),
    /**
     * 是否使用内容插槽
     */
    useContentSlot: makeBooleanProp(false),
    /**
     * 是否禁用 popover
     */
    disabled: makeBooleanProp(false),
    /**
     * 是否显示关闭按钮
     */
    showClose: makeBooleanProp(false),
    /**
     * 控制 popover 的显示状态
     */
    modelValue: makeBooleanProp(false),
    /**
     * 当前显示的模式，决定内容的展现形式，可选值：normal（普通模式）/ menu（菜单模式）
     */
    mode: makeStringProp("normal")
  };
  const __default__$A = {
    name: "wd-popover",
    options: {
      virtualHost: true,
      addGlobalClass: true,
      styleIsolation: "shared"
    }
  };
  const _sfc_main$13 = /* @__PURE__ */ vue.defineComponent({
    ...__default__$A,
    props: popoverProps,
    emits: ["update:modelValue", "menuclick", "change", "open", "close"],
    setup(__props, { expose: __expose, emit: __emit }) {
      const props = __props;
      const emit = __emit;
      const queue2 = vue.inject(queueKey, null);
      const selector = "popover";
      const { proxy } = vue.getCurrentInstance();
      const popover = usePopover(props.visibleArrow);
      const showPopover = vue.ref(false);
      vue.watch(
        () => props.content,
        (newVal) => {
          const { mode } = props;
          if (mode === "normal" && typeof newVal !== "string") {
            formatAppLog("error", "at uni_modules/wot-design-uni/components/wd-popover/wd-popover.vue:88", "The value type must be a string type in normal mode");
          } else if (mode === "menu" && !isArray(newVal)) {
            formatAppLog("error", "at uni_modules/wot-design-uni/components/wd-popover/wd-popover.vue:90", "The value type must be a Array type in menu mode");
          }
        }
      );
      vue.watch(
        () => props.placement,
        () => {
          popover.init(props.placement, props.visibleArrow, selector);
        }
      );
      vue.watch(
        () => props.modelValue,
        (newValue) => {
          showPopover.value = newValue;
        }
      );
      vue.watch(
        () => showPopover.value,
        (newValue) => {
          if (newValue) {
            popover.control(props.placement, props.offset);
            if (queue2 && queue2.closeOther) {
              queue2.closeOther(proxy);
            } else {
              closeOther(proxy);
            }
          }
          popover.showStyle.value = newValue ? "display: inline-block;" : "display: none;";
          emit("change", { show: newValue });
          emit(`${newValue ? "open" : "close"}`);
        }
      );
      vue.onMounted(() => {
        popover.init(props.placement, props.visibleArrow, selector);
      });
      vue.onBeforeMount(() => {
        if (queue2 && queue2.pushToQueue) {
          queue2.pushToQueue(proxy);
        } else {
          pushToQueue(proxy);
        }
        popover.showStyle.value = showPopover.value ? "opacity: 1;" : "opacity: 0;";
      });
      vue.onBeforeUnmount(() => {
        if (queue2 && queue2.removeFromQueue) {
          queue2.removeFromQueue(proxy);
        } else {
          removeFromQueue(proxy);
        }
      });
      function menuClick(index) {
        updateModelValue(false);
        emit("menuclick", {
          item: props.content[index],
          index
        });
      }
      function toggle() {
        if (props.disabled)
          return;
        updateModelValue(!showPopover.value);
      }
      function open() {
        updateModelValue(true);
      }
      function close() {
        updateModelValue(false);
      }
      function updateModelValue(value) {
        showPopover.value = value;
        emit("update:modelValue", value);
      }
      __expose({
        open,
        close
      });
      const __returned__ = { props, emit, queue: queue2, selector, proxy, popover, showPopover, menuClick, toggle, open, close, updateModelValue, wdIcon: __easycom_0$5, wdTransition };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$12(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: vue.normalizeClass(`wd-popover ${_ctx.customClass}`),
        style: vue.normalizeStyle(_ctx.customStyle),
        id: "popover",
        onClick: _cache[0] || (_cache[0] = vue.withModifiers((...args) => $setup.popover.noop && $setup.popover.noop(...args), ["stop"]))
      },
      [
        vue.createCommentVNode(" 使用插槽时无法获取正确宽高 "),
        vue.createElementVNode("view", {
          class: "wd-popover__pos wd-popover__hidden",
          id: "pos"
        }, [
          vue.createElementVNode(
            "view",
            {
              class: vue.normalizeClass(`wd-popover__container ${_ctx.customPop}`)
            },
            [
              !_ctx.useContentSlot && _ctx.mode === "normal" ? (vue.openBlock(), vue.createElementBlock(
                "view",
                {
                  key: 0,
                  class: "wd-popover__inner"
                },
                vue.toDisplayString(_ctx.content),
                1
                /* TEXT */
              )) : vue.createCommentVNode("v-if", true),
              !_ctx.useContentSlot && _ctx.mode === "menu" && typeof _ctx.content === "object" ? (vue.openBlock(), vue.createElementBlock("view", {
                key: 1,
                class: "wd-popover__menu"
              }, [
                (vue.openBlock(true), vue.createElementBlock(
                  vue.Fragment,
                  null,
                  vue.renderList(_ctx.content, (item, index) => {
                    return vue.openBlock(), vue.createElementBlock("view", {
                      key: index,
                      class: "wd-popover__menu-inner",
                      onClick: ($event) => $setup.menuClick(index)
                    }, [
                      item.iconClass ? (vue.openBlock(), vue.createBlock($setup["wdIcon"], {
                        key: 0,
                        name: item.iconClass,
                        "custom-class": "wd-popover__icon"
                      }, null, 8, ["name"])) : vue.createCommentVNode("v-if", true),
                      vue.createElementVNode(
                        "text",
                        null,
                        vue.toDisplayString(item.content),
                        1
                        /* TEXT */
                      )
                    ], 8, ["onClick"]);
                  }),
                  128
                  /* KEYED_FRAGMENT */
                ))
              ])) : vue.createCommentVNode("v-if", true)
            ],
            2
            /* CLASS */
          )
        ]),
        vue.createVNode($setup["wdTransition"], {
          "custom-class": "wd-popover__pos",
          "custom-style": $setup.popover.popStyle.value,
          show: $setup.showPopover,
          name: "fade",
          duration: 200
        }, {
          default: vue.withCtx(() => [
            vue.createElementVNode(
              "view",
              {
                class: vue.normalizeClass(`wd-popover__container ${_ctx.customPop}`)
              },
              [
                $setup.props.visibleArrow ? (vue.openBlock(), vue.createElementBlock(
                  "view",
                  {
                    key: 0,
                    class: vue.normalizeClass(`wd-popover__arrow ${$setup.popover.arrowClass.value} ${_ctx.customArrow}`),
                    style: vue.normalizeStyle($setup.popover.arrowStyle.value)
                  },
                  null,
                  6
                  /* CLASS, STYLE */
                )) : vue.createCommentVNode("v-if", true),
                vue.createCommentVNode(" 普通模式 "),
                !_ctx.useContentSlot && _ctx.mode === "normal" ? (vue.openBlock(), vue.createElementBlock(
                  "view",
                  {
                    key: 1,
                    class: "wd-popover__inner"
                  },
                  vue.toDisplayString(_ctx.content),
                  1
                  /* TEXT */
                )) : vue.createCommentVNode("v-if", true),
                vue.createCommentVNode(" 列表模式 "),
                !_ctx.useContentSlot && _ctx.mode === "menu" ? (vue.openBlock(), vue.createElementBlock("view", {
                  key: 2,
                  class: "wd-popover__menu"
                }, [
                  (vue.openBlock(true), vue.createElementBlock(
                    vue.Fragment,
                    null,
                    vue.renderList(_ctx.content, (item, index) => {
                      return vue.openBlock(), vue.createElementBlock("view", {
                        key: index,
                        class: "wd-popover__menu-inner",
                        onClick: ($event) => $setup.menuClick(index),
                        style: vue.normalizeStyle(index === 0 ? "border-top: none" : "")
                      }, [
                        typeof item === "object" && item.iconClass ? (vue.openBlock(), vue.createBlock($setup["wdIcon"], {
                          key: 0,
                          name: item.iconClass,
                          "custom-class": "wd-popover__icon"
                        }, null, 8, ["name"])) : vue.createCommentVNode("v-if", true),
                        vue.createElementVNode(
                          "view",
                          { style: { "display": "inline-block" } },
                          vue.toDisplayString(typeof item === "object" && item.content ? item.content : ""),
                          1
                          /* TEXT */
                        )
                      ], 12, ["onClick"]);
                    }),
                    128
                    /* KEYED_FRAGMENT */
                  ))
                ])) : (vue.openBlock(), vue.createElementBlock(
                  vue.Fragment,
                  { key: 3 },
                  [
                    vue.createCommentVNode(" 用户自定义样式 "),
                    vue.renderSlot(_ctx.$slots, "content", {}, void 0, true)
                  ],
                  2112
                  /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
                ))
              ],
              2
              /* CLASS */
            ),
            _ctx.showClose ? (vue.openBlock(), vue.createBlock($setup["wdIcon"], {
              key: 0,
              name: "close",
              "custom-class": "wd-popover__close-icon",
              onClick: $setup.toggle
            })) : vue.createCommentVNode("v-if", true)
          ]),
          _: 3
          /* FORWARDED */
        }, 8, ["custom-style", "show"]),
        vue.createElementVNode("view", {
          onClick: $setup.toggle,
          class: "wd-popover__target",
          id: "target"
        }, [
          vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
        ])
      ],
      6
      /* CLASS, STYLE */
    );
  }
  const __easycom_9 = /* @__PURE__ */ _export_sfc(_sfc_main$13, [["render", _sfc_render$12], ["__scopeId", "data-v-690215fc"], ["__file", "G:/Code/campus/miniProject/uni_modules/wot-design-uni/components/wd-popover/wd-popover.vue"]]);
  const statusTipProps = {
    ...baseProps,
    /**
     * 缺省图片类型，支持传入图片 URL。
     * 类型: string
     * 可选值: search, network, content, collect, comment, halo, message
     * 默认值: network
     */
    image: makeStringProp("network"),
    /**
     * 图片大小，默认单位为 `px`。
     * 类型: string 或 number 或 ImageSize
     * 默认值: 空字符串
     */
    imageSize: {
      type: [String, Number, Object],
      default: ""
    },
    /**
     * 提示文案。
     * 类型: string
     * 默认值: 空字符串
     */
    tip: makeStringProp(""),
    /**
     * 图片裁剪、缩放的模式
     * 类型：string
     * 默认值：'aspectFill'
     */
    imageMode: makeStringProp("aspectFill"),
    /**
     * 图片路径前缀，指向图片所在目录，用于拼接图片 URL。推荐将图片放到自己的服务器上，并设置此属性。
     * 类型: string
     * 默认值: https://registry.npmmirror.com/wot-design-uni-assets/*\/files/
     */
    urlPrefix: makeStringProp("https://registry.npmmirror.com/wot-design-uni-assets/*/files/")
  };
  const __default__$z = {
    name: "wd-status-tip",
    options: {
      addGlobalClass: true,
      virtualHost: true,
      styleIsolation: "shared"
    }
  };
  const _sfc_main$12 = /* @__PURE__ */ vue.defineComponent({
    ...__default__$z,
    props: statusTipProps,
    setup(__props, { expose: __expose }) {
      __expose();
      const props = __props;
      const imgUrl = vue.computed(() => {
        let img = "";
        if (["search", "network", "content", "collect", "comment", "halo", "message"].includes(props.image)) {
          img = `${props.urlPrefix}${props.image}.png`;
        } else {
          img = props.image;
        }
        return img;
      });
      const imgStyle = vue.computed(() => {
        let style = {};
        if (props.imageSize) {
          if (isObj(props.imageSize)) {
            isDef(props.imageSize.height) && (style.height = addUnit(props.imageSize.height));
            isDef(props.imageSize.width) && (style.width = addUnit(props.imageSize.width));
          } else {
            style = {
              height: addUnit(props.imageSize),
              width: addUnit(props.imageSize)
            };
          }
        }
        return `${objToStyle(style)}`;
      });
      const __returned__ = { props, imgUrl, imgStyle, wdImg: WdImg };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$11(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: vue.normalizeClass(`wd-status-tip  ${_ctx.customClass}`),
        style: vue.normalizeStyle(_ctx.customStyle)
      },
      [
        _ctx.$slots.image ? vue.renderSlot(_ctx.$slots, "image", { key: 0 }, void 0, true) : $setup.imgUrl ? (vue.openBlock(), vue.createBlock($setup["wdImg"], {
          key: 1,
          mode: _ctx.imageMode,
          src: $setup.imgUrl,
          "custom-class": "wd-status-tip__image",
          "custom-style": $setup.imgStyle
        }, null, 8, ["mode", "src", "custom-style"])) : vue.createCommentVNode("v-if", true),
        _ctx.tip ? (vue.openBlock(), vue.createElementBlock(
          "view",
          {
            key: 2,
            class: "wd-status-tip__text"
          },
          vue.toDisplayString(_ctx.tip),
          1
          /* TEXT */
        )) : vue.createCommentVNode("v-if", true)
      ],
      6
      /* CLASS, STYLE */
    );
  }
  const __easycom_4$1 = /* @__PURE__ */ _export_sfc(_sfc_main$12, [["render", _sfc_render$11], ["__scopeId", "data-v-f52470e5"], ["__file", "G:/Code/campus/miniProject/uni_modules/wot-design-uni/components/wd-status-tip/wd-status-tip.vue"]]);
  const dividerProps = {
    ...baseProps,
    /**
     * 自定义颜色
     */
    color: String,
    /**
     * 内容位置，可选值为 `left` `right` `center`
     * 默认值：`center`
     */
    contentPosition: makeStringProp("center"),
    /**
     * 是否显示为虚线
     * 默认值：`false`
     */
    dashed: Boolean,
    /**
     * 是否为垂直分割线
     * 默认值：`false`
     */
    vertical: makeBooleanProp(false),
    /**
     * 是否显示为 0.5px 的线
     * 默认值：`true`
     */
    hairline: makeBooleanProp(true)
  };
  const __default__$y = {
    name: "wd-divider",
    options: {
      virtualHost: true,
      addGlobalClass: true,
      styleIsolation: "shared"
    }
  };
  const _sfc_main$11 = /* @__PURE__ */ vue.defineComponent({
    ...__default__$y,
    props: dividerProps,
    setup(__props, { expose: __expose }) {
      __expose();
      const props = __props;
      const slots = vue.useSlots();
      const rootStyle = vue.computed(() => {
        const { color } = props;
        const style = {};
        if (color) {
          style.color = color;
        }
        return `${objToStyle(style)};${props.customStyle}`;
      });
      const rootClass = vue.computed(() => {
        const prefixCls = "wd-divider";
        const classes = {
          [prefixCls]: true,
          ["is-dashed"]: props.dashed,
          ["is-hairline"]: props.hairline,
          [`${prefixCls}--vertical`]: props.vertical,
          [`${prefixCls}--center`]: !props.vertical && !!slots.default,
          [`${prefixCls}--left`]: !props.vertical && props.contentPosition === "left",
          [`${prefixCls}--right`]: !props.vertical && props.contentPosition === "right",
          [props.customClass]: !!props.customClass
        };
        return classes;
      });
      const __returned__ = { props, slots, rootStyle, rootClass };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$10(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: vue.normalizeClass($setup.rootClass),
        style: vue.normalizeStyle($setup.rootStyle)
      },
      [
        !_ctx.vertical ? vue.renderSlot(_ctx.$slots, "default", { key: 0 }, void 0, true) : vue.createCommentVNode("v-if", true)
      ],
      6
      /* CLASS, STYLE */
    );
  }
  const __easycom_3$1 = /* @__PURE__ */ _export_sfc(_sfc_main$11, [["render", _sfc_render$10], ["__scopeId", "data-v-86c73a37"], ["__file", "G:/Code/campus/miniProject/uni_modules/wot-design-uni/components/wd-divider/wd-divider.vue"]]);
  const loadmoreProps = {
    ...baseProps,
    /**
     * 加载状态，可选值：'loading' | 'error' | 'finished'
     */
    state: String,
    /**
     * 加载提示文案
     */
    loadingText: String,
    /**
     * 全部加载完的提示文案
     */
    finishedText: String,
    /**
     * 加载失败的提示文案
     */
    errorText: String,
    /**
     * 加载中loading组件的属性
     * 参考loading组件
     */
    loadingProps: Object
  };
  const __default__$x = {
    name: "wd-loadmore",
    options: {
      virtualHost: true,
      addGlobalClass: true,
      styleIsolation: "shared"
    }
  };
  const _sfc_main$10 = /* @__PURE__ */ vue.defineComponent({
    ...__default__$x,
    props: loadmoreProps,
    emits: ["reload"],
    setup(__props, { expose: __expose, emit: __emit }) {
      __expose();
      const customLoadingProps = vue.computed(() => {
        const loadingProps2 = isDef(props.loadingProps) ? omitBy(props.loadingProps, isUndefined) : {};
        loadingProps2.customClass = `wd-loadmore__loading ${loadingProps2.customClass || ""}`;
        return loadingProps2;
      });
      const props = __props;
      const emit = __emit;
      const { translate } = useTranslate("loadmore");
      const currentState = vue.ref(null);
      function reload() {
        if (props.state !== "error")
          return;
        currentState.value = "loading";
        emit("reload");
      }
      const __returned__ = { customLoadingProps, props, emit, translate, currentState, reload, wdDivider: __easycom_3$1, wdLoading: __easycom_0$3, wdIcon: __easycom_0$5 };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$$(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: vue.normalizeClass(["wd-loadmore", _ctx.customClass]),
        style: vue.normalizeStyle(_ctx.customStyle),
        onClick: $setup.reload
      },
      [
        _ctx.state === "finished" ? (vue.openBlock(), vue.createBlock($setup["wdDivider"], { key: 0 }, {
          default: vue.withCtx(() => [
            vue.createTextVNode(
              vue.toDisplayString(_ctx.finishedText || $setup.translate("finished")),
              1
              /* TEXT */
            )
          ]),
          _: 1
          /* STABLE */
        })) : vue.createCommentVNode("v-if", true),
        _ctx.state === "error" ? (vue.openBlock(), vue.createElementBlock(
          vue.Fragment,
          { key: 1 },
          [
            vue.createElementVNode(
              "text",
              { class: "wd-loadmore__text" },
              vue.toDisplayString(_ctx.errorText || $setup.translate("error")),
              1
              /* TEXT */
            ),
            vue.createElementVNode(
              "text",
              { class: "wd-loadmore__text is-light" },
              vue.toDisplayString($setup.translate("retry")),
              1
              /* TEXT */
            ),
            vue.createVNode($setup["wdIcon"], {
              name: "refresh",
              "custom-class": "wd-loadmore__refresh"
            })
          ],
          64
          /* STABLE_FRAGMENT */
        )) : vue.createCommentVNode("v-if", true),
        _ctx.state === "loading" ? (vue.openBlock(), vue.createElementBlock(
          vue.Fragment,
          { key: 2 },
          [
            vue.createVNode(
              $setup["wdLoading"],
              vue.normalizeProps(vue.guardReactiveProps($setup.customLoadingProps)),
              null,
              16
              /* FULL_PROPS */
            ),
            vue.createElementVNode(
              "text",
              { class: "wd-loadmore__text" },
              vue.toDisplayString(_ctx.loadingText || $setup.translate("loading")),
              1
              /* TEXT */
            )
          ],
          64
          /* STABLE_FRAGMENT */
        )) : vue.createCommentVNode("v-if", true)
      ],
      6
      /* CLASS, STYLE */
    );
  }
  const __easycom_10$1 = /* @__PURE__ */ _export_sfc(_sfc_main$10, [["render", _sfc_render$$], ["__scopeId", "data-v-4ce79f90"], ["__file", "G:/Code/campus/miniProject/uni_modules/wot-design-uni/components/wd-loadmore/wd-loadmore.vue"]]);
  const buttonProps = {
    ...baseProps,
    /**
     * 幽灵按钮
     */
    plain: makeBooleanProp(false),
    /**
     * 圆角按钮
     */
    round: makeBooleanProp(true),
    /**
     * 禁用按钮
     */
    disabled: makeBooleanProp(false),
    /**
     * 是否细边框
     */
    hairline: makeBooleanProp(false),
    /**
     * 块状按钮
     */
    block: makeBooleanProp(false),
    /**
     * 按钮类型，可选值：primary / success / info / warning / error / text / icon
     */
    type: makeStringProp("primary"),
    /**
     * 按钮尺寸，可选值：small / medium / large
     */
    size: makeStringProp("medium"),
    /**
     * 图标类名
     */
    icon: String,
    /**
     * 类名前缀，用于使用自定义图标，用法参考Icon组件
     */
    classPrefix: makeStringProp("wd-icon"),
    /**
     * 加载中按钮
     */
    loading: makeBooleanProp(false),
    /**
     * 加载图标颜色
     */
    loadingColor: String,
    /**
     * 开放能力
     */
    openType: String,
    /**
     * 指定是否阻止本节点的祖先节点出现点击态
     */
    hoverStopPropagation: Boolean,
    /**
     * 指定返回用户信息的语言，zh_CN 简体中文，zh_TW 繁体中文，en 英文
     */
    lang: String,
    /**
     * 会话来源，open-type="contact"时有效
     */
    sessionFrom: String,
    /**
     * 会话内消息卡片标题，open-type="contact"时有效
     */
    sendMessageTitle: String,
    /**
     * 会话内消息卡片点击跳转小程序路径，open-type="contact"时有效
     */
    sendMessagePath: String,
    /**
     * 会话内消息卡片图片，open-type="contact"时有效
     */
    sendMessageImg: String,
    /**
     * 打开 APP 时，向 APP 传递的参数，open-type=launchApp时有效
     */
    appParameter: String,
    /**
     * 是否显示会话内消息卡片，设置此参数为 true，用户进入客服会话会在右下角显示"可能要发送的小程序"提示，用户点击后可以快速发送小程序消息，open-type="contact"时有效
     */
    showMessageCard: Boolean,
    /**
     * 按钮的唯一标识，可用于设置隐私同意授权按钮的id
     */
    buttonId: String,
    /**
     * 支付宝小程序，当 open-type 为 getAuthorize 时有效。
     * 可选值：'phoneNumber' | 'userInfo'
     */
    scope: String
  };
  const __default__$w = {
    name: "wd-button",
    options: {
      addGlobalClass: true,
      virtualHost: true,
      styleIsolation: "shared"
    }
  };
  const _sfc_main$$ = /* @__PURE__ */ vue.defineComponent({
    ...__default__$w,
    props: buttonProps,
    emits: [
      "click",
      "getuserinfo",
      "contact",
      "getphonenumber",
      "error",
      "launchapp",
      "opensetting",
      "chooseavatar",
      "agreeprivacyauthorization"
    ],
    setup(__props, { expose: __expose, emit: __emit }) {
      __expose();
      const loadingIcon = (color = "#4D80F0", reverse = true) => {
        return `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 42 42"><defs><linearGradient x1="100%" y1="0%" x2="0%" y2="0%" id="a"><stop stop-color="${reverse ? color : "#fff"}" offset="0%" stop-opacity="0"/><stop stop-color="${reverse ? color : "#fff"}" offset="100%"/></linearGradient></defs><g fill="none" fill-rule="evenodd"><path d="M21 1c11.046 0 20 8.954 20 20s-8.954 20-20 20S1 32.046 1 21 9.954 1 21 1zm0 7C13.82 8 8 13.82 8 21s5.82 13 13 13 13-5.82 13-13S28.18 8 21 8z" fill="${reverse ? "#fff" : color}"/><path d="M4.599 21c0 9.044 7.332 16.376 16.376 16.376 9.045 0 16.376-7.332 16.376-16.376" stroke="url(#a)" stroke-width="3.5" stroke-linecap="round"/></g></svg>`;
      };
      const props = __props;
      const emit = __emit;
      const hoverStartTime = vue.ref(20);
      const hoverStayTime = vue.ref(70);
      const loadingIconSvg = vue.ref("");
      const loadingStyle = vue.computed(() => {
        return `background-image: url(${loadingIconSvg.value});`;
      });
      vue.watch(
        () => props.loading,
        () => {
          buildLoadingSvg();
        },
        { deep: true, immediate: true }
      );
      function handleClick(event) {
        if (!props.disabled && !props.loading) {
          emit("click", event);
        }
      }
      function handleGetAuthorize(event) {
        if (props.scope === "phoneNumber") {
          handleGetphonenumber(event);
        } else if (props.scope === "userInfo") {
          handleGetuserinfo(event);
        }
      }
      function handleGetuserinfo(event) {
        emit("getuserinfo", event.detail);
      }
      function handleConcat(event) {
        emit("contact", event.detail);
      }
      function handleGetphonenumber(event) {
        emit("getphonenumber", event.detail);
      }
      function handleError(event) {
        emit("error", event.detail);
      }
      function handleLaunchapp(event) {
        emit("launchapp", event.detail);
      }
      function handleOpensetting(event) {
        emit("opensetting", event.detail);
      }
      function handleChooseavatar(event) {
        emit("chooseavatar", event.detail);
      }
      function handleAgreePrivacyAuthorization(event) {
        emit("agreeprivacyauthorization", event.detail);
      }
      function buildLoadingSvg() {
        const { loadingColor, type, plain } = props;
        let color = loadingColor;
        if (!color) {
          switch (type) {
            case "primary":
              color = "#4D80F0";
              break;
            case "success":
              color = "#34d19d";
              break;
            case "info":
              color = "#333";
              break;
            case "warning":
              color = "#f0883a";
              break;
            case "error":
              color = "#fa4350";
              break;
            case "default":
              color = "#333";
              break;
          }
        }
        const svg = loadingIcon(color, !plain);
        loadingIconSvg.value = `"data:image/svg+xml;base64,${encode(svg)}"`;
      }
      const __returned__ = { loadingIcon, props, emit, hoverStartTime, hoverStayTime, loadingIconSvg, loadingStyle, handleClick, handleGetAuthorize, handleGetuserinfo, handleConcat, handleGetphonenumber, handleError, handleLaunchapp, handleOpensetting, handleChooseavatar, handleAgreePrivacyAuthorization, buildLoadingSvg, wdIcon: __easycom_0$5 };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$_(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("button", {
      id: _ctx.buttonId,
      "hover-class": `${_ctx.disabled || _ctx.loading ? "" : "wd-button--active"}`,
      style: vue.normalizeStyle(_ctx.customStyle),
      class: vue.normalizeClass([
        "wd-button",
        "is-" + _ctx.type,
        "is-" + _ctx.size,
        _ctx.round ? "is-round" : "",
        _ctx.hairline ? "is-hairline" : "",
        _ctx.plain ? "is-plain" : "",
        _ctx.disabled ? "is-disabled" : "",
        _ctx.block ? "is-block" : "",
        _ctx.loading ? "is-loading" : "",
        _ctx.customClass
      ]),
      "hover-start-time": $setup.hoverStartTime,
      "hover-stay-time": $setup.hoverStayTime,
      "open-type": _ctx.disabled || _ctx.loading ? void 0 : _ctx.openType,
      "send-message-title": _ctx.sendMessageTitle,
      "send-message-path": _ctx.sendMessagePath,
      "send-message-img": _ctx.sendMessageImg,
      "app-parameter": _ctx.appParameter,
      "show-message-card": _ctx.showMessageCard,
      "session-from": _ctx.sessionFrom,
      lang: _ctx.lang,
      "hover-stop-propagation": _ctx.hoverStopPropagation,
      scope: _ctx.scope,
      onClick: $setup.handleClick,
      "on:getAuthorize": $setup.handleGetAuthorize,
      onGetuserinfo: $setup.handleGetuserinfo,
      onContact: $setup.handleConcat,
      onGetphonenumber: $setup.handleGetphonenumber,
      onError: $setup.handleError,
      onLaunchapp: $setup.handleLaunchapp,
      onOpensetting: $setup.handleOpensetting,
      onChooseavatar: $setup.handleChooseavatar,
      onAgreeprivacyauthorization: $setup.handleAgreePrivacyAuthorization
    }, [
      vue.createElementVNode("view", { class: "wd-button__content" }, [
        _ctx.loading ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "wd-button__loading"
        }, [
          vue.createElementVNode(
            "view",
            {
              class: "wd-button__loading-svg",
              style: vue.normalizeStyle($setup.loadingStyle)
            },
            null,
            4
            /* STYLE */
          )
        ])) : _ctx.icon ? (vue.openBlock(), vue.createBlock($setup["wdIcon"], {
          key: 1,
          "custom-class": "wd-button__icon",
          name: _ctx.icon,
          classPrefix: _ctx.classPrefix
        }, null, 8, ["name", "classPrefix"])) : vue.createCommentVNode("v-if", true),
        vue.createElementVNode("view", { class: "wd-button__text" }, [
          vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
        ])
      ])
    ], 46, ["id", "hover-class", "hover-start-time", "hover-stay-time", "open-type", "send-message-title", "send-message-path", "send-message-img", "app-parameter", "show-message-card", "session-from", "lang", "hover-stop-propagation", "scope"]);
  }
  const __easycom_3 = /* @__PURE__ */ _export_sfc(_sfc_main$$, [["render", _sfc_render$_], ["__scopeId", "data-v-d858c170"], ["__file", "G:/Code/campus/miniProject/uni_modules/wot-design-uni/components/wd-button/wd-button.vue"]]);
  const fabProps = {
    ...baseProps,
    /**
     * 是否激活
     */
    active: makeBooleanProp(false),
    /**
     * 类型，可选值为 default primary info success warning error
     */
    type: makeStringProp("primary"),
    /**
     * 悬浮按钮位置，可选值为 left-top right-top left-bottom right-bottom
     */
    position: makeStringProp("right-bottom"),
    /**
     * 悬浮按钮菜单弹出方向，可选值为 top bottom left right
     */
    direction: makeStringProp("top"),
    /**
     * 是否禁用
     */
    disabled: makeBooleanProp(false),
    /**
     * 悬浮按钮未展开时的图标
     */
    inactiveIcon: makeStringProp("add"),
    /**
     * 悬浮按钮展开时的图标
     */
    activeIcon: makeStringProp("close"),
    /**
     * 自定义悬浮按钮层级
     */
    zIndex: makeNumberProp(99),
    /**
     * 是否可拖动
     */
    draggable: makeBooleanProp(false),
    gap: {
      type: Object,
      default: () => ({})
    },
    /**
     * 用于控制点击时是否展开菜单
     */
    expandable: makeBooleanProp(true)
  };
  function useRaf(callback) {
    const requestRef = vue.ref(null);
    const start = () => {
      const handle = (time) => {
        callback(time);
      };
      if (isH5) {
        requestRef.value = requestAnimationFrame(handle);
      } else {
        requestRef.value = setTimeout(() => handle(Date.now()), 1e3 / 30);
      }
    };
    const cancel = () => {
      if (isH5 && isNumber(requestRef.value)) {
        cancelAnimationFrame(requestRef.value);
      } else if (isDef(requestRef.value)) {
        clearTimeout(requestRef.value);
      }
    };
    vue.onUnmounted(() => {
      cancel();
    });
    return { start, cancel };
  }
  const __default__$v = {
    name: "wd-fab",
    options: {
      virtualHost: true,
      addGlobalClass: true,
      styleIsolation: "shared"
    }
  };
  const _sfc_main$_ = /* @__PURE__ */ vue.defineComponent({
    ...__default__$v,
    props: fabProps,
    emits: ["update:active", "click"],
    setup(__props, { expose: __expose, emit: __emit }) {
      const props = __props;
      const emit = __emit;
      const inited = vue.ref(false);
      const isActive = vue.ref(false);
      const queue2 = vue.inject(queueKey, null);
      const { proxy } = vue.getCurrentInstance();
      vue.watch(
        () => props.active,
        (newValue) => {
          isActive.value = newValue;
        },
        { immediate: true, deep: true }
      );
      vue.watch(
        () => isActive.value,
        (newValue) => {
          if (newValue) {
            if (queue2 && queue2.closeOther) {
              queue2.closeOther(proxy);
            } else {
              closeOther(proxy);
            }
          }
        }
      );
      const fabDirection = vue.ref(props.direction);
      vue.watch(
        () => props.direction,
        (direction) => fabDirection.value = direction
      );
      vue.watch(
        () => props.position,
        () => initPosition()
      );
      const top = vue.ref(0);
      const left = vue.ref(0);
      const screen = vue.reactive({ width: 0, height: 0 });
      const fabSize = vue.reactive({ width: 56, height: 56 });
      const bounding = vue.reactive({
        minTop: 0,
        minLeft: 0,
        maxTop: 0,
        maxLeft: 0
      });
      async function getBounding() {
        const sysInfo = uni.getSystemInfoSync();
        try {
          const trigerInfo = await getRect("#trigger", false, proxy);
          fabSize.width = trigerInfo.width || 56;
          fabSize.height = trigerInfo.height || 56;
        } catch (error) {
          formatAppLog("log", "at uni_modules/wot-design-uni/components/wd-fab/wd-fab.vue:112", error);
        }
        const { top: top2 = 16, left: left2 = 16, right = 16, bottom = 16 } = props.gap;
        screen.width = sysInfo.windowWidth;
        screen.height = isH5 ? sysInfo.windowTop + sysInfo.windowHeight : sysInfo.windowHeight;
        bounding.minTop = isH5 ? sysInfo.windowTop + top2 : top2;
        bounding.minLeft = left2;
        bounding.maxLeft = screen.width - fabSize.width - right;
        bounding.maxTop = screen.height - fabSize.height - bottom;
      }
      function initPosition() {
        const pos = props.position;
        const { minLeft, minTop, maxLeft, maxTop } = bounding;
        if (pos === "left-top") {
          top.value = minTop;
          left.value = minLeft;
        } else if (pos === "right-top") {
          top.value = minTop;
          left.value = maxLeft;
        } else if (pos === "left-bottom") {
          top.value = maxTop;
          left.value = minLeft;
        } else if (pos === "right-bottom") {
          top.value = maxTop;
          left.value = maxLeft;
        }
      }
      const touchOffset = vue.reactive({ x: 0, y: 0 });
      const attractTransition = vue.ref(false);
      function handleTouchStart(e) {
        if (props.draggable === false)
          return;
        const touch = e.touches[0];
        touchOffset.x = touch.clientX - left.value;
        touchOffset.y = touch.clientY - top.value;
        attractTransition.value = false;
      }
      function handleTouchMove(e) {
        if (props.draggable === false)
          return;
        const touch = e.touches[0];
        const { minLeft, minTop, maxLeft, maxTop } = bounding;
        let x = touch.clientX - touchOffset.x;
        let y = touch.clientY - touchOffset.y;
        if (x < minLeft)
          x = minLeft;
        else if (x > maxLeft)
          x = maxLeft;
        if (y < minTop)
          y = minTop;
        else if (y > maxTop)
          y = maxTop;
        top.value = y;
        left.value = x;
      }
      function handleTouchEnd() {
        if (props.draggable === false)
          return;
        const screenCenterX = screen.width / 2;
        const fabCenterX = left.value + fabSize.width / 2;
        attractTransition.value = true;
        if (fabCenterX < screenCenterX) {
          left.value = bounding.minLeft;
          fabDirection.value = "right";
        } else {
          left.value = bounding.maxLeft;
          fabDirection.value = "left";
        }
      }
      const rootStyle = vue.computed(() => {
        const style = {
          top: top.value + "px",
          left: left.value + "px",
          transition: attractTransition.value ? "all ease 0.3s" : "none"
        };
        if (isDef(props.zIndex)) {
          style["z-index"] = props.zIndex;
        }
        return `${objToStyle(style)};${props.customStyle}`;
      });
      vue.onMounted(() => {
        if (queue2 && queue2.pushToQueue) {
          queue2.pushToQueue(proxy);
        } else {
          pushToQueue(proxy);
        }
        const { start } = useRaf(async () => {
          await getBounding();
          initPosition();
          inited.value = true;
        });
        start();
      });
      vue.onBeforeUnmount(() => {
        if (queue2 && queue2.removeFromQueue) {
          queue2.removeFromQueue(proxy);
        } else {
          removeFromQueue(proxy);
        }
      });
      function handleClick() {
        if (props.disabled) {
          return;
        }
        if (!props.expandable) {
          emit("click");
          return;
        }
        isActive.value = !isActive.value;
        emit("update:active", isActive.value);
      }
      function open() {
        isActive.value = true;
        emit("update:active", true);
      }
      function close() {
        isActive.value = false;
        emit("update:active", false);
      }
      __expose({
        open,
        close
      });
      const __returned__ = { props, emit, inited, isActive, queue: queue2, proxy, fabDirection, top, left, screen, fabSize, bounding, getBounding, initPosition, touchOffset, attractTransition, handleTouchStart, handleTouchMove, handleTouchEnd, rootStyle, handleClick, open, close, wdButton: __easycom_3, wdIcon: __easycom_0$5, wdTransition };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$Z(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        onTouchmove: vue.withModifiers($setup.handleTouchMove, ["stop", "prevent"]),
        onTouchstart: $setup.handleTouchStart,
        onTouchend: $setup.handleTouchEnd,
        class: vue.normalizeClass(`wd-fab ${_ctx.customClass}`),
        style: vue.normalizeStyle($setup.rootStyle),
        onClick: _cache[1] || (_cache[1] = vue.withModifiers(() => {
        }, ["stop"]))
      },
      [
        vue.createElementVNode(
          "view",
          {
            onClick: _cache[0] || (_cache[0] = vue.withModifiers(() => {
            }, ["stop"])),
            style: vue.normalizeStyle({ visibility: $setup.inited ? "visible" : "hidden" }),
            id: "trigger"
          },
          [
            _ctx.$slots.trigger ? vue.renderSlot(_ctx.$slots, "trigger", { key: 0 }, void 0, true) : (vue.openBlock(), vue.createBlock($setup["wdButton"], {
              key: 1,
              onClick: $setup.handleClick,
              "custom-class": "wd-fab__trigger",
              round: "",
              type: _ctx.type,
              disabled: _ctx.disabled
            }, {
              default: vue.withCtx(() => [
                vue.createVNode($setup["wdIcon"], {
                  "custom-class": "wd-fab__icon",
                  name: $setup.isActive ? _ctx.activeIcon : _ctx.inactiveIcon
                }, null, 8, ["name"])
              ]),
              _: 1
              /* STABLE */
            }, 8, ["type", "disabled"]))
          ],
          4
          /* STYLE */
        ),
        _ctx.expandable ? (vue.openBlock(), vue.createBlock($setup["wdTransition"], {
          key: 0,
          "enter-class": `wd-fab__transition-enter--${$setup.fabDirection}`,
          "enter-active-class": "wd-fab__transition-enter-active",
          "leave-to-class": `wd-fab__transition-leave-to--${$setup.fabDirection}`,
          "leave-active-class": "wd-fab__transition-leave-active",
          "custom-class": `wd-fab__actions wd-fab__actions--${$setup.fabDirection}`,
          show: $setup.isActive,
          duration: 300
        }, {
          default: vue.withCtx(() => [
            vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
          ]),
          _: 3
          /* FORWARDED */
        }, 8, ["enter-class", "leave-to-class", "custom-class", "show"])) : vue.createCommentVNode("v-if", true)
      ],
      38
      /* CLASS, STYLE, NEED_HYDRATION */
    );
  }
  const __easycom_10 = /* @__PURE__ */ _export_sfc(_sfc_main$_, [["render", _sfc_render$Z], ["__scopeId", "data-v-c5c35da7"], ["__file", "G:/Code/campus/miniProject/uni_modules/wot-design-uni/components/wd-fab/wd-fab.vue"]]);
  const overlayProps = {
    ...baseProps,
    /**
     * 是否展示遮罩层
     */
    show: makeBooleanProp(false),
    /**
     * 动画时长，单位毫秒
     */
    duration: {
      type: [Object, Number, Boolean],
      default: 300
    },
    /**
     * 是否锁定滚动
     */
    lockScroll: makeBooleanProp(true),
    /**
     * 层级
     */
    zIndex: makeNumberProp(10)
  };
  const __default__$u = {
    name: "wd-overlay",
    options: {
      virtualHost: true,
      addGlobalClass: true,
      styleIsolation: "shared"
    }
  };
  const _sfc_main$Z = /* @__PURE__ */ vue.defineComponent({
    ...__default__$u,
    props: overlayProps,
    emits: ["click"],
    setup(__props, { expose: __expose, emit: __emit }) {
      __expose();
      const props = __props;
      const emit = __emit;
      function handleClick() {
        emit("click");
      }
      function noop() {
      }
      const __returned__ = { props, emit, handleClick, noop, wdTransition };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$Y(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createBlock($setup["wdTransition"], {
      show: _ctx.show,
      name: "fade",
      "custom-class": "wd-overlay",
      duration: _ctx.duration,
      "custom-style": `z-index: ${_ctx.zIndex}; ${_ctx.customStyle}`,
      onClick: $setup.handleClick,
      onTouchmove: _cache[0] || (_cache[0] = vue.withModifiers(($event) => _ctx.lockScroll ? $setup.noop : "", ["stop", "prevent"]))
    }, {
      default: vue.withCtx(() => [
        vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
      ]),
      _: 3
      /* FORWARDED */
    }, 8, ["show", "duration", "custom-style"]);
  }
  const __easycom_6$2 = /* @__PURE__ */ _export_sfc(_sfc_main$Z, [["render", _sfc_render$Y], ["__scopeId", "data-v-6e0d1141"], ["__file", "G:/Code/campus/miniProject/uni_modules/wot-design-uni/components/wd-overlay/wd-overlay.vue"]]);
  const toastDefaultOptionKey = "__TOAST_OPTION__";
  const defaultOptions$1 = {
    duration: 2e3,
    show: false
  };
  const None$1 = Symbol("None");
  function useToast(selector = "") {
    const toastOptionKey = getToastOptionKey(selector);
    const toastOption = vue.inject(toastOptionKey, vue.ref(None$1));
    if (toastOption.value === None$1) {
      toastOption.value = defaultOptions$1;
      vue.provide(toastOptionKey, toastOption);
    }
    let timer = null;
    const createMethod = (toastOptions) => {
      return (options) => {
        return show(deepMerge(toastOptions, typeof options === "string" ? { msg: options } : options));
      };
    };
    const show = (option) => {
      const options = deepMerge(defaultOptions$1, typeof option === "string" ? { msg: option } : option);
      toastOption.value = deepMerge(options, {
        show: true
      });
      timer && clearTimeout(timer);
      if (toastOption.value.duration && toastOption.value.duration > 0) {
        timer = setTimeout(() => {
          timer && clearTimeout(timer);
          close();
        }, options.duration);
      }
    };
    const loading = createMethod({
      iconName: "loading",
      duration: 0,
      cover: true
    });
    const success = createMethod({
      iconName: "success",
      duration: 1500
    });
    const error = createMethod({ iconName: "error" });
    const warning = createMethod({ iconName: "warning" });
    const info = createMethod({ iconName: "info" });
    const close = () => {
      toastOption.value = { show: false };
    };
    return {
      show,
      loading,
      success,
      error,
      warning,
      info,
      close
    };
  }
  const getToastOptionKey = (selector) => {
    return selector ? `${toastDefaultOptionKey}${selector}` : toastDefaultOptionKey;
  };
  const toastIcon = {
    success() {
      return '<svg width="42px" height="42px" viewBox="0 0 42 42" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><title>成功</title><desc>Created with Sketch.</desc><defs><filter x="-63.2%" y="-80.0%" width="226.3%" height="260.0%" filterUnits="objectBoundingBox" id="filter-1"><feOffset dx="0" dy="2" in="SourceAlpha" result="shadowOffsetOuter1"></feOffset><feGaussianBlur stdDeviation="2" in="shadowOffsetOuter1" result="shadowBlurOuter1"></feGaussianBlur><feColorMatrix values="0 0 0 0 0.122733141   0 0 0 0 0.710852582   0 0 0 0 0.514812768  0 0 0 1 0" type="matrix" in="shadowBlurOuter1" result="shadowMatrixOuter1"></feColorMatrix><feMerge><feMergeNode in="shadowMatrixOuter1"></feMergeNode><feMergeNode in="SourceGraphic"></feMergeNode></feMerge></filter><rect id="path-2" x="3.4176226" y="5.81442199" width="3" height="8.5" rx="1.5"></rect><linearGradient x1="50%" y1="0.126649064%" x2="50%" y2="100%" id="linearGradient-4"><stop stop-color="#ACFFBD" stop-opacity="0.208123907" offset="0%"></stop><stop stop-color="#10B87C" offset="100%"></stop></linearGradient></defs><g id="规范" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g id="反馈-轻提示" transform="translate(-388.000000, -538.000000)"><g id="成功" transform="translate(388.000000, 538.000000)"><circle id="Oval" fill="#34D19D" opacity="0.400000006" cx="21" cy="21" r="20"></circle><circle id="Oval" fill="#34D19D" cx="21" cy="21" r="16"></circle><g id="Group-6" filter="url(#filter-1)" transform="translate(11.500000, 14.000000)"><mask id="mask-3" fill="white"><use xlink:href="#path-2"></use></mask><use id="Rectangle-Copy-24" fill="#C4FFEB" transform="translate(4.917623, 10.064422) rotate(-45.000000) translate(-4.917623, -10.064422) " xlink:href="#path-2"></use><rect id="Rectangle" fill="url(#linearGradient-4)" mask="url(#mask-3)" transform="translate(6.215869, 11.372277) rotate(-45.000000) translate(-6.215869, -11.372277) " x="4.71586891" y="9.52269089" width="3" height="3.69917136"></rect><rect id="Rectangle" fill="#FFFFFF" transform="translate(11.636236, 7.232744) scale(1, -1) rotate(-45.000000) translate(-11.636236, -7.232744) " x="10.1362361" y="-1.02185365" width="3" height="16.5091951" rx="1.5"></rect></g></g></g></g></svg>';
    },
    warning() {
      return '<svg width="42px" height="42px" viewBox="0 0 42 42" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><title>警告</title><desc>Created with Sketch.</desc> <defs> <filter x="-240.0%" y="-60.0%" width="580.0%" height="220.0%" filterUnits="objectBoundingBox" id="filter-1"><feOffset dx="0" dy="2" in="SourceAlpha" result="shadowOffsetOuter1"></feOffset><feGaussianBlur stdDeviation="2" in="shadowOffsetOuter1" result="shadowBlurOuter1"></feGaussianBlur><feColorMatrix values="0 0 0 0 0.824756567   0 0 0 0 0.450356612   0 0 0 0 0.168550194  0 0 0 1 0" type="matrix" in="shadowBlurOuter1" result="shadowMatrixOuter1"></feColorMatrix><feMerge><feMergeNode in="shadowMatrixOuter1"></feMergeNode> <feMergeNode in="SourceGraphic"></feMergeNode></feMerge></filter></defs><g id="规范" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g id="反馈-轻提示" transform="translate(-580.000000, -538.000000)"> <g id="警告" transform="translate(580.000000, 538.000000)"><circle id="Oval" fill="#F0883A" opacity="0.400000006" cx="21" cy="21" r="20"></circle><circle id="Oval" fill="#F0883A" cx="21" cy="21" r="16"></circle><g id="Group-6" filter="url(#filter-1)" transform="translate(18.500000, 10.800000)"><rect id="Rectangle" fill="#FFFFFF" transform="translate(2.492935, 7.171583) scale(1, -1) rotate(-360.000000) translate(-2.492935, -7.171583) " x="0.992934699" y="0.955464537" width="3" height="12.4322365" rx="1.5"></rect><rect id="Rectangle-Copy-25" fill="#FFDEC5" transform="translate(2.508751, 17.202636) scale(1, -1) rotate(-360.000000) translate(-2.508751, -17.202636) " x="1.00875134" y="15.200563" width="3" height="4.00414639" rx="1.5"></rect></g></g></g></g></svg>';
    },
    info() {
      return '<svg width="42px" height="42px" viewBox="0 0 42 42" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><title>常规</title><desc>Created with Sketch.</desc><defs><filter x="-300.0%" y="-57.1%" width="700.0%" height="214.3%" filterUnits="objectBoundingBox" id="filter-1"><feOffset dx="0" dy="2" in="SourceAlpha" result="shadowOffsetOuter1"></feOffset><feGaussianBlur stdDeviation="2" in="shadowOffsetOuter1" result="shadowBlurOuter1"></feGaussianBlur><feColorMatrix values="0 0 0 0 0.362700096   0 0 0 0 0.409035039   0 0 0 0 0.520238904  0 0 0 1 0" type="matrix" in="shadowBlurOuter1" result="shadowMatrixOuter1"></feColorMatrix><feMerge><feMergeNode in="shadowMatrixOuter1"></feMergeNode><feMergeNode in="SourceGraphic"></feMergeNode></feMerge></filter></defs><g id="规范" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g id="反馈-轻提示" transform="translate(-772.000000, -538.000000)"><g id="常规" transform="translate(772.000000, 538.000000)"><circle id="Oval" fill="#909CB7" opacity="0.4" cx="21" cy="21" r="20"></circle><circle id="Oval" fill="#909CB7" cx="21" cy="21" r="16"></circle><g id="Group-6" filter="url(#filter-1)" transform="translate(18.500000, 9.800000)"><g id="编组-2" transform="translate(2.492935, 10.204709) rotate(-180.000000) translate(-2.492935, -10.204709) translate(0.992935, 0.204709)"><rect id="Rectangle" fill="#FFFFFF" transform="translate(1.500000, 7.000000) scale(1, -1) rotate(-360.000000) translate(-1.500000, -7.000000) " x="0" y="0" width="3" height="14" rx="1.5"></rect><rect id="Rectangle-Copy-25" fill="#EEEEEE" transform="translate(1.500000, 18.000000) scale(1, -1) rotate(-360.000000) translate(-1.500000, -18.000000) " x="0" y="16" width="3" height="4" rx="1.5"></rect></g></g></g></g></g></svg>';
    },
    error() {
      return '<svg width="42px" height="42px" viewBox="0 0 42 42" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><title>toast</title><desc>Created with Sketch.</desc><defs><linearGradient x1="99.6229896%" y1="50.3770104%" x2="0.377010363%" y2="50.3770104%" id="linearGradient-1"><stop stop-color="#FFDFDF" offset="0%"></stop><stop stop-color="#F9BEBE" offset="100%"></stop></linearGradient><linearGradient x1="0.377010363%" y1="50.3770104%" x2="99.6229896%" y2="50.3770104%" id="linearGradient-2"><stop stop-color="#FFDFDF" offset="0%"></stop><stop stop-color="#F9BEBE" offset="100%"></stop></linearGradient></defs><g id="规范" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g id="反馈-轻提示" transform="translate(-196.000000, -538.000000)"> <g id="toast" transform="translate(196.000000, 538.000000)"><circle id="Oval" fill="#FA4350" opacity="0.400000006" cx="21" cy="21" r="20"></circle><circle id="Oval" fill="#FA4350" opacity="0.900000036" cx="21" cy="21" r="16"></circle><rect id="矩形" fill="#FFDFDF" transform="translate(21.071068, 21.071068) rotate(-225.000000) translate(-21.071068, -21.071068) " x="12.5710678" y="19.5710678" width="17" height="3" rx="1.5"></rect><rect id="矩形" fill="url(#linearGradient-1)" transform="translate(19.303301, 22.838835) rotate(-225.000000) translate(-19.303301, -22.838835) " x="17.3033009" y="21.3388348" width="4" height="3"></rect><rect id="矩形" fill="url(#linearGradient-2)" transform="translate(22.838835, 19.303301) rotate(-225.000000) translate(-22.838835, -19.303301) " x="20.8388348" y="17.8033009" width="4" height="3"></rect><rect id="矩形" fill="#FFFFFF" transform="translate(21.071068, 21.071068) rotate(-315.000000) translate(-21.071068, -21.071068) " x="12.5710678" y="19.5710678" width="17" height="3" rx="1.5"></rect></g></g></g></svg>';
    }
  };
  const toastProps = {
    ...baseProps,
    /**
     * 选择器
     * @type {string}
     * @default ''
     */
    selector: makeStringProp(""),
    /**
     * 提示信息
     * @type {string}
     * @default ''
     */
    msg: {
      type: String,
      default: ""
    },
    /**
     * 排列方向
     * @type {'vertical' | 'horizontal'}
     * @default 'horizontal'
     */
    direction: makeStringProp("horizontal"),
    /**
     * 图标名称
     * @type {'success' | 'error' | 'warning' | 'loading' | 'info'}
     * @default ''
     */
    iconName: {
      type: String,
      default: ""
    },
    /**
     * 图标大小
     * @type {number}
     */
    iconSize: Number,
    /**
     * 加载类型
     * @type {'outline' | 'ring'}
     * @default 'outline'
     */
    loadingType: makeStringProp("outline"),
    /**
     * 加载颜色
     * @type {string}
     * @default '#4D80F0'
     */
    loadingColor: {
      type: String,
      default: "#4D80F0"
    },
    /**
     * 加载大小
     * @type {number}
     */
    loadingSize: Number,
    /**
     * 图标颜色
     * @type {string}
     */
    iconColor: String,
    /**
     * 位置
     * @type {'top' | 'middle-top' | 'middle' | 'bottom'}
     * @default 'middle-top'
     */
    position: makeStringProp("middle-top"),
    /**
     * 层级
     * @type {number}
     * @default 100
     */
    zIndex: {
      type: Number,
      default: 100
    },
    /**
     * 是否存在遮罩层
     * @type {boolean}
     * @default false
     */
    cover: {
      type: Boolean,
      default: false
    },
    /**
     * 图标类名
     * @type {string}
     * @default ''
     */
    iconClass: {
      type: String,
      default: ""
    },
    /**
     * 类名前缀
     * @type {string}
     * @default 'wd-icon'
     */
    classPrefix: {
      type: String,
      default: "wd-icon"
    },
    /**
     * 完全展示后的回调函数
     * @type {Function}
     */
    opened: Function,
    /**
     * 完全关闭时的回调函数
     * @type {Function}
     */
    closed: Function
  };
  const __default__$t = {
    name: "wd-toast",
    options: {
      addGlobalClass: true,
      virtualHost: true,
      styleIsolation: "shared"
    }
  };
  const _sfc_main$Y = /* @__PURE__ */ vue.defineComponent({
    ...__default__$t,
    props: toastProps,
    setup(__props, { expose: __expose }) {
      __expose();
      const props = __props;
      const iconName = vue.ref("");
      const msg = vue.ref("");
      const position = vue.ref("middle");
      const show = vue.ref(false);
      const zIndex = vue.ref(100);
      const loadingType = vue.ref("outline");
      const loadingColor = vue.ref("#4D80F0");
      const iconSize = vue.ref();
      const loadingSize = vue.ref();
      const svgStr = vue.ref("");
      const cover = vue.ref(false);
      const classPrefix = vue.ref("wd-icon");
      const iconClass = vue.ref("");
      const direction = vue.ref("horizontal");
      let opened = null;
      let closed = null;
      const toastOptionKey = getToastOptionKey(props.selector);
      const toastOption = vue.inject(toastOptionKey, vue.ref(defaultOptions$1));
      vue.watch(
        () => toastOption.value,
        (newVal) => {
          reset(newVal);
        },
        {
          deep: true,
          immediate: true
        }
      );
      vue.watch(
        () => iconName.value,
        () => {
          buildSvg();
        },
        {
          deep: true,
          immediate: true
        }
      );
      const transitionStyle = vue.computed(() => {
        const style = {
          "z-index": zIndex.value,
          position: "fixed",
          top: "50%",
          left: 0,
          width: "100%",
          transform: "translate(0, -50%)",
          "text-align": "center",
          "pointer-events": "none"
        };
        return objToStyle(style);
      });
      const rootClass = vue.computed(() => {
        return `wd-toast ${props.customClass} wd-toast--${position.value} ${(iconName.value !== "loading" || msg.value) && (iconName.value || iconClass.value) ? "wd-toast--with-icon" : ""} ${iconName.value === "loading" && !msg.value ? "wd-toast--loading" : ""} ${direction.value === "vertical" ? "is-vertical" : ""}`;
      });
      const svgStyle = vue.computed(() => {
        const style = {
          backgroundImage: `url(${svgStr.value})`
        };
        if (isDef(iconSize.value)) {
          style.width = iconSize.value;
          style.height = iconSize.value;
        }
        return objToStyle(style);
      });
      vue.onBeforeMount(() => {
        buildSvg();
      });
      function handleAfterEnter() {
        if (isFunction(opened)) {
          opened();
        }
      }
      function handleAfterLeave() {
        if (isFunction(closed)) {
          closed();
        }
      }
      function buildSvg() {
        if (iconName.value !== "success" && iconName.value !== "warning" && iconName.value !== "info" && iconName.value !== "error")
          return;
        const iconSvg = toastIcon[iconName.value]();
        const iconSvgStr = `"data:image/svg+xml;base64,${encode(iconSvg)}"`;
        svgStr.value = iconSvgStr;
      }
      function reset(option) {
        show.value = isDef(option.show) ? option.show : false;
        if (show.value) {
          mergeOptionsWithProps(option, props);
        }
      }
      function mergeOptionsWithProps(option, props2) {
        iconName.value = isDef(option.iconName) ? option.iconName : props2.iconName;
        iconClass.value = isDef(option.iconClass) ? option.iconClass : props2.iconClass;
        msg.value = isDef(option.msg) ? option.msg : props2.msg;
        position.value = isDef(option.position) ? option.position : props2.position;
        zIndex.value = isDef(option.zIndex) ? option.zIndex : props2.zIndex;
        loadingType.value = isDef(option.loadingType) ? option.loadingType : props2.loadingType;
        loadingColor.value = isDef(option.loadingColor) ? option.loadingColor : props2.loadingColor;
        iconSize.value = isDef(option.iconSize) ? addUnit(option.iconSize) : isDef(props2.iconSize) ? addUnit(props2.iconSize) : void 0;
        loadingSize.value = isDef(option.loadingSize) ? addUnit(option.loadingSize) : isDef(props2.loadingSize) ? addUnit(props2.loadingSize) : void 0;
        cover.value = isDef(option.cover) ? option.cover : props2.cover;
        classPrefix.value = isDef(option.classPrefix) ? option.classPrefix : props2.classPrefix;
        direction.value = isDef(option.direction) ? option.direction : props2.direction;
        closed = isFunction(option.closed) ? option.closed : isFunction(props2.closed) ? props2.closed : null;
        opened = isFunction(option.opened) ? option.opened : isFunction(props2.opened) ? props2.opened : null;
      }
      const __returned__ = { props, iconName, msg, position, show, zIndex, loadingType, loadingColor, iconSize, loadingSize, svgStr, cover, classPrefix, iconClass, direction, get opened() {
        return opened;
      }, set opened(v) {
        opened = v;
      }, get closed() {
        return closed;
      }, set closed(v) {
        closed = v;
      }, toastOptionKey, toastOption, transitionStyle, rootClass, svgStyle, handleAfterEnter, handleAfterLeave, buildSvg, reset, mergeOptionsWithProps, wdIcon: __easycom_0$5, wdLoading: __easycom_0$3, wdOverlay: __easycom_6$2, wdTransition };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$X(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      vue.Fragment,
      null,
      [
        $setup.cover ? (vue.openBlock(), vue.createBlock($setup["wdOverlay"], {
          key: 0,
          "z-index": $setup.zIndex,
          "lock-scroll": "",
          show: $setup.show,
          "custom-style": "background-color: transparent;pointer-events: auto;"
        }, null, 8, ["z-index", "show"])) : vue.createCommentVNode("v-if", true),
        vue.createVNode($setup["wdTransition"], {
          name: "fade",
          show: $setup.show,
          "custom-style": $setup.transitionStyle,
          onAfterEnter: $setup.handleAfterEnter,
          onAfterLeave: $setup.handleAfterLeave
        }, {
          default: vue.withCtx(() => [
            vue.createElementVNode(
              "view",
              {
                class: vue.normalizeClass($setup.rootClass)
              },
              [
                vue.createCommentVNode("iconName优先级更高"),
                $setup.iconName === "loading" ? (vue.openBlock(), vue.createBlock($setup["wdLoading"], {
                  key: 0,
                  type: $setup.loadingType,
                  color: $setup.loadingColor,
                  size: $setup.loadingSize,
                  "custom-class": `wd-toast__icon ${$setup.direction === "vertical" ? "is-vertical" : ""}`
                }, null, 8, ["type", "color", "size", "custom-class"])) : $setup.iconName === "success" || $setup.iconName === "warning" || $setup.iconName === "info" || $setup.iconName === "error" ? (vue.openBlock(), vue.createElementBlock(
                  "view",
                  {
                    key: 1,
                    class: vue.normalizeClass(`wd-toast__iconWrap wd-toast__icon ${$setup.direction === "vertical" ? "is-vertical" : ""}`)
                  },
                  [
                    vue.createElementVNode("view", { class: "wd-toast__iconBox" }, [
                      vue.createElementVNode(
                        "view",
                        {
                          class: "wd-toast__iconSvg",
                          style: vue.normalizeStyle($setup.svgStyle)
                        },
                        null,
                        4
                        /* STYLE */
                      )
                    ])
                  ],
                  2
                  /* CLASS */
                )) : $setup.iconClass ? (vue.openBlock(), vue.createBlock($setup["wdIcon"], {
                  key: 2,
                  "custom-class": `wd-toast__icon ${$setup.direction === "vertical" ? "is-vertical" : ""}`,
                  size: $setup.iconSize,
                  "class-prefix": $setup.classPrefix,
                  name: $setup.iconClass
                }, null, 8, ["custom-class", "size", "class-prefix", "name"])) : vue.createCommentVNode("v-if", true),
                vue.createCommentVNode("文本"),
                $setup.msg ? (vue.openBlock(), vue.createElementBlock(
                  "view",
                  {
                    key: 3,
                    class: "wd-toast__msg"
                  },
                  vue.toDisplayString($setup.msg),
                  1
                  /* TEXT */
                )) : vue.createCommentVNode("v-if", true)
              ],
              2
              /* CLASS */
            )
          ]),
          _: 1
          /* STABLE */
        }, 8, ["show", "custom-style"])
      ],
      64
      /* STABLE_FRAGMENT */
    );
  }
  const __easycom_2$2 = /* @__PURE__ */ _export_sfc(_sfc_main$Y, [["render", _sfc_render$X], ["__scopeId", "data-v-fce8c80a"], ["__file", "G:/Code/campus/miniProject/uni_modules/wot-design-uni/components/wd-toast/wd-toast.vue"]]);
  const popupProps = {
    ...baseProps,
    /**
     * 动画类型，参见 wd-transition 组件的name
     * 类型：string
     * 可选值：fade / fade-up / fade-down / fade-left / fade-right / slide-up / slide-down / slide-left / slide-right / zoom-in
     */
    transition: String,
    /**
     * 关闭按钮
     * 类型：boolean
     * 默认值：false
     */
    closable: makeBooleanProp(false),
    /**
     * 弹出框的位置
     * 类型：string
     * 默认值：center
     * 可选值：center / top / right / bottom / left
     */
    position: makeStringProp("center"),
    /**
     * 点击遮罩是否关闭
     * 类型：boolean
     * 默认值：true
     */
    closeOnClickModal: makeBooleanProp(true),
    /**
     * 动画持续时间
     * 类型：number | boolean
     * 默认值：300
     */
    duration: {
      type: [Number, Boolean],
      default: 300
    },
    /**
     * 是否显示遮罩
     * 类型：boolean
     * 默认值：true
     */
    modal: makeBooleanProp(true),
    /**
     * 设置层级
     * 类型：number
     * 默认值：10
     */
    zIndex: makeNumberProp(10),
    /**
     * 是否当关闭时将弹出层隐藏（display: none)
     * 类型：boolean
     * 默认值：true
     */
    hideWhenClose: makeBooleanProp(true),
    /**
     * 遮罩样式
     * 类型：string
     * 默认值：''
     */
    modalStyle: makeStringProp(""),
    /**
     * 弹出面板是否设置底部安全距离（iphone X 类型的机型）
     * 类型：boolean
     * 默认值：false
     */
    safeAreaInsetBottom: makeBooleanProp(false),
    /**
     * 弹出层是否显示
     */
    modelValue: makeBooleanProp(false),
    /**
     * 弹层内容懒渲染，触发展示时才渲染内容
     * 类型：boolean
     * 默认值：true
     */
    lazyRender: makeBooleanProp(true),
    /**
     * 是否锁定滚动
     * 类型：boolean
     * 默认值：true
     */
    lockScroll: makeBooleanProp(true)
  };
  const __default__$s = {
    name: "wd-popup",
    options: {
      virtualHost: true,
      addGlobalClass: true,
      styleIsolation: "shared"
    }
  };
  const _sfc_main$X = /* @__PURE__ */ vue.defineComponent({
    ...__default__$s,
    props: popupProps,
    emits: [
      "update:modelValue",
      "before-enter",
      "enter",
      "before-leave",
      "leave",
      "after-leave",
      "after-enter",
      "click-modal",
      "close"
    ],
    setup(__props, { expose: __expose, emit: __emit }) {
      __expose();
      const props = __props;
      const emit = __emit;
      const transitionName = vue.computed(() => {
        if (props.transition) {
          return props.transition;
        }
        if (props.position === "center") {
          return ["zoom-in", "fade"];
        }
        if (props.position === "left") {
          return "slide-left";
        }
        if (props.position === "right") {
          return "slide-right";
        }
        if (props.position === "bottom") {
          return "slide-up";
        }
        if (props.position === "top") {
          return "slide-down";
        }
        return "slide-up";
      });
      const safeBottom = vue.ref(0);
      const style = vue.computed(() => {
        return `z-index:${props.zIndex}; padding-bottom: ${safeBottom.value}px;${props.customStyle}`;
      });
      const rootClass = vue.computed(() => {
        return `wd-popup wd-popup--${props.position} ${!props.transition && props.position === "center" ? "is-deep" : ""} ${props.customClass || ""}`;
      });
      vue.onBeforeMount(() => {
        if (props.safeAreaInsetBottom) {
          const { safeArea, screenHeight, safeAreaInsets } = uni.getSystemInfoSync();
          if (safeArea) {
            safeBottom.value = safeAreaInsets ? safeAreaInsets.bottom : 0;
          } else {
            safeBottom.value = 0;
          }
        }
      });
      function handleClickModal() {
        emit("click-modal");
        if (props.closeOnClickModal) {
          close();
        }
      }
      function close() {
        emit("close");
        emit("update:modelValue", false);
      }
      function noop() {
      }
      const __returned__ = { props, emit, transitionName, safeBottom, style, rootClass, handleClickModal, close, noop, wdIcon: __easycom_0$5, wdOverlay: __easycom_6$2, wdTransition };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$W(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "wd-popup-wrapper" }, [
      _ctx.modal ? (vue.openBlock(), vue.createBlock($setup["wdOverlay"], {
        key: 0,
        show: _ctx.modelValue,
        "z-index": _ctx.zIndex,
        "lock-scroll": _ctx.lockScroll,
        duration: _ctx.duration,
        "custom-style": _ctx.modalStyle,
        onClick: $setup.handleClickModal,
        onTouchmove: $setup.noop
      }, null, 8, ["show", "z-index", "lock-scroll", "duration", "custom-style"])) : vue.createCommentVNode("v-if", true),
      vue.createVNode($setup["wdTransition"], {
        "lazy-render": _ctx.lazyRender,
        "custom-class": $setup.rootClass,
        "custom-style": $setup.style,
        duration: _ctx.duration,
        show: _ctx.modelValue,
        name: $setup.transitionName,
        destroy: _ctx.hideWhenClose,
        onBeforeEnter: _cache[0] || (_cache[0] = ($event) => $setup.emit("before-enter")),
        onEnter: _cache[1] || (_cache[1] = ($event) => $setup.emit("enter")),
        onAfterEnter: _cache[2] || (_cache[2] = ($event) => $setup.emit("after-enter")),
        onBeforeLeave: _cache[3] || (_cache[3] = ($event) => $setup.emit("before-leave")),
        onLeave: _cache[4] || (_cache[4] = ($event) => $setup.emit("leave")),
        onAfterLeave: _cache[5] || (_cache[5] = ($event) => $setup.emit("after-leave"))
      }, {
        default: vue.withCtx(() => [
          vue.renderSlot(_ctx.$slots, "default", {}, void 0, true),
          _ctx.closable ? (vue.openBlock(), vue.createBlock($setup["wdIcon"], {
            key: 0,
            "custom-class": "wd-popup__close",
            name: "add",
            onClick: $setup.close
          })) : vue.createCommentVNode("v-if", true)
        ]),
        _: 3
        /* FORWARDED */
      }, 8, ["lazy-render", "custom-class", "custom-style", "duration", "show", "name", "destroy"])
    ]);
  }
  const wdPopup = /* @__PURE__ */ _export_sfc(_sfc_main$X, [["render", _sfc_render$W], ["__scopeId", "data-v-25a8a9f7"], ["__file", "G:/Code/campus/miniProject/uni_modules/wot-design-uni/components/wd-popup/wd-popup.vue"]]);
  function useParent(key) {
    const parent = vue.inject(key, null);
    if (parent) {
      const instance = vue.getCurrentInstance();
      const { link: link2, unlink, internalChildren } = parent;
      link2(instance);
      vue.onUnmounted(() => unlink(instance));
      const index = vue.computed(() => internalChildren.indexOf(instance));
      return {
        parent,
        index
      };
    }
    return {
      parent: null,
      index: vue.ref(-1)
    };
  }
  const CELL_GROUP_KEY = Symbol("wd-cell-group");
  const cellGroupProps = {
    ...baseProps,
    /**
     * 分组标题
     */
    title: String,
    /**
     * 分组右侧内容
     */
    value: String,
    /**
     * 分组启用插槽
     */
    useSlot: makeBooleanProp(false),
    /**
     * 是否展示边框线
     */
    border: makeBooleanProp(false)
  };
  function useCell() {
    const { parent: cellGroup, index } = useParent(CELL_GROUP_KEY);
    const border = vue.computed(() => {
      return cellGroup && cellGroup.props.border && index.value;
    });
    return { border };
  }
  const FORM_KEY = Symbol("wd-form");
  const formProps = {
    ...baseProps,
    /**
     * 表单数据对象
     */
    model: makeRequiredProp(Object),
    /**
     * 表单验证规则
     */
    rules: {
      type: Object,
      default: () => ({})
    },
    /**
     * 是否在输入时重置表单校验信息
     */
    resetOnChange: makeBooleanProp(true),
    /**
     * 错误提示类型
     */
    errorType: {
      type: String,
      default: "message"
    }
  };
  const inputProps = {
    ...baseProps,
    customInputClass: makeStringProp(""),
    customLabelClass: makeStringProp(""),
    // 原生属性
    /**
     * 占位文本
     */
    placeholder: String,
    /**
     * 原生属性，指定 placeholder 的样式，目前仅支持color,font-size和font-weight
     */
    placeholderStyle: String,
    /**
     * 原生属性，指定 placeholder 的样式类
     */
    placeholderClass: makeStringProp(""),
    /**
     * 原生属性，指定光标与键盘的距离。取 input 距离底部的距离和cursor-spacing指定的距离的最小值作为光标与键盘的距离
     */
    cursorSpacing: makeNumberProp(0),
    /**
     * 原生属性，指定focus时的光标位置
     */
    cursor: makeNumberProp(-1),
    /**
     * 原生属性，光标起始位置，自动聚集时有效，需与selection-end搭配使用
     */
    selectionStart: makeNumberProp(-1),
    /**
     * 原生属性，光标结束位置，自动聚集时有效，需与selection-start搭配使用
     */
    selectionEnd: makeNumberProp(-1),
    /**
     * 原生属性，键盘弹起时，是否自动上推页面
     */
    adjustPosition: makeBooleanProp(true),
    /**
     * focus时，点击页面的时候不收起键盘
     */
    holdKeyboard: makeBooleanProp(false),
    /**
     * 设置键盘右下角按钮的文字，仅在type='text'时生效，可选值：done / go / next / search / send
     */
    confirmType: makeStringProp("done"),
    /**
     * 点击键盘右下角按钮时是否保持键盘不收起
     */
    confirmHold: makeBooleanProp(false),
    /**
     * 原生属性，获取焦点
     */
    focus: makeBooleanProp(false),
    /**
     * 类型，可选值：text / number / digit / idcard
     */
    type: makeStringProp("text"),
    /**
     * 原生属性，最大长度
     */
    maxlength: {
      type: Number,
      default: -1
    },
    /**
     * 原生属性，禁用
     */
    disabled: makeBooleanProp(false),
    /**
     * 微信小程序原生属性，强制 input 处于同层状态，默认 focus 时 input 会切到非同层状态 (仅在 iOS 下生效)
     */
    alwaysEmbed: makeBooleanProp(false),
    // 原生属性结束
    /**
     * 输入框的值靠右展示
     */
    alignRight: makeBooleanProp(false),
    /**
     * 绑定值
     */
    modelValue: makeNumericProp(""),
    /**
     * 显示为密码框
     */
    showPassword: makeBooleanProp(false),
    /**
     * 显示清空按钮
     */
    clearable: makeBooleanProp(false),
    /**
     * 只读
     */
    readonly: makeBooleanProp(false),
    /**
     * 前置图标，icon组件中的图标类名
     */
    prefixIcon: String,
    /**
     * 后置图标，icon组件中的图标类名
     */
    suffixIcon: String,
    /**
     * 显示字数限制，需要同时设置 maxlength
     */
    showWordLimit: makeBooleanProp(false),
    /**
     * 设置左侧标题
     */
    label: String,
    /**
     * 设置左侧标题宽度
     */
    labelWidth: makeStringProp(""),
    /**
     * 设置输入框大小，可选值：large
     */
    size: String,
    /**
     * 设置输入框错误状态，错误状态时为红色
     */
    error: makeBooleanProp(false),
    /**
     * 当有label属性时，设置标题和输入框垂直居中，默认为顶部居中
     */
    center: makeBooleanProp(false),
    /**
     * 非 cell 类型下是否隐藏下划线
     */
    noBorder: makeBooleanProp(false),
    /**
     * 是否必填
     */
    required: makeBooleanProp(false),
    /**
     * 表单域 model 字段名，在使用表单校验功能的情况下，该属性是必填的
     */
    prop: String,
    /**
     * 表单验证规则，结合wd-form组件使用
     */
    rules: makeArrayProp(),
    /**
     * 显示清除图标的时机，always 表示输入框不为空时展示，focus 表示输入框聚焦且不为空时展示
     * 类型: "focus" | "always"
     * 默认值: "always"
     */
    clearTrigger: makeStringProp("always"),
    /**
     * 是否在点击清除按钮时聚焦输入框
     * 类型: boolean
     * 默认值: true
     */
    focusWhenClear: makeBooleanProp(true),
    /**
     * 是否忽略组件内对文本合成系统事件的处理。为 false 时将触发 compositionstart、compositionend、compositionupdate 事件，且在文本合成期间会触发 input 事件
     * 类型: boolean
     * 默认值: true
     */
    ignoreCompositionEvent: makeBooleanProp(true),
    /**
     * 它提供了用户在编辑元素或其内容时可能输入的数据类型的提示。在符合条件的高版本webview里，uni-app的web和app-vue平台中可使用本属性。
     * 类型: InputMode
     * 可选值: "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | "search" | "password"
     * 默认值: "text"
     */
    inputmode: makeStringProp("text")
  };
  const __default__$r = {
    name: "wd-input",
    options: {
      virtualHost: true,
      addGlobalClass: true,
      styleIsolation: "shared"
    }
  };
  const _sfc_main$W = /* @__PURE__ */ vue.defineComponent({
    ...__default__$r,
    props: inputProps,
    emits: [
      "update:modelValue",
      "clear",
      "blur",
      "focus",
      "input",
      "keyboardheightchange",
      "confirm",
      "clicksuffixicon",
      "clickprefixicon",
      "click"
    ],
    setup(__props, { expose: __expose, emit: __emit }) {
      __expose();
      const props = __props;
      const emit = __emit;
      const slots = vue.useSlots();
      const { translate } = useTranslate("input");
      const isPwdVisible = vue.ref(false);
      const clearing = vue.ref(false);
      const focused = vue.ref(false);
      const focusing = vue.ref(false);
      const inputValue = vue.ref(getInitValue());
      const cell = useCell();
      vue.watch(
        () => props.focus,
        (newValue) => {
          focused.value = newValue;
        },
        { immediate: true, deep: true }
      );
      vue.watch(
        () => props.modelValue,
        (newValue) => {
          inputValue.value = isDef(newValue) ? String(newValue) : "";
        }
      );
      const { parent: form } = useParent(FORM_KEY);
      const placeholderValue = vue.computed(() => {
        return isDef(props.placeholder) ? props.placeholder : translate("placeholder");
      });
      const showClear = vue.computed(() => {
        const { disabled, readonly, clearable, clearTrigger } = props;
        if (clearable && !readonly && !disabled && inputValue.value && (clearTrigger === "always" || props.clearTrigger === "focus" && focusing.value)) {
          return true;
        } else {
          return false;
        }
      });
      const showWordCount = vue.computed(() => {
        const { disabled, readonly, maxlength, showWordLimit } = props;
        return Boolean(!disabled && !readonly && isDef(maxlength) && maxlength > -1 && showWordLimit);
      });
      const errorMessage = vue.computed(() => {
        if (form && props.prop && form.errorMessages && form.errorMessages[props.prop]) {
          return form.errorMessages[props.prop];
        } else {
          return "";
        }
      });
      const isRequired = vue.computed(() => {
        let formRequired = false;
        if (form && form.props.rules) {
          const rules = form.props.rules;
          for (const key in rules) {
            if (Object.prototype.hasOwnProperty.call(rules, key) && key === props.prop && Array.isArray(rules[key])) {
              formRequired = rules[key].some((rule) => rule.required);
            }
          }
        }
        return props.required || props.rules.some((rule) => rule.required) || formRequired;
      });
      const rootClass = vue.computed(() => {
        return `wd-input  ${props.label || slots.label ? "is-cell" : ""} ${props.center ? "is-center" : ""} ${cell.border.value ? "is-border" : ""} ${props.size ? "is-" + props.size : ""} ${props.error ? "is-error" : ""} ${props.disabled ? "is-disabled" : ""}  ${inputValue.value && String(inputValue.value).length > 0 ? "is-not-empty" : ""}  ${props.noBorder ? "is-no-border" : ""} ${props.customClass}`;
      });
      const labelClass = vue.computed(() => {
        return `wd-input__label ${props.customLabelClass} ${isRequired.value ? "is-required" : ""}`;
      });
      const inputPlaceholderClass = vue.computed(() => {
        return `wd-input__placeholder  ${props.placeholderClass}`;
      });
      const labelStyle = vue.computed(() => {
        return props.labelWidth ? objToStyle({
          "min-width": props.labelWidth,
          "max-width": props.labelWidth
        }) : "";
      });
      function getInitValue() {
        const formatted = formatValue(props.modelValue);
        if (!isValueEqual(formatted, props.modelValue)) {
          emit("update:modelValue", formatted);
        }
        return formatted;
      }
      function formatValue(value) {
        const { maxlength } = props;
        if (isDef(maxlength) && maxlength !== -1 && String(value).length > maxlength) {
          return value.toString().slice(0, maxlength);
        }
        return value;
      }
      function togglePwdVisible() {
        isPwdVisible.value = !isPwdVisible.value;
      }
      async function handleClear() {
        clearing.value = true;
        focusing.value = false;
        inputValue.value = "";
        if (props.focusWhenClear) {
          focused.value = false;
        }
        await pause();
        if (props.focusWhenClear) {
          focused.value = true;
          focusing.value = true;
        }
        emit("update:modelValue", inputValue.value);
        emit("clear");
      }
      async function handleBlur() {
        await pause(150);
        if (clearing.value) {
          clearing.value = false;
          return;
        }
        focusing.value = false;
        emit("blur", {
          value: inputValue.value
        });
      }
      function handleFocus({ detail }) {
        focusing.value = true;
        emit("focus", detail);
      }
      function handleInput({ detail }) {
        emit("update:modelValue", inputValue.value);
        emit("input", detail);
      }
      function handleKeyboardheightchange({ detail }) {
        emit("keyboardheightchange", detail);
      }
      function handleConfirm({ detail }) {
        emit("confirm", detail);
      }
      function onClickSuffixIcon() {
        emit("clicksuffixicon");
      }
      function onClickPrefixIcon() {
        emit("clickprefixicon");
      }
      function handleClick(event) {
        emit("click", event);
      }
      function isValueEqual(value1, value2) {
        return isEqual(String(value1), String(value2));
      }
      const __returned__ = { props, emit, slots, translate, isPwdVisible, clearing, focused, focusing, inputValue, cell, form, placeholderValue, showClear, showWordCount, errorMessage, isRequired, rootClass, labelClass, inputPlaceholderClass, labelStyle, getInitValue, formatValue, togglePwdVisible, handleClear, handleBlur, handleFocus, handleInput, handleKeyboardheightchange, handleConfirm, onClickSuffixIcon, onClickPrefixIcon, handleClick, isValueEqual, wdIcon: __easycom_0$5 };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$V(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: vue.normalizeClass($setup.rootClass),
        style: vue.normalizeStyle(_ctx.customStyle),
        onClick: $setup.handleClick
      },
      [
        _ctx.label || _ctx.$slots.label ? (vue.openBlock(), vue.createElementBlock(
          "view",
          {
            key: 0,
            class: vue.normalizeClass($setup.labelClass),
            style: vue.normalizeStyle($setup.labelStyle)
          },
          [
            _ctx.prefixIcon || _ctx.$slots.prefix ? (vue.openBlock(), vue.createElementBlock("view", {
              key: 0,
              class: "wd-input__prefix"
            }, [
              _ctx.prefixIcon && !_ctx.$slots.prefix ? (vue.openBlock(), vue.createBlock($setup["wdIcon"], {
                key: 0,
                "custom-class": "wd-input__icon",
                name: _ctx.prefixIcon,
                onClick: $setup.onClickPrefixIcon
              }, null, 8, ["name"])) : vue.renderSlot(_ctx.$slots, "prefix", { key: 1 }, void 0, true)
            ])) : vue.createCommentVNode("v-if", true),
            vue.createElementVNode("view", { class: "wd-input__label-inner" }, [
              _ctx.label && !_ctx.$slots.label ? (vue.openBlock(), vue.createElementBlock(
                vue.Fragment,
                { key: 0 },
                [
                  vue.createTextVNode(
                    vue.toDisplayString(_ctx.label),
                    1
                    /* TEXT */
                  )
                ],
                64
                /* STABLE_FRAGMENT */
              )) : vue.renderSlot(_ctx.$slots, "label", { key: 1 }, void 0, true)
            ])
          ],
          6
          /* CLASS, STYLE */
        )) : vue.createCommentVNode("v-if", true),
        vue.createElementVNode("view", { class: "wd-input__body" }, [
          vue.createElementVNode("view", { class: "wd-input__value" }, [
            (_ctx.prefixIcon || _ctx.$slots.prefix) && !_ctx.label ? (vue.openBlock(), vue.createElementBlock("view", {
              key: 0,
              class: "wd-input__prefix"
            }, [
              _ctx.prefixIcon && !_ctx.$slots.prefix ? (vue.openBlock(), vue.createBlock($setup["wdIcon"], {
                key: 0,
                "custom-class": "wd-input__icon",
                name: _ctx.prefixIcon,
                onClick: $setup.onClickPrefixIcon
              }, null, 8, ["name"])) : vue.renderSlot(_ctx.$slots, "prefix", { key: 1 }, void 0, true)
            ])) : vue.createCommentVNode("v-if", true),
            vue.withDirectives(vue.createElementVNode("input", {
              class: vue.normalizeClass([
                "wd-input__inner",
                _ctx.prefixIcon ? "wd-input__inner--prefix" : "",
                $setup.showWordCount ? "wd-input__inner--count" : "",
                _ctx.alignRight ? "is-align-right" : "",
                _ctx.customInputClass
              ]),
              type: _ctx.type,
              password: _ctx.showPassword && !$setup.isPwdVisible,
              "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $setup.inputValue = $event),
              placeholder: $setup.placeholderValue,
              disabled: _ctx.disabled || _ctx.readonly,
              maxlength: _ctx.maxlength,
              focus: $setup.focused,
              "confirm-type": _ctx.confirmType,
              "confirm-hold": _ctx.confirmHold,
              cursor: _ctx.cursor,
              "cursor-spacing": _ctx.cursorSpacing,
              "placeholder-style": _ctx.placeholderStyle,
              "selection-start": _ctx.selectionStart,
              "selection-end": _ctx.selectionEnd,
              "adjust-position": _ctx.adjustPosition,
              "hold-keyboard": _ctx.holdKeyboard,
              "always-embed": _ctx.alwaysEmbed,
              "placeholder-class": $setup.inputPlaceholderClass,
              ignoreCompositionEvent: _ctx.ignoreCompositionEvent,
              inputmode: _ctx.inputmode,
              onInput: $setup.handleInput,
              onFocus: $setup.handleFocus,
              onBlur: $setup.handleBlur,
              onConfirm: $setup.handleConfirm,
              onKeyboardheightchange: $setup.handleKeyboardheightchange
            }, null, 42, ["type", "password", "placeholder", "disabled", "maxlength", "focus", "confirm-type", "confirm-hold", "cursor", "cursor-spacing", "placeholder-style", "selection-start", "selection-end", "adjust-position", "hold-keyboard", "always-embed", "placeholder-class", "ignoreCompositionEvent", "inputmode"]), [
              [vue.vModelDynamic, $setup.inputValue]
            ]),
            _ctx.readonly ? (vue.openBlock(), vue.createElementBlock("view", {
              key: 1,
              class: "wd-input__readonly-mask"
            })) : vue.createCommentVNode("v-if", true),
            $setup.showClear || _ctx.showPassword || _ctx.suffixIcon || $setup.showWordCount || _ctx.$slots.suffix ? (vue.openBlock(), vue.createElementBlock("view", {
              key: 2,
              class: "wd-input__suffix"
            }, [
              $setup.showClear ? (vue.openBlock(), vue.createBlock($setup["wdIcon"], {
                key: 0,
                "custom-class": "wd-input__clear",
                name: "error-fill",
                onClick: $setup.handleClear
              })) : vue.createCommentVNode("v-if", true),
              _ctx.showPassword ? (vue.openBlock(), vue.createBlock($setup["wdIcon"], {
                key: 1,
                "custom-class": "wd-input__icon",
                name: $setup.isPwdVisible ? "view" : "eye-close",
                onClick: $setup.togglePwdVisible
              }, null, 8, ["name"])) : vue.createCommentVNode("v-if", true),
              $setup.showWordCount ? (vue.openBlock(), vue.createElementBlock("view", {
                key: 2,
                class: "wd-input__count"
              }, [
                vue.createElementVNode(
                  "text",
                  {
                    class: vue.normalizeClass([
                      $setup.inputValue && String($setup.inputValue).length > 0 ? "wd-input__count-current" : "",
                      String($setup.inputValue).length > _ctx.maxlength ? "is-error" : ""
                    ])
                  },
                  vue.toDisplayString(String($setup.inputValue).length),
                  3
                  /* TEXT, CLASS */
                ),
                vue.createTextVNode(
                  " /" + vue.toDisplayString(_ctx.maxlength),
                  1
                  /* TEXT */
                )
              ])) : vue.createCommentVNode("v-if", true),
              _ctx.suffixIcon && !_ctx.$slots.suffix ? (vue.openBlock(), vue.createBlock($setup["wdIcon"], {
                key: 3,
                "custom-class": "wd-input__icon",
                name: _ctx.suffixIcon,
                onClick: $setup.onClickSuffixIcon
              }, null, 8, ["name"])) : vue.renderSlot(_ctx.$slots, "suffix", { key: 4 }, void 0, true)
            ])) : vue.createCommentVNode("v-if", true)
          ]),
          $setup.errorMessage ? (vue.openBlock(), vue.createElementBlock(
            "view",
            {
              key: 0,
              class: "wd-input__error-message"
            },
            vue.toDisplayString($setup.errorMessage),
            1
            /* TEXT */
          )) : vue.createCommentVNode("v-if", true)
        ])
      ],
      6
      /* CLASS, STYLE */
    );
  }
  const __easycom_0$2 = /* @__PURE__ */ _export_sfc(_sfc_main$W, [["render", _sfc_render$V], ["__scopeId", "data-v-4e0c9774"], ["__file", "G:/Code/campus/miniProject/uni_modules/wot-design-uni/components/wd-input/wd-input.vue"]]);
  const messageBoxProps = {
    ...baseProps,
    /**
     * 指定唯一标识
     */
    selector: makeStringProp("")
  };
  const messageDefaultOptionKey = "__MESSAGE_OPTION__";
  const None = Symbol("None");
  const defaultOptions = {
    title: "",
    showCancelButton: false,
    show: false,
    closeOnClickModal: true,
    msg: "",
    type: "alert",
    inputType: "text",
    inputValue: "",
    showErr: false,
    zIndex: 99,
    lazyRender: true,
    inputError: ""
  };
  function useMessage(selector = "") {
    const messageOptionKey = selector ? messageDefaultOptionKey + selector : messageDefaultOptionKey;
    const messageOption = vue.inject(messageOptionKey, vue.ref(None));
    if (messageOption.value === None) {
      messageOption.value = defaultOptions;
      vue.provide(messageOptionKey, messageOption);
    }
    const createMethod = (type) => {
      return (options) => {
        const messageOptions = deepMerge({ type }, typeof options === "string" ? { title: options } : options);
        if (messageOptions.type === "confirm" || messageOptions.type === "prompt") {
          messageOptions.showCancelButton = true;
        } else {
          messageOptions.showCancelButton = false;
        }
        return show(messageOptions);
      };
    };
    const show = (option) => {
      return new Promise((resolve, reject) => {
        const options = deepMerge(defaultOptions, typeof option === "string" ? { title: option } : option);
        messageOption.value = deepMerge(options, {
          show: true,
          success: (res) => {
            resolve(res);
          },
          fail: (res) => {
            reject(res);
          }
        });
      });
    };
    const alert = createMethod("alert");
    const confirm = createMethod("confirm");
    const prompt = createMethod("prompt");
    const close = () => {
      if (messageOption.value !== None) {
        messageOption.value.show = false;
      }
    };
    return {
      show,
      alert,
      confirm,
      prompt,
      close
    };
  }
  const getMessageDefaultOptionKey = (selector) => {
    return selector ? `${messageDefaultOptionKey}${selector}` : messageDefaultOptionKey;
  };
  const __default__$q = {
    name: "wd-message-box",
    options: {
      virtualHost: true,
      addGlobalClass: true,
      styleIsolation: "shared"
    }
  };
  const _sfc_main$V = /* @__PURE__ */ vue.defineComponent({
    ...__default__$q,
    props: messageBoxProps,
    setup(__props, { expose: __expose }) {
      __expose();
      const props = __props;
      const { translate } = useTranslate("message-box");
      const rootClass = vue.computed(() => {
        return `wd-message-box__container ${props.customClass}`;
      });
      const bodyClass = vue.computed(() => {
        return `wd-message-box__body ${!messageState.title ? "is-no-title" : ""} ${messageState.type === "prompt" ? "is-prompt" : ""}`;
      });
      const messageOptionKey = getMessageDefaultOptionKey(props.selector);
      const messageOption = vue.inject(messageOptionKey, vue.ref(defaultOptions));
      const messageState = vue.reactive({
        msg: "",
        // 消息内容
        show: false,
        // 是否显示弹框
        title: "",
        // 标题
        showCancelButton: false,
        // 是否展示取消按钮
        closeOnClickModal: true,
        // 是否支持点击蒙层关闭
        confirmButtonText: "",
        // 确定按钮文案
        cancelButtonText: "",
        // 取消按钮文案
        type: "alert",
        // 弹框类型
        inputType: "text",
        // 输入框类型
        inputValue: "",
        // 输入框初始值
        inputPlaceholder: "",
        // 输入框placeholder
        inputError: "",
        // 输入框错误提示文案
        showErr: false,
        // 是否显示错误提示
        zIndex: 99,
        // 弹窗层级
        lazyRender: true
        // 弹层内容懒渲染
      });
      const customConfirmProps = vue.computed(() => {
        const buttonProps2 = deepAssign(
          {
            block: true
          },
          isDef(messageState.confirmButtonProps) ? omitBy(messageState.confirmButtonProps, isUndefined) : {}
        );
        buttonProps2.customClass = `${buttonProps2.customClass || ""} wd-message-box__actions-btn`;
        return buttonProps2;
      });
      const customCancelProps = vue.computed(() => {
        const buttonProps2 = deepAssign(
          {
            block: true,
            type: "info"
          },
          isDef(messageState.cancelButtonProps) ? omitBy(messageState.cancelButtonProps, isUndefined) : {}
        );
        buttonProps2.customClass = `${buttonProps2.customClass || ""} wd-message-box__actions-btn`;
        return buttonProps2;
      });
      vue.watch(
        () => messageOption.value,
        (newVal) => {
          reset(newVal);
        },
        {
          deep: true,
          immediate: true
        }
      );
      vue.watch(
        () => messageState.show,
        (newValue) => {
          resetErr(!!newValue);
        },
        {
          deep: true,
          immediate: true
        }
      );
      function toggleModal(action) {
        if (action === "modal" && !messageState.closeOnClickModal) {
          return;
        }
        if (messageState.type === "prompt" && action === "confirm" && !validate()) {
          return;
        }
        switch (action) {
          case "confirm":
            if (messageState.beforeConfirm) {
              messageState.beforeConfirm({
                resolve: (isPass) => {
                  if (isPass) {
                    handleConfirm({
                      action,
                      value: messageState.inputValue
                    });
                  }
                }
              });
            } else {
              handleConfirm({
                action,
                value: messageState.inputValue
              });
            }
            break;
          case "cancel":
            handleCancel({
              action
            });
            break;
          default:
            handleCancel({
              action: "modal"
            });
            break;
        }
      }
      function handleConfirm(result) {
        messageState.show = false;
        if (isFunction(messageState.success)) {
          messageState.success(result);
        }
      }
      function handleCancel(result) {
        messageState.show = false;
        if (isFunction(messageState.fail)) {
          messageState.fail(result);
        }
      }
      function validate() {
        if (messageState.inputPattern && !messageState.inputPattern.test(String(messageState.inputValue))) {
          messageState.showErr = true;
          return false;
        }
        if (typeof messageState.inputValidate === "function") {
          const validateResult = messageState.inputValidate(messageState.inputValue);
          if (!validateResult) {
            messageState.showErr = true;
            return false;
          }
        }
        messageState.showErr = false;
        return true;
      }
      function resetErr(val) {
        if (val === false) {
          messageState.showErr = false;
        }
      }
      function inputValChange({ value }) {
        if (value === "") {
          messageState.showErr = false;
          return;
        }
        messageState.inputValue = value;
      }
      function reset(option) {
        if (option) {
          messageState.title = isDef(option.title) ? option.title : "";
          messageState.showCancelButton = isDef(option.showCancelButton) ? option.showCancelButton : false;
          messageState.show = option.show;
          messageState.closeOnClickModal = option.closeOnClickModal;
          messageState.confirmButtonText = option.confirmButtonText;
          messageState.cancelButtonText = option.cancelButtonText;
          messageState.msg = option.msg;
          messageState.type = option.type;
          messageState.inputType = option.inputType;
          messageState.inputSize = option.inputSize;
          messageState.inputValue = option.inputValue;
          messageState.inputPlaceholder = option.inputPlaceholder;
          messageState.inputPattern = option.inputPattern;
          messageState.inputValidate = option.inputValidate;
          messageState.success = option.success;
          messageState.fail = option.fail;
          messageState.beforeConfirm = option.beforeConfirm;
          messageState.inputError = option.inputError;
          messageState.showErr = option.showErr;
          messageState.zIndex = option.zIndex;
          messageState.lazyRender = option.lazyRender;
          messageState.confirmButtonProps = option.confirmButtonProps;
          messageState.cancelButtonProps = option.cancelButtonProps;
        }
      }
      const __returned__ = { props, translate, rootClass, bodyClass, messageOptionKey, messageOption, messageState, customConfirmProps, customCancelProps, toggleModal, handleConfirm, handleCancel, validate, resetErr, inputValChange, reset, wdPopup, wdButton: __easycom_3, wdInput: __easycom_0$2 };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$U(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", null, [
      vue.createVNode($setup["wdPopup"], {
        transition: "zoom-in",
        modelValue: $setup.messageState.show,
        "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $setup.messageState.show = $event),
        "close-on-click-modal": $setup.messageState.closeOnClickModal,
        "lazy-render": $setup.messageState.lazyRender,
        "custom-class": "wd-message-box",
        onClickModal: _cache[4] || (_cache[4] = ($event) => $setup.toggleModal("modal")),
        "z-index": $setup.messageState.zIndex,
        duration: 200
      }, {
        default: vue.withCtx(() => [
          vue.createElementVNode(
            "view",
            {
              class: vue.normalizeClass($setup.rootClass)
            },
            [
              vue.createElementVNode(
                "view",
                {
                  class: vue.normalizeClass($setup.bodyClass)
                },
                [
                  $setup.messageState.title ? (vue.openBlock(), vue.createElementBlock(
                    "view",
                    {
                      key: 0,
                      class: "wd-message-box__title"
                    },
                    vue.toDisplayString($setup.messageState.title),
                    1
                    /* TEXT */
                  )) : vue.createCommentVNode("v-if", true),
                  vue.createElementVNode("view", { class: "wd-message-box__content" }, [
                    $setup.messageState.type === "prompt" ? (vue.openBlock(), vue.createElementBlock(
                      vue.Fragment,
                      { key: 0 },
                      [
                        vue.createVNode($setup["wdInput"], {
                          modelValue: $setup.messageState.inputValue,
                          "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $setup.messageState.inputValue = $event),
                          type: $setup.messageState.inputType,
                          size: $setup.messageState.inputSize,
                          placeholder: $setup.messageState.inputPlaceholder,
                          onInput: $setup.inputValChange
                        }, null, 8, ["modelValue", "type", "size", "placeholder"]),
                        $setup.messageState.showErr ? (vue.openBlock(), vue.createElementBlock(
                          "view",
                          {
                            key: 0,
                            class: "wd-message-box__input-error"
                          },
                          vue.toDisplayString($setup.messageState.inputError || $setup.translate("inputNoValidate")),
                          1
                          /* TEXT */
                        )) : vue.createCommentVNode("v-if", true)
                      ],
                      64
                      /* STABLE_FRAGMENT */
                    )) : vue.createCommentVNode("v-if", true),
                    vue.renderSlot(_ctx.$slots, "default", {}, () => [
                      vue.createTextVNode(
                        vue.toDisplayString($setup.messageState.msg),
                        1
                        /* TEXT */
                      )
                    ], true)
                  ])
                ],
                2
                /* CLASS */
              ),
              vue.createElementVNode(
                "view",
                {
                  class: vue.normalizeClass(`wd-message-box__actions ${$setup.messageState.showCancelButton ? "wd-message-box__flex" : "wd-message-box__block"}`)
                },
                [
                  $setup.messageState.showCancelButton ? (vue.openBlock(), vue.createBlock(
                    $setup["wdButton"],
                    vue.mergeProps({ key: 0 }, $setup.customCancelProps, {
                      onClick: _cache[1] || (_cache[1] = ($event) => $setup.toggleModal("cancel"))
                    }),
                    {
                      default: vue.withCtx(() => [
                        vue.createTextVNode(
                          vue.toDisplayString($setup.messageState.cancelButtonText || $setup.translate("cancel")),
                          1
                          /* TEXT */
                        )
                      ]),
                      _: 1
                      /* STABLE */
                    },
                    16
                    /* FULL_PROPS */
                  )) : vue.createCommentVNode("v-if", true),
                  vue.createVNode(
                    $setup["wdButton"],
                    vue.mergeProps($setup.customConfirmProps, {
                      onClick: _cache[2] || (_cache[2] = ($event) => $setup.toggleModal("confirm"))
                    }),
                    {
                      default: vue.withCtx(() => [
                        vue.createTextVNode(
                          vue.toDisplayString($setup.messageState.confirmButtonText || $setup.translate("confirm")),
                          1
                          /* TEXT */
                        )
                      ]),
                      _: 1
                      /* STABLE */
                    },
                    16
                    /* FULL_PROPS */
                  )
                ],
                2
                /* CLASS */
              )
            ],
            2
            /* CLASS */
          )
        ]),
        _: 3
        /* FORWARDED */
      }, 8, ["modelValue", "close-on-click-modal", "lazy-render", "z-index"])
    ]);
  }
  const __easycom_12 = /* @__PURE__ */ _export_sfc(_sfc_main$V, [["render", _sfc_render$U], ["__scopeId", "data-v-c8139c88"], ["__file", "G:/Code/campus/miniProject/uni_modules/wot-design-uni/components/wd-message-box/wd-message-box.vue"]]);
  var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
  function getDefaultExportFromCjs(x) {
    return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
  }
  var cryptoJs = { exports: {} };
  var core = { exports: {} };
  var hasRequiredCore;
  function requireCore() {
    if (hasRequiredCore)
      return core.exports;
    hasRequiredCore = 1;
    (function(module, exports) {
      (function(root, factory) {
        {
          module.exports = factory();
        }
      })(commonjsGlobal, function() {
        var CryptoJS2 = CryptoJS2 || function(Math2, undefined$1) {
          var create = Object.create || /* @__PURE__ */ function() {
            function F() {
            }
            return function(obj) {
              var subtype;
              F.prototype = obj;
              subtype = new F();
              F.prototype = null;
              return subtype;
            };
          }();
          var C = {};
          var C_lib = C.lib = {};
          var Base = C_lib.Base = /* @__PURE__ */ function() {
            return {
              /**
               * Creates a new object that inherits from this object.
               *
               * @param {Object} overrides Properties to copy into the new object.
               *
               * @return {Object} The new object.
               *
               * @static
               *
               * @example
               *
               *     var MyType = CryptoJS.lib.Base.extend({
               *         field: 'value',
               *
               *         method: function () {
               *         }
               *     });
               */
              extend: function(overrides) {
                var subtype = create(this);
                if (overrides) {
                  subtype.mixIn(overrides);
                }
                if (!subtype.hasOwnProperty("init") || this.init === subtype.init) {
                  subtype.init = function() {
                    subtype.$super.init.apply(this, arguments);
                  };
                }
                subtype.init.prototype = subtype;
                subtype.$super = this;
                return subtype;
              },
              /**
               * Extends this object and runs the init method.
               * Arguments to create() will be passed to init().
               *
               * @return {Object} The new object.
               *
               * @static
               *
               * @example
               *
               *     var instance = MyType.create();
               */
              create: function() {
                var instance = this.extend();
                instance.init.apply(instance, arguments);
                return instance;
              },
              /**
               * Initializes a newly created object.
               * Override this method to add some logic when your objects are created.
               *
               * @example
               *
               *     var MyType = CryptoJS.lib.Base.extend({
               *         init: function () {
               *             // ...
               *         }
               *     });
               */
              init: function() {
              },
              /**
               * Copies properties into this object.
               *
               * @param {Object} properties The properties to mix in.
               *
               * @example
               *
               *     MyType.mixIn({
               *         field: 'value'
               *     });
               */
              mixIn: function(properties) {
                for (var propertyName in properties) {
                  if (properties.hasOwnProperty(propertyName)) {
                    this[propertyName] = properties[propertyName];
                  }
                }
                if (properties.hasOwnProperty("toString")) {
                  this.toString = properties.toString;
                }
              },
              /**
               * Creates a copy of this object.
               *
               * @return {Object} The clone.
               *
               * @example
               *
               *     var clone = instance.clone();
               */
              clone: function() {
                return this.init.prototype.extend(this);
              }
            };
          }();
          var WordArray = C_lib.WordArray = Base.extend({
            /**
             * Initializes a newly created word array.
             *
             * @param {Array} words (Optional) An array of 32-bit words.
             * @param {number} sigBytes (Optional) The number of significant bytes in the words.
             *
             * @example
             *
             *     var wordArray = CryptoJS.lib.WordArray.create();
             *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
             *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
             */
            init: function(words, sigBytes) {
              words = this.words = words || [];
              if (sigBytes != undefined$1) {
                this.sigBytes = sigBytes;
              } else {
                this.sigBytes = words.length * 4;
              }
            },
            /**
             * Converts this word array to a string.
             *
             * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
             *
             * @return {string} The stringified word array.
             *
             * @example
             *
             *     var string = wordArray + '';
             *     var string = wordArray.toString();
             *     var string = wordArray.toString(CryptoJS.enc.Utf8);
             */
            toString: function(encoder) {
              return (encoder || Hex).stringify(this);
            },
            /**
             * Concatenates a word array to this word array.
             *
             * @param {WordArray} wordArray The word array to append.
             *
             * @return {WordArray} This word array.
             *
             * @example
             *
             *     wordArray1.concat(wordArray2);
             */
            concat: function(wordArray) {
              var thisWords = this.words;
              var thatWords = wordArray.words;
              var thisSigBytes = this.sigBytes;
              var thatSigBytes = wordArray.sigBytes;
              this.clamp();
              if (thisSigBytes % 4) {
                for (var i = 0; i < thatSigBytes; i++) {
                  var thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 255;
                  thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;
                }
              } else {
                for (var i = 0; i < thatSigBytes; i += 4) {
                  thisWords[thisSigBytes + i >>> 2] = thatWords[i >>> 2];
                }
              }
              this.sigBytes += thatSigBytes;
              return this;
            },
            /**
             * Removes insignificant bits.
             *
             * @example
             *
             *     wordArray.clamp();
             */
            clamp: function() {
              var words = this.words;
              var sigBytes = this.sigBytes;
              words[sigBytes >>> 2] &= 4294967295 << 32 - sigBytes % 4 * 8;
              words.length = Math2.ceil(sigBytes / 4);
            },
            /**
             * Creates a copy of this word array.
             *
             * @return {WordArray} The clone.
             *
             * @example
             *
             *     var clone = wordArray.clone();
             */
            clone: function() {
              var clone = Base.clone.call(this);
              clone.words = this.words.slice(0);
              return clone;
            },
            /**
             * Creates a word array filled with random bytes.
             *
             * @param {number} nBytes The number of random bytes to generate.
             *
             * @return {WordArray} The random word array.
             *
             * @static
             *
             * @example
             *
             *     var wordArray = CryptoJS.lib.WordArray.random(16);
             */
            random: function(nBytes) {
              var words = [];
              var r = function(m_w) {
                var m_w = m_w;
                var m_z = 987654321;
                var mask = 4294967295;
                return function() {
                  m_z = 36969 * (m_z & 65535) + (m_z >> 16) & mask;
                  m_w = 18e3 * (m_w & 65535) + (m_w >> 16) & mask;
                  var result = (m_z << 16) + m_w & mask;
                  result /= 4294967296;
                  result += 0.5;
                  return result * (Math2.random() > 0.5 ? 1 : -1);
                };
              };
              for (var i = 0, rcache; i < nBytes; i += 4) {
                var _r = r((rcache || Math2.random()) * 4294967296);
                rcache = _r() * 987654071;
                words.push(_r() * 4294967296 | 0);
              }
              return new WordArray.init(words, nBytes);
            }
          });
          var C_enc = C.enc = {};
          var Hex = C_enc.Hex = {
            /**
             * Converts a word array to a hex string.
             *
             * @param {WordArray} wordArray The word array.
             *
             * @return {string} The hex string.
             *
             * @static
             *
             * @example
             *
             *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
             */
            stringify: function(wordArray) {
              var words = wordArray.words;
              var sigBytes = wordArray.sigBytes;
              var hexChars = [];
              for (var i = 0; i < sigBytes; i++) {
                var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
                hexChars.push((bite >>> 4).toString(16));
                hexChars.push((bite & 15).toString(16));
              }
              return hexChars.join("");
            },
            /**
             * Converts a hex string to a word array.
             *
             * @param {string} hexStr The hex string.
             *
             * @return {WordArray} The word array.
             *
             * @static
             *
             * @example
             *
             *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
             */
            parse: function(hexStr) {
              var hexStrLength = hexStr.length;
              var words = [];
              for (var i = 0; i < hexStrLength; i += 2) {
                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4;
              }
              return new WordArray.init(words, hexStrLength / 2);
            }
          };
          var Latin1 = C_enc.Latin1 = {
            /**
             * Converts a word array to a Latin1 string.
             *
             * @param {WordArray} wordArray The word array.
             *
             * @return {string} The Latin1 string.
             *
             * @static
             *
             * @example
             *
             *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
             */
            stringify: function(wordArray) {
              var words = wordArray.words;
              var sigBytes = wordArray.sigBytes;
              var latin1Chars = [];
              for (var i = 0; i < sigBytes; i++) {
                var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
                latin1Chars.push(String.fromCharCode(bite));
              }
              return latin1Chars.join("");
            },
            /**
             * Converts a Latin1 string to a word array.
             *
             * @param {string} latin1Str The Latin1 string.
             *
             * @return {WordArray} The word array.
             *
             * @static
             *
             * @example
             *
             *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
             */
            parse: function(latin1Str) {
              var latin1StrLength = latin1Str.length;
              var words = [];
              for (var i = 0; i < latin1StrLength; i++) {
                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 255) << 24 - i % 4 * 8;
              }
              return new WordArray.init(words, latin1StrLength);
            }
          };
          var Utf8 = C_enc.Utf8 = {
            /**
             * Converts a word array to a UTF-8 string.
             *
             * @param {WordArray} wordArray The word array.
             *
             * @return {string} The UTF-8 string.
             *
             * @static
             *
             * @example
             *
             *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
             */
            stringify: function(wordArray) {
              try {
                return decodeURIComponent(escape(Latin1.stringify(wordArray)));
              } catch (e) {
                throw new Error("Malformed UTF-8 data");
              }
            },
            /**
             * Converts a UTF-8 string to a word array.
             *
             * @param {string} utf8Str The UTF-8 string.
             *
             * @return {WordArray} The word array.
             *
             * @static
             *
             * @example
             *
             *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
             */
            parse: function(utf8Str) {
              return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
            }
          };
          var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
            /**
             * Resets this block algorithm's data buffer to its initial state.
             *
             * @example
             *
             *     bufferedBlockAlgorithm.reset();
             */
            reset: function() {
              this._data = new WordArray.init();
              this._nDataBytes = 0;
            },
            /**
             * Adds new data to this block algorithm's buffer.
             *
             * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
             *
             * @example
             *
             *     bufferedBlockAlgorithm._append('data');
             *     bufferedBlockAlgorithm._append(wordArray);
             */
            _append: function(data) {
              if (typeof data == "string") {
                data = Utf8.parse(data);
              }
              this._data.concat(data);
              this._nDataBytes += data.sigBytes;
            },
            /**
             * Processes available data blocks.
             *
             * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
             *
             * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
             *
             * @return {WordArray} The processed data.
             *
             * @example
             *
             *     var processedData = bufferedBlockAlgorithm._process();
             *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
             */
            _process: function(doFlush) {
              var data = this._data;
              var dataWords = data.words;
              var dataSigBytes = data.sigBytes;
              var blockSize = this.blockSize;
              var blockSizeBytes = blockSize * 4;
              var nBlocksReady = dataSigBytes / blockSizeBytes;
              if (doFlush) {
                nBlocksReady = Math2.ceil(nBlocksReady);
              } else {
                nBlocksReady = Math2.max((nBlocksReady | 0) - this._minBufferSize, 0);
              }
              var nWordsReady = nBlocksReady * blockSize;
              var nBytesReady = Math2.min(nWordsReady * 4, dataSigBytes);
              if (nWordsReady) {
                for (var offset = 0; offset < nWordsReady; offset += blockSize) {
                  this._doProcessBlock(dataWords, offset);
                }
                var processedWords = dataWords.splice(0, nWordsReady);
                data.sigBytes -= nBytesReady;
              }
              return new WordArray.init(processedWords, nBytesReady);
            },
            /**
             * Creates a copy of this object.
             *
             * @return {Object} The clone.
             *
             * @example
             *
             *     var clone = bufferedBlockAlgorithm.clone();
             */
            clone: function() {
              var clone = Base.clone.call(this);
              clone._data = this._data.clone();
              return clone;
            },
            _minBufferSize: 0
          });
          C_lib.Hasher = BufferedBlockAlgorithm.extend({
            /**
             * Configuration options.
             */
            cfg: Base.extend(),
            /**
             * Initializes a newly created hasher.
             *
             * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
             *
             * @example
             *
             *     var hasher = CryptoJS.algo.SHA256.create();
             */
            init: function(cfg) {
              this.cfg = this.cfg.extend(cfg);
              this.reset();
            },
            /**
             * Resets this hasher to its initial state.
             *
             * @example
             *
             *     hasher.reset();
             */
            reset: function() {
              BufferedBlockAlgorithm.reset.call(this);
              this._doReset();
            },
            /**
             * Updates this hasher with a message.
             *
             * @param {WordArray|string} messageUpdate The message to append.
             *
             * @return {Hasher} This hasher.
             *
             * @example
             *
             *     hasher.update('message');
             *     hasher.update(wordArray);
             */
            update: function(messageUpdate) {
              this._append(messageUpdate);
              this._process();
              return this;
            },
            /**
             * Finalizes the hash computation.
             * Note that the finalize operation is effectively a destructive, read-once operation.
             *
             * @param {WordArray|string} messageUpdate (Optional) A final message update.
             *
             * @return {WordArray} The hash.
             *
             * @example
             *
             *     var hash = hasher.finalize();
             *     var hash = hasher.finalize('message');
             *     var hash = hasher.finalize(wordArray);
             */
            finalize: function(messageUpdate) {
              if (messageUpdate) {
                this._append(messageUpdate);
              }
              var hash = this._doFinalize();
              return hash;
            },
            blockSize: 512 / 32,
            /**
             * Creates a shortcut function to a hasher's object interface.
             *
             * @param {Hasher} hasher The hasher to create a helper for.
             *
             * @return {Function} The shortcut function.
             *
             * @static
             *
             * @example
             *
             *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
             */
            _createHelper: function(hasher) {
              return function(message, cfg) {
                return new hasher.init(cfg).finalize(message);
              };
            },
            /**
             * Creates a shortcut function to the HMAC's object interface.
             *
             * @param {Hasher} hasher The hasher to use in this HMAC helper.
             *
             * @return {Function} The shortcut function.
             *
             * @static
             *
             * @example
             *
             *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
             */
            _createHmacHelper: function(hasher) {
              return function(message, key) {
                return new C_algo.HMAC.init(hasher, key).finalize(message);
              };
            }
          });
          var C_algo = C.algo = {};
          return C;
        }(Math);
        return CryptoJS2;
      });
    })(core);
    return core.exports;
  }
  var x64Core = { exports: {} };
  var hasRequiredX64Core;
  function requireX64Core() {
    if (hasRequiredX64Core)
      return x64Core.exports;
    hasRequiredX64Core = 1;
    (function(module, exports) {
      (function(root, factory) {
        {
          module.exports = factory(requireCore());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        (function(undefined$1) {
          var C = CryptoJS2;
          var C_lib = C.lib;
          var Base = C_lib.Base;
          var X32WordArray = C_lib.WordArray;
          var C_x64 = C.x64 = {};
          C_x64.Word = Base.extend({
            /**
             * Initializes a newly created 64-bit word.
             *
             * @param {number} high The high 32 bits.
             * @param {number} low The low 32 bits.
             *
             * @example
             *
             *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);
             */
            init: function(high, low) {
              this.high = high;
              this.low = low;
            }
            /**
             * Bitwise NOTs this word.
             *
             * @return {X64Word} A new x64-Word object after negating.
             *
             * @example
             *
             *     var negated = x64Word.not();
             */
            // not: function () {
            // var high = ~this.high;
            // var low = ~this.low;
            // return X64Word.create(high, low);
            // },
            /**
             * Bitwise ANDs this word with the passed word.
             *
             * @param {X64Word} word The x64-Word to AND with this word.
             *
             * @return {X64Word} A new x64-Word object after ANDing.
             *
             * @example
             *
             *     var anded = x64Word.and(anotherX64Word);
             */
            // and: function (word) {
            // var high = this.high & word.high;
            // var low = this.low & word.low;
            // return X64Word.create(high, low);
            // },
            /**
             * Bitwise ORs this word with the passed word.
             *
             * @param {X64Word} word The x64-Word to OR with this word.
             *
             * @return {X64Word} A new x64-Word object after ORing.
             *
             * @example
             *
             *     var ored = x64Word.or(anotherX64Word);
             */
            // or: function (word) {
            // var high = this.high | word.high;
            // var low = this.low | word.low;
            // return X64Word.create(high, low);
            // },
            /**
             * Bitwise XORs this word with the passed word.
             *
             * @param {X64Word} word The x64-Word to XOR with this word.
             *
             * @return {X64Word} A new x64-Word object after XORing.
             *
             * @example
             *
             *     var xored = x64Word.xor(anotherX64Word);
             */
            // xor: function (word) {
            // var high = this.high ^ word.high;
            // var low = this.low ^ word.low;
            // return X64Word.create(high, low);
            // },
            /**
             * Shifts this word n bits to the left.
             *
             * @param {number} n The number of bits to shift.
             *
             * @return {X64Word} A new x64-Word object after shifting.
             *
             * @example
             *
             *     var shifted = x64Word.shiftL(25);
             */
            // shiftL: function (n) {
            // if (n < 32) {
            // var high = (this.high << n) | (this.low >>> (32 - n));
            // var low = this.low << n;
            // } else {
            // var high = this.low << (n - 32);
            // var low = 0;
            // }
            // return X64Word.create(high, low);
            // },
            /**
             * Shifts this word n bits to the right.
             *
             * @param {number} n The number of bits to shift.
             *
             * @return {X64Word} A new x64-Word object after shifting.
             *
             * @example
             *
             *     var shifted = x64Word.shiftR(7);
             */
            // shiftR: function (n) {
            // if (n < 32) {
            // var low = (this.low >>> n) | (this.high << (32 - n));
            // var high = this.high >>> n;
            // } else {
            // var low = this.high >>> (n - 32);
            // var high = 0;
            // }
            // return X64Word.create(high, low);
            // },
            /**
             * Rotates this word n bits to the left.
             *
             * @param {number} n The number of bits to rotate.
             *
             * @return {X64Word} A new x64-Word object after rotating.
             *
             * @example
             *
             *     var rotated = x64Word.rotL(25);
             */
            // rotL: function (n) {
            // return this.shiftL(n).or(this.shiftR(64 - n));
            // },
            /**
             * Rotates this word n bits to the right.
             *
             * @param {number} n The number of bits to rotate.
             *
             * @return {X64Word} A new x64-Word object after rotating.
             *
             * @example
             *
             *     var rotated = x64Word.rotR(7);
             */
            // rotR: function (n) {
            // return this.shiftR(n).or(this.shiftL(64 - n));
            // },
            /**
             * Adds this word with the passed word.
             *
             * @param {X64Word} word The x64-Word to add with this word.
             *
             * @return {X64Word} A new x64-Word object after adding.
             *
             * @example
             *
             *     var added = x64Word.add(anotherX64Word);
             */
            // add: function (word) {
            // var low = (this.low + word.low) | 0;
            // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;
            // var high = (this.high + word.high + carry) | 0;
            // return X64Word.create(high, low);
            // }
          });
          C_x64.WordArray = Base.extend({
            /**
             * Initializes a newly created word array.
             *
             * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.
             * @param {number} sigBytes (Optional) The number of significant bytes in the words.
             *
             * @example
             *
             *     var wordArray = CryptoJS.x64.WordArray.create();
             *
             *     var wordArray = CryptoJS.x64.WordArray.create([
             *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
             *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
             *     ]);
             *
             *     var wordArray = CryptoJS.x64.WordArray.create([
             *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
             *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
             *     ], 10);
             */
            init: function(words, sigBytes) {
              words = this.words = words || [];
              if (sigBytes != undefined$1) {
                this.sigBytes = sigBytes;
              } else {
                this.sigBytes = words.length * 8;
              }
            },
            /**
             * Converts this 64-bit word array to a 32-bit word array.
             *
             * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.
             *
             * @example
             *
             *     var x32WordArray = x64WordArray.toX32();
             */
            toX32: function() {
              var x64Words = this.words;
              var x64WordsLength = x64Words.length;
              var x32Words = [];
              for (var i = 0; i < x64WordsLength; i++) {
                var x64Word = x64Words[i];
                x32Words.push(x64Word.high);
                x32Words.push(x64Word.low);
              }
              return X32WordArray.create(x32Words, this.sigBytes);
            },
            /**
             * Creates a copy of this word array.
             *
             * @return {X64WordArray} The clone.
             *
             * @example
             *
             *     var clone = x64WordArray.clone();
             */
            clone: function() {
              var clone = Base.clone.call(this);
              var words = clone.words = this.words.slice(0);
              var wordsLength = words.length;
              for (var i = 0; i < wordsLength; i++) {
                words[i] = words[i].clone();
              }
              return clone;
            }
          });
        })();
        return CryptoJS2;
      });
    })(x64Core);
    return x64Core.exports;
  }
  var libTypedarrays = { exports: {} };
  var hasRequiredLibTypedarrays;
  function requireLibTypedarrays() {
    if (hasRequiredLibTypedarrays)
      return libTypedarrays.exports;
    hasRequiredLibTypedarrays = 1;
    (function(module, exports) {
      (function(root, factory) {
        {
          module.exports = factory(requireCore());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        (function() {
          if (typeof ArrayBuffer != "function") {
            return;
          }
          var C = CryptoJS2;
          var C_lib = C.lib;
          var WordArray = C_lib.WordArray;
          var superInit = WordArray.init;
          var subInit = WordArray.init = function(typedArray) {
            if (typedArray instanceof ArrayBuffer) {
              typedArray = new Uint8Array(typedArray);
            }
            if (typedArray instanceof Int8Array || typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray || typedArray instanceof Int16Array || typedArray instanceof Uint16Array || typedArray instanceof Int32Array || typedArray instanceof Uint32Array || typedArray instanceof Float32Array || typedArray instanceof Float64Array) {
              typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);
            }
            if (typedArray instanceof Uint8Array) {
              var typedArrayByteLength = typedArray.byteLength;
              var words = [];
              for (var i = 0; i < typedArrayByteLength; i++) {
                words[i >>> 2] |= typedArray[i] << 24 - i % 4 * 8;
              }
              superInit.call(this, words, typedArrayByteLength);
            } else {
              superInit.apply(this, arguments);
            }
          };
          subInit.prototype = WordArray;
        })();
        return CryptoJS2.lib.WordArray;
      });
    })(libTypedarrays);
    return libTypedarrays.exports;
  }
  var encUtf16 = { exports: {} };
  var hasRequiredEncUtf16;
  function requireEncUtf16() {
    if (hasRequiredEncUtf16)
      return encUtf16.exports;
    hasRequiredEncUtf16 = 1;
    (function(module, exports) {
      (function(root, factory) {
        {
          module.exports = factory(requireCore());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        (function() {
          var C = CryptoJS2;
          var C_lib = C.lib;
          var WordArray = C_lib.WordArray;
          var C_enc = C.enc;
          C_enc.Utf16 = C_enc.Utf16BE = {
            /**
             * Converts a word array to a UTF-16 BE string.
             *
             * @param {WordArray} wordArray The word array.
             *
             * @return {string} The UTF-16 BE string.
             *
             * @static
             *
             * @example
             *
             *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);
             */
            stringify: function(wordArray) {
              var words = wordArray.words;
              var sigBytes = wordArray.sigBytes;
              var utf16Chars = [];
              for (var i = 0; i < sigBytes; i += 2) {
                var codePoint = words[i >>> 2] >>> 16 - i % 4 * 8 & 65535;
                utf16Chars.push(String.fromCharCode(codePoint));
              }
              return utf16Chars.join("");
            },
            /**
             * Converts a UTF-16 BE string to a word array.
             *
             * @param {string} utf16Str The UTF-16 BE string.
             *
             * @return {WordArray} The word array.
             *
             * @static
             *
             * @example
             *
             *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);
             */
            parse: function(utf16Str) {
              var utf16StrLength = utf16Str.length;
              var words = [];
              for (var i = 0; i < utf16StrLength; i++) {
                words[i >>> 1] |= utf16Str.charCodeAt(i) << 16 - i % 2 * 16;
              }
              return WordArray.create(words, utf16StrLength * 2);
            }
          };
          C_enc.Utf16LE = {
            /**
             * Converts a word array to a UTF-16 LE string.
             *
             * @param {WordArray} wordArray The word array.
             *
             * @return {string} The UTF-16 LE string.
             *
             * @static
             *
             * @example
             *
             *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);
             */
            stringify: function(wordArray) {
              var words = wordArray.words;
              var sigBytes = wordArray.sigBytes;
              var utf16Chars = [];
              for (var i = 0; i < sigBytes; i += 2) {
                var codePoint = swapEndian(words[i >>> 2] >>> 16 - i % 4 * 8 & 65535);
                utf16Chars.push(String.fromCharCode(codePoint));
              }
              return utf16Chars.join("");
            },
            /**
             * Converts a UTF-16 LE string to a word array.
             *
             * @param {string} utf16Str The UTF-16 LE string.
             *
             * @return {WordArray} The word array.
             *
             * @static
             *
             * @example
             *
             *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);
             */
            parse: function(utf16Str) {
              var utf16StrLength = utf16Str.length;
              var words = [];
              for (var i = 0; i < utf16StrLength; i++) {
                words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << 16 - i % 2 * 16);
              }
              return WordArray.create(words, utf16StrLength * 2);
            }
          };
          function swapEndian(word) {
            return word << 8 & 4278255360 | word >>> 8 & 16711935;
          }
        })();
        return CryptoJS2.enc.Utf16;
      });
    })(encUtf16);
    return encUtf16.exports;
  }
  var encBase64 = { exports: {} };
  var hasRequiredEncBase64;
  function requireEncBase64() {
    if (hasRequiredEncBase64)
      return encBase64.exports;
    hasRequiredEncBase64 = 1;
    (function(module, exports) {
      (function(root, factory) {
        {
          module.exports = factory(requireCore());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        (function() {
          var C = CryptoJS2;
          var C_lib = C.lib;
          var WordArray = C_lib.WordArray;
          var C_enc = C.enc;
          C_enc.Base64 = {
            /**
             * Converts a word array to a Base64 string.
             *
             * @param {WordArray} wordArray The word array.
             *
             * @return {string} The Base64 string.
             *
             * @static
             *
             * @example
             *
             *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
             */
            stringify: function(wordArray) {
              var words = wordArray.words;
              var sigBytes = wordArray.sigBytes;
              var map = this._map;
              wordArray.clamp();
              var base64Chars = [];
              for (var i = 0; i < sigBytes; i += 3) {
                var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
                var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 255;
                var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 255;
                var triplet = byte1 << 16 | byte2 << 8 | byte3;
                for (var j = 0; j < 4 && i + j * 0.75 < sigBytes; j++) {
                  base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 63));
                }
              }
              var paddingChar = map.charAt(64);
              if (paddingChar) {
                while (base64Chars.length % 4) {
                  base64Chars.push(paddingChar);
                }
              }
              return base64Chars.join("");
            },
            /**
             * Converts a Base64 string to a word array.
             *
             * @param {string} base64Str The Base64 string.
             *
             * @return {WordArray} The word array.
             *
             * @static
             *
             * @example
             *
             *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
             */
            parse: function(base64Str) {
              var base64StrLength = base64Str.length;
              var map = this._map;
              var reverseMap = this._reverseMap;
              if (!reverseMap) {
                reverseMap = this._reverseMap = [];
                for (var j = 0; j < map.length; j++) {
                  reverseMap[map.charCodeAt(j)] = j;
                }
              }
              var paddingChar = map.charAt(64);
              if (paddingChar) {
                var paddingIndex = base64Str.indexOf(paddingChar);
                if (paddingIndex !== -1) {
                  base64StrLength = paddingIndex;
                }
              }
              return parseLoop(base64Str, base64StrLength, reverseMap);
            },
            _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
          };
          function parseLoop(base64Str, base64StrLength, reverseMap) {
            var words = [];
            var nBytes = 0;
            for (var i = 0; i < base64StrLength; i++) {
              if (i % 4) {
                var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;
                var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;
                words[nBytes >>> 2] |= (bits1 | bits2) << 24 - nBytes % 4 * 8;
                nBytes++;
              }
            }
            return WordArray.create(words, nBytes);
          }
        })();
        return CryptoJS2.enc.Base64;
      });
    })(encBase64);
    return encBase64.exports;
  }
  var md5 = { exports: {} };
  var hasRequiredMd5;
  function requireMd5() {
    if (hasRequiredMd5)
      return md5.exports;
    hasRequiredMd5 = 1;
    (function(module, exports) {
      (function(root, factory) {
        {
          module.exports = factory(requireCore());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        (function(Math2) {
          var C = CryptoJS2;
          var C_lib = C.lib;
          var WordArray = C_lib.WordArray;
          var Hasher = C_lib.Hasher;
          var C_algo = C.algo;
          var T = [];
          (function() {
            for (var i = 0; i < 64; i++) {
              T[i] = Math2.abs(Math2.sin(i + 1)) * 4294967296 | 0;
            }
          })();
          var MD5 = C_algo.MD5 = Hasher.extend({
            _doReset: function() {
              this._hash = new WordArray.init([
                1732584193,
                4023233417,
                2562383102,
                271733878
              ]);
            },
            _doProcessBlock: function(M, offset) {
              for (var i = 0; i < 16; i++) {
                var offset_i = offset + i;
                var M_offset_i = M[offset_i];
                M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 16711935 | (M_offset_i << 24 | M_offset_i >>> 8) & 4278255360;
              }
              var H = this._hash.words;
              var M_offset_0 = M[offset + 0];
              var M_offset_1 = M[offset + 1];
              var M_offset_2 = M[offset + 2];
              var M_offset_3 = M[offset + 3];
              var M_offset_4 = M[offset + 4];
              var M_offset_5 = M[offset + 5];
              var M_offset_6 = M[offset + 6];
              var M_offset_7 = M[offset + 7];
              var M_offset_8 = M[offset + 8];
              var M_offset_9 = M[offset + 9];
              var M_offset_10 = M[offset + 10];
              var M_offset_11 = M[offset + 11];
              var M_offset_12 = M[offset + 12];
              var M_offset_13 = M[offset + 13];
              var M_offset_14 = M[offset + 14];
              var M_offset_15 = M[offset + 15];
              var a = H[0];
              var b = H[1];
              var c = H[2];
              var d = H[3];
              a = FF(a, b, c, d, M_offset_0, 7, T[0]);
              d = FF(d, a, b, c, M_offset_1, 12, T[1]);
              c = FF(c, d, a, b, M_offset_2, 17, T[2]);
              b = FF(b, c, d, a, M_offset_3, 22, T[3]);
              a = FF(a, b, c, d, M_offset_4, 7, T[4]);
              d = FF(d, a, b, c, M_offset_5, 12, T[5]);
              c = FF(c, d, a, b, M_offset_6, 17, T[6]);
              b = FF(b, c, d, a, M_offset_7, 22, T[7]);
              a = FF(a, b, c, d, M_offset_8, 7, T[8]);
              d = FF(d, a, b, c, M_offset_9, 12, T[9]);
              c = FF(c, d, a, b, M_offset_10, 17, T[10]);
              b = FF(b, c, d, a, M_offset_11, 22, T[11]);
              a = FF(a, b, c, d, M_offset_12, 7, T[12]);
              d = FF(d, a, b, c, M_offset_13, 12, T[13]);
              c = FF(c, d, a, b, M_offset_14, 17, T[14]);
              b = FF(b, c, d, a, M_offset_15, 22, T[15]);
              a = GG(a, b, c, d, M_offset_1, 5, T[16]);
              d = GG(d, a, b, c, M_offset_6, 9, T[17]);
              c = GG(c, d, a, b, M_offset_11, 14, T[18]);
              b = GG(b, c, d, a, M_offset_0, 20, T[19]);
              a = GG(a, b, c, d, M_offset_5, 5, T[20]);
              d = GG(d, a, b, c, M_offset_10, 9, T[21]);
              c = GG(c, d, a, b, M_offset_15, 14, T[22]);
              b = GG(b, c, d, a, M_offset_4, 20, T[23]);
              a = GG(a, b, c, d, M_offset_9, 5, T[24]);
              d = GG(d, a, b, c, M_offset_14, 9, T[25]);
              c = GG(c, d, a, b, M_offset_3, 14, T[26]);
              b = GG(b, c, d, a, M_offset_8, 20, T[27]);
              a = GG(a, b, c, d, M_offset_13, 5, T[28]);
              d = GG(d, a, b, c, M_offset_2, 9, T[29]);
              c = GG(c, d, a, b, M_offset_7, 14, T[30]);
              b = GG(b, c, d, a, M_offset_12, 20, T[31]);
              a = HH(a, b, c, d, M_offset_5, 4, T[32]);
              d = HH(d, a, b, c, M_offset_8, 11, T[33]);
              c = HH(c, d, a, b, M_offset_11, 16, T[34]);
              b = HH(b, c, d, a, M_offset_14, 23, T[35]);
              a = HH(a, b, c, d, M_offset_1, 4, T[36]);
              d = HH(d, a, b, c, M_offset_4, 11, T[37]);
              c = HH(c, d, a, b, M_offset_7, 16, T[38]);
              b = HH(b, c, d, a, M_offset_10, 23, T[39]);
              a = HH(a, b, c, d, M_offset_13, 4, T[40]);
              d = HH(d, a, b, c, M_offset_0, 11, T[41]);
              c = HH(c, d, a, b, M_offset_3, 16, T[42]);
              b = HH(b, c, d, a, M_offset_6, 23, T[43]);
              a = HH(a, b, c, d, M_offset_9, 4, T[44]);
              d = HH(d, a, b, c, M_offset_12, 11, T[45]);
              c = HH(c, d, a, b, M_offset_15, 16, T[46]);
              b = HH(b, c, d, a, M_offset_2, 23, T[47]);
              a = II(a, b, c, d, M_offset_0, 6, T[48]);
              d = II(d, a, b, c, M_offset_7, 10, T[49]);
              c = II(c, d, a, b, M_offset_14, 15, T[50]);
              b = II(b, c, d, a, M_offset_5, 21, T[51]);
              a = II(a, b, c, d, M_offset_12, 6, T[52]);
              d = II(d, a, b, c, M_offset_3, 10, T[53]);
              c = II(c, d, a, b, M_offset_10, 15, T[54]);
              b = II(b, c, d, a, M_offset_1, 21, T[55]);
              a = II(a, b, c, d, M_offset_8, 6, T[56]);
              d = II(d, a, b, c, M_offset_15, 10, T[57]);
              c = II(c, d, a, b, M_offset_6, 15, T[58]);
              b = II(b, c, d, a, M_offset_13, 21, T[59]);
              a = II(a, b, c, d, M_offset_4, 6, T[60]);
              d = II(d, a, b, c, M_offset_11, 10, T[61]);
              c = II(c, d, a, b, M_offset_2, 15, T[62]);
              b = II(b, c, d, a, M_offset_9, 21, T[63]);
              H[0] = H[0] + a | 0;
              H[1] = H[1] + b | 0;
              H[2] = H[2] + c | 0;
              H[3] = H[3] + d | 0;
            },
            _doFinalize: function() {
              var data = this._data;
              var dataWords = data.words;
              var nBitsTotal = this._nDataBytes * 8;
              var nBitsLeft = data.sigBytes * 8;
              dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
              var nBitsTotalH = Math2.floor(nBitsTotal / 4294967296);
              var nBitsTotalL = nBitsTotal;
              dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = (nBitsTotalH << 8 | nBitsTotalH >>> 24) & 16711935 | (nBitsTotalH << 24 | nBitsTotalH >>> 8) & 4278255360;
              dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotalL << 8 | nBitsTotalL >>> 24) & 16711935 | (nBitsTotalL << 24 | nBitsTotalL >>> 8) & 4278255360;
              data.sigBytes = (dataWords.length + 1) * 4;
              this._process();
              var hash = this._hash;
              var H = hash.words;
              for (var i = 0; i < 4; i++) {
                var H_i = H[i];
                H[i] = (H_i << 8 | H_i >>> 24) & 16711935 | (H_i << 24 | H_i >>> 8) & 4278255360;
              }
              return hash;
            },
            clone: function() {
              var clone = Hasher.clone.call(this);
              clone._hash = this._hash.clone();
              return clone;
            }
          });
          function FF(a, b, c, d, x, s, t) {
            var n = a + (b & c | ~b & d) + x + t;
            return (n << s | n >>> 32 - s) + b;
          }
          function GG(a, b, c, d, x, s, t) {
            var n = a + (b & d | c & ~d) + x + t;
            return (n << s | n >>> 32 - s) + b;
          }
          function HH(a, b, c, d, x, s, t) {
            var n = a + (b ^ c ^ d) + x + t;
            return (n << s | n >>> 32 - s) + b;
          }
          function II(a, b, c, d, x, s, t) {
            var n = a + (c ^ (b | ~d)) + x + t;
            return (n << s | n >>> 32 - s) + b;
          }
          C.MD5 = Hasher._createHelper(MD5);
          C.HmacMD5 = Hasher._createHmacHelper(MD5);
        })(Math);
        return CryptoJS2.MD5;
      });
    })(md5);
    return md5.exports;
  }
  var sha1 = { exports: {} };
  var hasRequiredSha1;
  function requireSha1() {
    if (hasRequiredSha1)
      return sha1.exports;
    hasRequiredSha1 = 1;
    (function(module, exports) {
      (function(root, factory) {
        {
          module.exports = factory(requireCore());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        (function() {
          var C = CryptoJS2;
          var C_lib = C.lib;
          var WordArray = C_lib.WordArray;
          var Hasher = C_lib.Hasher;
          var C_algo = C.algo;
          var W = [];
          var SHA1 = C_algo.SHA1 = Hasher.extend({
            _doReset: function() {
              this._hash = new WordArray.init([
                1732584193,
                4023233417,
                2562383102,
                271733878,
                3285377520
              ]);
            },
            _doProcessBlock: function(M, offset) {
              var H = this._hash.words;
              var a = H[0];
              var b = H[1];
              var c = H[2];
              var d = H[3];
              var e = H[4];
              for (var i = 0; i < 80; i++) {
                if (i < 16) {
                  W[i] = M[offset + i] | 0;
                } else {
                  var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
                  W[i] = n << 1 | n >>> 31;
                }
                var t = (a << 5 | a >>> 27) + e + W[i];
                if (i < 20) {
                  t += (b & c | ~b & d) + 1518500249;
                } else if (i < 40) {
                  t += (b ^ c ^ d) + 1859775393;
                } else if (i < 60) {
                  t += (b & c | b & d | c & d) - 1894007588;
                } else {
                  t += (b ^ c ^ d) - 899497514;
                }
                e = d;
                d = c;
                c = b << 30 | b >>> 2;
                b = a;
                a = t;
              }
              H[0] = H[0] + a | 0;
              H[1] = H[1] + b | 0;
              H[2] = H[2] + c | 0;
              H[3] = H[3] + d | 0;
              H[4] = H[4] + e | 0;
            },
            _doFinalize: function() {
              var data = this._data;
              var dataWords = data.words;
              var nBitsTotal = this._nDataBytes * 8;
              var nBitsLeft = data.sigBytes * 8;
              dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
              dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 4294967296);
              dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
              data.sigBytes = dataWords.length * 4;
              this._process();
              return this._hash;
            },
            clone: function() {
              var clone = Hasher.clone.call(this);
              clone._hash = this._hash.clone();
              return clone;
            }
          });
          C.SHA1 = Hasher._createHelper(SHA1);
          C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
        })();
        return CryptoJS2.SHA1;
      });
    })(sha1);
    return sha1.exports;
  }
  var sha256 = { exports: {} };
  var hasRequiredSha256;
  function requireSha256() {
    if (hasRequiredSha256)
      return sha256.exports;
    hasRequiredSha256 = 1;
    (function(module, exports) {
      (function(root, factory) {
        {
          module.exports = factory(requireCore());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        (function(Math2) {
          var C = CryptoJS2;
          var C_lib = C.lib;
          var WordArray = C_lib.WordArray;
          var Hasher = C_lib.Hasher;
          var C_algo = C.algo;
          var H = [];
          var K = [];
          (function() {
            function isPrime(n2) {
              var sqrtN = Math2.sqrt(n2);
              for (var factor = 2; factor <= sqrtN; factor++) {
                if (!(n2 % factor)) {
                  return false;
                }
              }
              return true;
            }
            function getFractionalBits(n2) {
              return (n2 - (n2 | 0)) * 4294967296 | 0;
            }
            var n = 2;
            var nPrime = 0;
            while (nPrime < 64) {
              if (isPrime(n)) {
                if (nPrime < 8) {
                  H[nPrime] = getFractionalBits(Math2.pow(n, 1 / 2));
                }
                K[nPrime] = getFractionalBits(Math2.pow(n, 1 / 3));
                nPrime++;
              }
              n++;
            }
          })();
          var W = [];
          var SHA256 = C_algo.SHA256 = Hasher.extend({
            _doReset: function() {
              this._hash = new WordArray.init(H.slice(0));
            },
            _doProcessBlock: function(M, offset) {
              var H2 = this._hash.words;
              var a = H2[0];
              var b = H2[1];
              var c = H2[2];
              var d = H2[3];
              var e = H2[4];
              var f = H2[5];
              var g = H2[6];
              var h = H2[7];
              for (var i = 0; i < 64; i++) {
                if (i < 16) {
                  W[i] = M[offset + i] | 0;
                } else {
                  var gamma0x = W[i - 15];
                  var gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;
                  var gamma1x = W[i - 2];
                  var gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;
                  W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
                }
                var ch = e & f ^ ~e & g;
                var maj = a & b ^ a & c ^ b & c;
                var sigma0 = (a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22);
                var sigma1 = (e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25);
                var t1 = h + sigma1 + ch + K[i] + W[i];
                var t2 = sigma0 + maj;
                h = g;
                g = f;
                f = e;
                e = d + t1 | 0;
                d = c;
                c = b;
                b = a;
                a = t1 + t2 | 0;
              }
              H2[0] = H2[0] + a | 0;
              H2[1] = H2[1] + b | 0;
              H2[2] = H2[2] + c | 0;
              H2[3] = H2[3] + d | 0;
              H2[4] = H2[4] + e | 0;
              H2[5] = H2[5] + f | 0;
              H2[6] = H2[6] + g | 0;
              H2[7] = H2[7] + h | 0;
            },
            _doFinalize: function() {
              var data = this._data;
              var dataWords = data.words;
              var nBitsTotal = this._nDataBytes * 8;
              var nBitsLeft = data.sigBytes * 8;
              dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
              dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math2.floor(nBitsTotal / 4294967296);
              dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
              data.sigBytes = dataWords.length * 4;
              this._process();
              return this._hash;
            },
            clone: function() {
              var clone = Hasher.clone.call(this);
              clone._hash = this._hash.clone();
              return clone;
            }
          });
          C.SHA256 = Hasher._createHelper(SHA256);
          C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
        })(Math);
        return CryptoJS2.SHA256;
      });
    })(sha256);
    return sha256.exports;
  }
  var sha224 = { exports: {} };
  var hasRequiredSha224;
  function requireSha224() {
    if (hasRequiredSha224)
      return sha224.exports;
    hasRequiredSha224 = 1;
    (function(module, exports) {
      (function(root, factory, undef) {
        {
          module.exports = factory(requireCore(), requireSha256());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        (function() {
          var C = CryptoJS2;
          var C_lib = C.lib;
          var WordArray = C_lib.WordArray;
          var C_algo = C.algo;
          var SHA256 = C_algo.SHA256;
          var SHA224 = C_algo.SHA224 = SHA256.extend({
            _doReset: function() {
              this._hash = new WordArray.init([
                3238371032,
                914150663,
                812702999,
                4144912697,
                4290775857,
                1750603025,
                1694076839,
                3204075428
              ]);
            },
            _doFinalize: function() {
              var hash = SHA256._doFinalize.call(this);
              hash.sigBytes -= 4;
              return hash;
            }
          });
          C.SHA224 = SHA256._createHelper(SHA224);
          C.HmacSHA224 = SHA256._createHmacHelper(SHA224);
        })();
        return CryptoJS2.SHA224;
      });
    })(sha224);
    return sha224.exports;
  }
  var sha512 = { exports: {} };
  var hasRequiredSha512;
  function requireSha512() {
    if (hasRequiredSha512)
      return sha512.exports;
    hasRequiredSha512 = 1;
    (function(module, exports) {
      (function(root, factory, undef) {
        {
          module.exports = factory(requireCore(), requireX64Core());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        (function() {
          var C = CryptoJS2;
          var C_lib = C.lib;
          var Hasher = C_lib.Hasher;
          var C_x64 = C.x64;
          var X64Word = C_x64.Word;
          var X64WordArray = C_x64.WordArray;
          var C_algo = C.algo;
          function X64Word_create() {
            return X64Word.create.apply(X64Word, arguments);
          }
          var K = [
            X64Word_create(1116352408, 3609767458),
            X64Word_create(1899447441, 602891725),
            X64Word_create(3049323471, 3964484399),
            X64Word_create(3921009573, 2173295548),
            X64Word_create(961987163, 4081628472),
            X64Word_create(1508970993, 3053834265),
            X64Word_create(2453635748, 2937671579),
            X64Word_create(2870763221, 3664609560),
            X64Word_create(3624381080, 2734883394),
            X64Word_create(310598401, 1164996542),
            X64Word_create(607225278, 1323610764),
            X64Word_create(1426881987, 3590304994),
            X64Word_create(1925078388, 4068182383),
            X64Word_create(2162078206, 991336113),
            X64Word_create(2614888103, 633803317),
            X64Word_create(3248222580, 3479774868),
            X64Word_create(3835390401, 2666613458),
            X64Word_create(4022224774, 944711139),
            X64Word_create(264347078, 2341262773),
            X64Word_create(604807628, 2007800933),
            X64Word_create(770255983, 1495990901),
            X64Word_create(1249150122, 1856431235),
            X64Word_create(1555081692, 3175218132),
            X64Word_create(1996064986, 2198950837),
            X64Word_create(2554220882, 3999719339),
            X64Word_create(2821834349, 766784016),
            X64Word_create(2952996808, 2566594879),
            X64Word_create(3210313671, 3203337956),
            X64Word_create(3336571891, 1034457026),
            X64Word_create(3584528711, 2466948901),
            X64Word_create(113926993, 3758326383),
            X64Word_create(338241895, 168717936),
            X64Word_create(666307205, 1188179964),
            X64Word_create(773529912, 1546045734),
            X64Word_create(1294757372, 1522805485),
            X64Word_create(1396182291, 2643833823),
            X64Word_create(1695183700, 2343527390),
            X64Word_create(1986661051, 1014477480),
            X64Word_create(2177026350, 1206759142),
            X64Word_create(2456956037, 344077627),
            X64Word_create(2730485921, 1290863460),
            X64Word_create(2820302411, 3158454273),
            X64Word_create(3259730800, 3505952657),
            X64Word_create(3345764771, 106217008),
            X64Word_create(3516065817, 3606008344),
            X64Word_create(3600352804, 1432725776),
            X64Word_create(4094571909, 1467031594),
            X64Word_create(275423344, 851169720),
            X64Word_create(430227734, 3100823752),
            X64Word_create(506948616, 1363258195),
            X64Word_create(659060556, 3750685593),
            X64Word_create(883997877, 3785050280),
            X64Word_create(958139571, 3318307427),
            X64Word_create(1322822218, 3812723403),
            X64Word_create(1537002063, 2003034995),
            X64Word_create(1747873779, 3602036899),
            X64Word_create(1955562222, 1575990012),
            X64Word_create(2024104815, 1125592928),
            X64Word_create(2227730452, 2716904306),
            X64Word_create(2361852424, 442776044),
            X64Word_create(2428436474, 593698344),
            X64Word_create(2756734187, 3733110249),
            X64Word_create(3204031479, 2999351573),
            X64Word_create(3329325298, 3815920427),
            X64Word_create(3391569614, 3928383900),
            X64Word_create(3515267271, 566280711),
            X64Word_create(3940187606, 3454069534),
            X64Word_create(4118630271, 4000239992),
            X64Word_create(116418474, 1914138554),
            X64Word_create(174292421, 2731055270),
            X64Word_create(289380356, 3203993006),
            X64Word_create(460393269, 320620315),
            X64Word_create(685471733, 587496836),
            X64Word_create(852142971, 1086792851),
            X64Word_create(1017036298, 365543100),
            X64Word_create(1126000580, 2618297676),
            X64Word_create(1288033470, 3409855158),
            X64Word_create(1501505948, 4234509866),
            X64Word_create(1607167915, 987167468),
            X64Word_create(1816402316, 1246189591)
          ];
          var W = [];
          (function() {
            for (var i = 0; i < 80; i++) {
              W[i] = X64Word_create();
            }
          })();
          var SHA512 = C_algo.SHA512 = Hasher.extend({
            _doReset: function() {
              this._hash = new X64WordArray.init([
                new X64Word.init(1779033703, 4089235720),
                new X64Word.init(3144134277, 2227873595),
                new X64Word.init(1013904242, 4271175723),
                new X64Word.init(2773480762, 1595750129),
                new X64Word.init(1359893119, 2917565137),
                new X64Word.init(2600822924, 725511199),
                new X64Word.init(528734635, 4215389547),
                new X64Word.init(1541459225, 327033209)
              ]);
            },
            _doProcessBlock: function(M, offset) {
              var H = this._hash.words;
              var H0 = H[0];
              var H1 = H[1];
              var H2 = H[2];
              var H3 = H[3];
              var H4 = H[4];
              var H5 = H[5];
              var H6 = H[6];
              var H7 = H[7];
              var H0h = H0.high;
              var H0l = H0.low;
              var H1h = H1.high;
              var H1l = H1.low;
              var H2h = H2.high;
              var H2l = H2.low;
              var H3h = H3.high;
              var H3l = H3.low;
              var H4h = H4.high;
              var H4l = H4.low;
              var H5h = H5.high;
              var H5l = H5.low;
              var H6h = H6.high;
              var H6l = H6.low;
              var H7h = H7.high;
              var H7l = H7.low;
              var ah = H0h;
              var al = H0l;
              var bh = H1h;
              var bl = H1l;
              var ch = H2h;
              var cl = H2l;
              var dh = H3h;
              var dl = H3l;
              var eh = H4h;
              var el = H4l;
              var fh = H5h;
              var fl = H5l;
              var gh = H6h;
              var gl = H6l;
              var hh = H7h;
              var hl = H7l;
              for (var i = 0; i < 80; i++) {
                var Wi = W[i];
                if (i < 16) {
                  var Wih = Wi.high = M[offset + i * 2] | 0;
                  var Wil = Wi.low = M[offset + i * 2 + 1] | 0;
                } else {
                  var gamma0x = W[i - 15];
                  var gamma0xh = gamma0x.high;
                  var gamma0xl = gamma0x.low;
                  var gamma0h = (gamma0xh >>> 1 | gamma0xl << 31) ^ (gamma0xh >>> 8 | gamma0xl << 24) ^ gamma0xh >>> 7;
                  var gamma0l = (gamma0xl >>> 1 | gamma0xh << 31) ^ (gamma0xl >>> 8 | gamma0xh << 24) ^ (gamma0xl >>> 7 | gamma0xh << 25);
                  var gamma1x = W[i - 2];
                  var gamma1xh = gamma1x.high;
                  var gamma1xl = gamma1x.low;
                  var gamma1h = (gamma1xh >>> 19 | gamma1xl << 13) ^ (gamma1xh << 3 | gamma1xl >>> 29) ^ gamma1xh >>> 6;
                  var gamma1l = (gamma1xl >>> 19 | gamma1xh << 13) ^ (gamma1xl << 3 | gamma1xh >>> 29) ^ (gamma1xl >>> 6 | gamma1xh << 26);
                  var Wi7 = W[i - 7];
                  var Wi7h = Wi7.high;
                  var Wi7l = Wi7.low;
                  var Wi16 = W[i - 16];
                  var Wi16h = Wi16.high;
                  var Wi16l = Wi16.low;
                  var Wil = gamma0l + Wi7l;
                  var Wih = gamma0h + Wi7h + (Wil >>> 0 < gamma0l >>> 0 ? 1 : 0);
                  var Wil = Wil + gamma1l;
                  var Wih = Wih + gamma1h + (Wil >>> 0 < gamma1l >>> 0 ? 1 : 0);
                  var Wil = Wil + Wi16l;
                  var Wih = Wih + Wi16h + (Wil >>> 0 < Wi16l >>> 0 ? 1 : 0);
                  Wi.high = Wih;
                  Wi.low = Wil;
                }
                var chh = eh & fh ^ ~eh & gh;
                var chl = el & fl ^ ~el & gl;
                var majh = ah & bh ^ ah & ch ^ bh & ch;
                var majl = al & bl ^ al & cl ^ bl & cl;
                var sigma0h = (ah >>> 28 | al << 4) ^ (ah << 30 | al >>> 2) ^ (ah << 25 | al >>> 7);
                var sigma0l = (al >>> 28 | ah << 4) ^ (al << 30 | ah >>> 2) ^ (al << 25 | ah >>> 7);
                var sigma1h = (eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9);
                var sigma1l = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9);
                var Ki = K[i];
                var Kih = Ki.high;
                var Kil = Ki.low;
                var t1l = hl + sigma1l;
                var t1h = hh + sigma1h + (t1l >>> 0 < hl >>> 0 ? 1 : 0);
                var t1l = t1l + chl;
                var t1h = t1h + chh + (t1l >>> 0 < chl >>> 0 ? 1 : 0);
                var t1l = t1l + Kil;
                var t1h = t1h + Kih + (t1l >>> 0 < Kil >>> 0 ? 1 : 0);
                var t1l = t1l + Wil;
                var t1h = t1h + Wih + (t1l >>> 0 < Wil >>> 0 ? 1 : 0);
                var t2l = sigma0l + majl;
                var t2h = sigma0h + majh + (t2l >>> 0 < sigma0l >>> 0 ? 1 : 0);
                hh = gh;
                hl = gl;
                gh = fh;
                gl = fl;
                fh = eh;
                fl = el;
                el = dl + t1l | 0;
                eh = dh + t1h + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
                dh = ch;
                dl = cl;
                ch = bh;
                cl = bl;
                bh = ah;
                bl = al;
                al = t1l + t2l | 0;
                ah = t1h + t2h + (al >>> 0 < t1l >>> 0 ? 1 : 0) | 0;
              }
              H0l = H0.low = H0l + al;
              H0.high = H0h + ah + (H0l >>> 0 < al >>> 0 ? 1 : 0);
              H1l = H1.low = H1l + bl;
              H1.high = H1h + bh + (H1l >>> 0 < bl >>> 0 ? 1 : 0);
              H2l = H2.low = H2l + cl;
              H2.high = H2h + ch + (H2l >>> 0 < cl >>> 0 ? 1 : 0);
              H3l = H3.low = H3l + dl;
              H3.high = H3h + dh + (H3l >>> 0 < dl >>> 0 ? 1 : 0);
              H4l = H4.low = H4l + el;
              H4.high = H4h + eh + (H4l >>> 0 < el >>> 0 ? 1 : 0);
              H5l = H5.low = H5l + fl;
              H5.high = H5h + fh + (H5l >>> 0 < fl >>> 0 ? 1 : 0);
              H6l = H6.low = H6l + gl;
              H6.high = H6h + gh + (H6l >>> 0 < gl >>> 0 ? 1 : 0);
              H7l = H7.low = H7l + hl;
              H7.high = H7h + hh + (H7l >>> 0 < hl >>> 0 ? 1 : 0);
            },
            _doFinalize: function() {
              var data = this._data;
              var dataWords = data.words;
              var nBitsTotal = this._nDataBytes * 8;
              var nBitsLeft = data.sigBytes * 8;
              dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
              dataWords[(nBitsLeft + 128 >>> 10 << 5) + 30] = Math.floor(nBitsTotal / 4294967296);
              dataWords[(nBitsLeft + 128 >>> 10 << 5) + 31] = nBitsTotal;
              data.sigBytes = dataWords.length * 4;
              this._process();
              var hash = this._hash.toX32();
              return hash;
            },
            clone: function() {
              var clone = Hasher.clone.call(this);
              clone._hash = this._hash.clone();
              return clone;
            },
            blockSize: 1024 / 32
          });
          C.SHA512 = Hasher._createHelper(SHA512);
          C.HmacSHA512 = Hasher._createHmacHelper(SHA512);
        })();
        return CryptoJS2.SHA512;
      });
    })(sha512);
    return sha512.exports;
  }
  var sha384 = { exports: {} };
  var hasRequiredSha384;
  function requireSha384() {
    if (hasRequiredSha384)
      return sha384.exports;
    hasRequiredSha384 = 1;
    (function(module, exports) {
      (function(root, factory, undef) {
        {
          module.exports = factory(requireCore(), requireX64Core(), requireSha512());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        (function() {
          var C = CryptoJS2;
          var C_x64 = C.x64;
          var X64Word = C_x64.Word;
          var X64WordArray = C_x64.WordArray;
          var C_algo = C.algo;
          var SHA512 = C_algo.SHA512;
          var SHA384 = C_algo.SHA384 = SHA512.extend({
            _doReset: function() {
              this._hash = new X64WordArray.init([
                new X64Word.init(3418070365, 3238371032),
                new X64Word.init(1654270250, 914150663),
                new X64Word.init(2438529370, 812702999),
                new X64Word.init(355462360, 4144912697),
                new X64Word.init(1731405415, 4290775857),
                new X64Word.init(2394180231, 1750603025),
                new X64Word.init(3675008525, 1694076839),
                new X64Word.init(1203062813, 3204075428)
              ]);
            },
            _doFinalize: function() {
              var hash = SHA512._doFinalize.call(this);
              hash.sigBytes -= 16;
              return hash;
            }
          });
          C.SHA384 = SHA512._createHelper(SHA384);
          C.HmacSHA384 = SHA512._createHmacHelper(SHA384);
        })();
        return CryptoJS2.SHA384;
      });
    })(sha384);
    return sha384.exports;
  }
  var sha3 = { exports: {} };
  var hasRequiredSha3;
  function requireSha3() {
    if (hasRequiredSha3)
      return sha3.exports;
    hasRequiredSha3 = 1;
    (function(module, exports) {
      (function(root, factory, undef) {
        {
          module.exports = factory(requireCore(), requireX64Core());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        (function(Math2) {
          var C = CryptoJS2;
          var C_lib = C.lib;
          var WordArray = C_lib.WordArray;
          var Hasher = C_lib.Hasher;
          var C_x64 = C.x64;
          var X64Word = C_x64.Word;
          var C_algo = C.algo;
          var RHO_OFFSETS = [];
          var PI_INDEXES = [];
          var ROUND_CONSTANTS = [];
          (function() {
            var x = 1, y = 0;
            for (var t = 0; t < 24; t++) {
              RHO_OFFSETS[x + 5 * y] = (t + 1) * (t + 2) / 2 % 64;
              var newX = y % 5;
              var newY = (2 * x + 3 * y) % 5;
              x = newX;
              y = newY;
            }
            for (var x = 0; x < 5; x++) {
              for (var y = 0; y < 5; y++) {
                PI_INDEXES[x + 5 * y] = y + (2 * x + 3 * y) % 5 * 5;
              }
            }
            var LFSR = 1;
            for (var i = 0; i < 24; i++) {
              var roundConstantMsw = 0;
              var roundConstantLsw = 0;
              for (var j = 0; j < 7; j++) {
                if (LFSR & 1) {
                  var bitPosition = (1 << j) - 1;
                  if (bitPosition < 32) {
                    roundConstantLsw ^= 1 << bitPosition;
                  } else {
                    roundConstantMsw ^= 1 << bitPosition - 32;
                  }
                }
                if (LFSR & 128) {
                  LFSR = LFSR << 1 ^ 113;
                } else {
                  LFSR <<= 1;
                }
              }
              ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);
            }
          })();
          var T = [];
          (function() {
            for (var i = 0; i < 25; i++) {
              T[i] = X64Word.create();
            }
          })();
          var SHA3 = C_algo.SHA3 = Hasher.extend({
            /**
             * Configuration options.
             *
             * @property {number} outputLength
             *   The desired number of bits in the output hash.
             *   Only values permitted are: 224, 256, 384, 512.
             *   Default: 512
             */
            cfg: Hasher.cfg.extend({
              outputLength: 512
            }),
            _doReset: function() {
              var state = this._state = [];
              for (var i = 0; i < 25; i++) {
                state[i] = new X64Word.init();
              }
              this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
            },
            _doProcessBlock: function(M, offset) {
              var state = this._state;
              var nBlockSizeLanes = this.blockSize / 2;
              for (var i = 0; i < nBlockSizeLanes; i++) {
                var M2i = M[offset + 2 * i];
                var M2i1 = M[offset + 2 * i + 1];
                M2i = (M2i << 8 | M2i >>> 24) & 16711935 | (M2i << 24 | M2i >>> 8) & 4278255360;
                M2i1 = (M2i1 << 8 | M2i1 >>> 24) & 16711935 | (M2i1 << 24 | M2i1 >>> 8) & 4278255360;
                var lane = state[i];
                lane.high ^= M2i1;
                lane.low ^= M2i;
              }
              for (var round = 0; round < 24; round++) {
                for (var x = 0; x < 5; x++) {
                  var tMsw = 0, tLsw = 0;
                  for (var y = 0; y < 5; y++) {
                    var lane = state[x + 5 * y];
                    tMsw ^= lane.high;
                    tLsw ^= lane.low;
                  }
                  var Tx = T[x];
                  Tx.high = tMsw;
                  Tx.low = tLsw;
                }
                for (var x = 0; x < 5; x++) {
                  var Tx4 = T[(x + 4) % 5];
                  var Tx1 = T[(x + 1) % 5];
                  var Tx1Msw = Tx1.high;
                  var Tx1Lsw = Tx1.low;
                  var tMsw = Tx4.high ^ (Tx1Msw << 1 | Tx1Lsw >>> 31);
                  var tLsw = Tx4.low ^ (Tx1Lsw << 1 | Tx1Msw >>> 31);
                  for (var y = 0; y < 5; y++) {
                    var lane = state[x + 5 * y];
                    lane.high ^= tMsw;
                    lane.low ^= tLsw;
                  }
                }
                for (var laneIndex = 1; laneIndex < 25; laneIndex++) {
                  var lane = state[laneIndex];
                  var laneMsw = lane.high;
                  var laneLsw = lane.low;
                  var rhoOffset = RHO_OFFSETS[laneIndex];
                  if (rhoOffset < 32) {
                    var tMsw = laneMsw << rhoOffset | laneLsw >>> 32 - rhoOffset;
                    var tLsw = laneLsw << rhoOffset | laneMsw >>> 32 - rhoOffset;
                  } else {
                    var tMsw = laneLsw << rhoOffset - 32 | laneMsw >>> 64 - rhoOffset;
                    var tLsw = laneMsw << rhoOffset - 32 | laneLsw >>> 64 - rhoOffset;
                  }
                  var TPiLane = T[PI_INDEXES[laneIndex]];
                  TPiLane.high = tMsw;
                  TPiLane.low = tLsw;
                }
                var T0 = T[0];
                var state0 = state[0];
                T0.high = state0.high;
                T0.low = state0.low;
                for (var x = 0; x < 5; x++) {
                  for (var y = 0; y < 5; y++) {
                    var laneIndex = x + 5 * y;
                    var lane = state[laneIndex];
                    var TLane = T[laneIndex];
                    var Tx1Lane = T[(x + 1) % 5 + 5 * y];
                    var Tx2Lane = T[(x + 2) % 5 + 5 * y];
                    lane.high = TLane.high ^ ~Tx1Lane.high & Tx2Lane.high;
                    lane.low = TLane.low ^ ~Tx1Lane.low & Tx2Lane.low;
                  }
                }
                var lane = state[0];
                var roundConstant = ROUND_CONSTANTS[round];
                lane.high ^= roundConstant.high;
                lane.low ^= roundConstant.low;
              }
            },
            _doFinalize: function() {
              var data = this._data;
              var dataWords = data.words;
              this._nDataBytes * 8;
              var nBitsLeft = data.sigBytes * 8;
              var blockSizeBits = this.blockSize * 32;
              dataWords[nBitsLeft >>> 5] |= 1 << 24 - nBitsLeft % 32;
              dataWords[(Math2.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits >>> 5) - 1] |= 128;
              data.sigBytes = dataWords.length * 4;
              this._process();
              var state = this._state;
              var outputLengthBytes = this.cfg.outputLength / 8;
              var outputLengthLanes = outputLengthBytes / 8;
              var hashWords = [];
              for (var i = 0; i < outputLengthLanes; i++) {
                var lane = state[i];
                var laneMsw = lane.high;
                var laneLsw = lane.low;
                laneMsw = (laneMsw << 8 | laneMsw >>> 24) & 16711935 | (laneMsw << 24 | laneMsw >>> 8) & 4278255360;
                laneLsw = (laneLsw << 8 | laneLsw >>> 24) & 16711935 | (laneLsw << 24 | laneLsw >>> 8) & 4278255360;
                hashWords.push(laneLsw);
                hashWords.push(laneMsw);
              }
              return new WordArray.init(hashWords, outputLengthBytes);
            },
            clone: function() {
              var clone = Hasher.clone.call(this);
              var state = clone._state = this._state.slice(0);
              for (var i = 0; i < 25; i++) {
                state[i] = state[i].clone();
              }
              return clone;
            }
          });
          C.SHA3 = Hasher._createHelper(SHA3);
          C.HmacSHA3 = Hasher._createHmacHelper(SHA3);
        })(Math);
        return CryptoJS2.SHA3;
      });
    })(sha3);
    return sha3.exports;
  }
  var ripemd160 = { exports: {} };
  var hasRequiredRipemd160;
  function requireRipemd160() {
    if (hasRequiredRipemd160)
      return ripemd160.exports;
    hasRequiredRipemd160 = 1;
    (function(module, exports) {
      (function(root, factory) {
        {
          module.exports = factory(requireCore());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        /** @preserve
          			(c) 2012 by Cédric Mesnil. All rights reserved.
        
          			Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
        
          			    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
          			    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
        
          			THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
          			*/
        (function(Math2) {
          var C = CryptoJS2;
          var C_lib = C.lib;
          var WordArray = C_lib.WordArray;
          var Hasher = C_lib.Hasher;
          var C_algo = C.algo;
          var _zl = WordArray.create([
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            7,
            4,
            13,
            1,
            10,
            6,
            15,
            3,
            12,
            0,
            9,
            5,
            2,
            14,
            11,
            8,
            3,
            10,
            14,
            4,
            9,
            15,
            8,
            1,
            2,
            7,
            0,
            6,
            13,
            11,
            5,
            12,
            1,
            9,
            11,
            10,
            0,
            8,
            12,
            4,
            13,
            3,
            7,
            15,
            14,
            5,
            6,
            2,
            4,
            0,
            5,
            9,
            7,
            12,
            2,
            10,
            14,
            1,
            3,
            8,
            11,
            6,
            15,
            13
          ]);
          var _zr = WordArray.create([
            5,
            14,
            7,
            0,
            9,
            2,
            11,
            4,
            13,
            6,
            15,
            8,
            1,
            10,
            3,
            12,
            6,
            11,
            3,
            7,
            0,
            13,
            5,
            10,
            14,
            15,
            8,
            12,
            4,
            9,
            1,
            2,
            15,
            5,
            1,
            3,
            7,
            14,
            6,
            9,
            11,
            8,
            12,
            2,
            10,
            0,
            4,
            13,
            8,
            6,
            4,
            1,
            3,
            11,
            15,
            0,
            5,
            12,
            2,
            13,
            9,
            7,
            10,
            14,
            12,
            15,
            10,
            4,
            1,
            5,
            8,
            7,
            6,
            2,
            13,
            14,
            0,
            3,
            9,
            11
          ]);
          var _sl = WordArray.create([
            11,
            14,
            15,
            12,
            5,
            8,
            7,
            9,
            11,
            13,
            14,
            15,
            6,
            7,
            9,
            8,
            7,
            6,
            8,
            13,
            11,
            9,
            7,
            15,
            7,
            12,
            15,
            9,
            11,
            7,
            13,
            12,
            11,
            13,
            6,
            7,
            14,
            9,
            13,
            15,
            14,
            8,
            13,
            6,
            5,
            12,
            7,
            5,
            11,
            12,
            14,
            15,
            14,
            15,
            9,
            8,
            9,
            14,
            5,
            6,
            8,
            6,
            5,
            12,
            9,
            15,
            5,
            11,
            6,
            8,
            13,
            12,
            5,
            12,
            13,
            14,
            11,
            8,
            5,
            6
          ]);
          var _sr = WordArray.create([
            8,
            9,
            9,
            11,
            13,
            15,
            15,
            5,
            7,
            7,
            8,
            11,
            14,
            14,
            12,
            6,
            9,
            13,
            15,
            7,
            12,
            8,
            9,
            11,
            7,
            7,
            12,
            7,
            6,
            15,
            13,
            11,
            9,
            7,
            15,
            11,
            8,
            6,
            6,
            14,
            12,
            13,
            5,
            14,
            13,
            13,
            7,
            5,
            15,
            5,
            8,
            11,
            14,
            14,
            6,
            14,
            6,
            9,
            12,
            9,
            12,
            5,
            15,
            8,
            8,
            5,
            12,
            9,
            12,
            5,
            14,
            6,
            8,
            13,
            6,
            5,
            15,
            13,
            11,
            11
          ]);
          var _hl = WordArray.create([0, 1518500249, 1859775393, 2400959708, 2840853838]);
          var _hr = WordArray.create([1352829926, 1548603684, 1836072691, 2053994217, 0]);
          var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({
            _doReset: function() {
              this._hash = WordArray.create([1732584193, 4023233417, 2562383102, 271733878, 3285377520]);
            },
            _doProcessBlock: function(M, offset) {
              for (var i = 0; i < 16; i++) {
                var offset_i = offset + i;
                var M_offset_i = M[offset_i];
                M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 16711935 | (M_offset_i << 24 | M_offset_i >>> 8) & 4278255360;
              }
              var H = this._hash.words;
              var hl = _hl.words;
              var hr2 = _hr.words;
              var zl = _zl.words;
              var zr = _zr.words;
              var sl = _sl.words;
              var sr = _sr.words;
              var al, bl, cl, dl, el;
              var ar, br2, cr, dr, er;
              ar = al = H[0];
              br2 = bl = H[1];
              cr = cl = H[2];
              dr = dl = H[3];
              er = el = H[4];
              var t;
              for (var i = 0; i < 80; i += 1) {
                t = al + M[offset + zl[i]] | 0;
                if (i < 16) {
                  t += f1(bl, cl, dl) + hl[0];
                } else if (i < 32) {
                  t += f2(bl, cl, dl) + hl[1];
                } else if (i < 48) {
                  t += f3(bl, cl, dl) + hl[2];
                } else if (i < 64) {
                  t += f4(bl, cl, dl) + hl[3];
                } else {
                  t += f5(bl, cl, dl) + hl[4];
                }
                t = t | 0;
                t = rotl(t, sl[i]);
                t = t + el | 0;
                al = el;
                el = dl;
                dl = rotl(cl, 10);
                cl = bl;
                bl = t;
                t = ar + M[offset + zr[i]] | 0;
                if (i < 16) {
                  t += f5(br2, cr, dr) + hr2[0];
                } else if (i < 32) {
                  t += f4(br2, cr, dr) + hr2[1];
                } else if (i < 48) {
                  t += f3(br2, cr, dr) + hr2[2];
                } else if (i < 64) {
                  t += f2(br2, cr, dr) + hr2[3];
                } else {
                  t += f1(br2, cr, dr) + hr2[4];
                }
                t = t | 0;
                t = rotl(t, sr[i]);
                t = t + er | 0;
                ar = er;
                er = dr;
                dr = rotl(cr, 10);
                cr = br2;
                br2 = t;
              }
              t = H[1] + cl + dr | 0;
              H[1] = H[2] + dl + er | 0;
              H[2] = H[3] + el + ar | 0;
              H[3] = H[4] + al + br2 | 0;
              H[4] = H[0] + bl + cr | 0;
              H[0] = t;
            },
            _doFinalize: function() {
              var data = this._data;
              var dataWords = data.words;
              var nBitsTotal = this._nDataBytes * 8;
              var nBitsLeft = data.sigBytes * 8;
              dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
              dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotal << 8 | nBitsTotal >>> 24) & 16711935 | (nBitsTotal << 24 | nBitsTotal >>> 8) & 4278255360;
              data.sigBytes = (dataWords.length + 1) * 4;
              this._process();
              var hash = this._hash;
              var H = hash.words;
              for (var i = 0; i < 5; i++) {
                var H_i = H[i];
                H[i] = (H_i << 8 | H_i >>> 24) & 16711935 | (H_i << 24 | H_i >>> 8) & 4278255360;
              }
              return hash;
            },
            clone: function() {
              var clone = Hasher.clone.call(this);
              clone._hash = this._hash.clone();
              return clone;
            }
          });
          function f1(x, y, z) {
            return x ^ y ^ z;
          }
          function f2(x, y, z) {
            return x & y | ~x & z;
          }
          function f3(x, y, z) {
            return (x | ~y) ^ z;
          }
          function f4(x, y, z) {
            return x & z | y & ~z;
          }
          function f5(x, y, z) {
            return x ^ (y | ~z);
          }
          function rotl(x, n) {
            return x << n | x >>> 32 - n;
          }
          C.RIPEMD160 = Hasher._createHelper(RIPEMD160);
          C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);
        })();
        return CryptoJS2.RIPEMD160;
      });
    })(ripemd160);
    return ripemd160.exports;
  }
  var hmac = { exports: {} };
  var hasRequiredHmac;
  function requireHmac() {
    if (hasRequiredHmac)
      return hmac.exports;
    hasRequiredHmac = 1;
    (function(module, exports) {
      (function(root, factory) {
        {
          module.exports = factory(requireCore());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        (function() {
          var C = CryptoJS2;
          var C_lib = C.lib;
          var Base = C_lib.Base;
          var C_enc = C.enc;
          var Utf8 = C_enc.Utf8;
          var C_algo = C.algo;
          C_algo.HMAC = Base.extend({
            /**
             * Initializes a newly created HMAC.
             *
             * @param {Hasher} hasher The hash algorithm to use.
             * @param {WordArray|string} key The secret key.
             *
             * @example
             *
             *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
             */
            init: function(hasher, key) {
              hasher = this._hasher = new hasher.init();
              if (typeof key == "string") {
                key = Utf8.parse(key);
              }
              var hasherBlockSize = hasher.blockSize;
              var hasherBlockSizeBytes = hasherBlockSize * 4;
              if (key.sigBytes > hasherBlockSizeBytes) {
                key = hasher.finalize(key);
              }
              key.clamp();
              var oKey = this._oKey = key.clone();
              var iKey = this._iKey = key.clone();
              var oKeyWords = oKey.words;
              var iKeyWords = iKey.words;
              for (var i = 0; i < hasherBlockSize; i++) {
                oKeyWords[i] ^= 1549556828;
                iKeyWords[i] ^= 909522486;
              }
              oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;
              this.reset();
            },
            /**
             * Resets this HMAC to its initial state.
             *
             * @example
             *
             *     hmacHasher.reset();
             */
            reset: function() {
              var hasher = this._hasher;
              hasher.reset();
              hasher.update(this._iKey);
            },
            /**
             * Updates this HMAC with a message.
             *
             * @param {WordArray|string} messageUpdate The message to append.
             *
             * @return {HMAC} This HMAC instance.
             *
             * @example
             *
             *     hmacHasher.update('message');
             *     hmacHasher.update(wordArray);
             */
            update: function(messageUpdate) {
              this._hasher.update(messageUpdate);
              return this;
            },
            /**
             * Finalizes the HMAC computation.
             * Note that the finalize operation is effectively a destructive, read-once operation.
             *
             * @param {WordArray|string} messageUpdate (Optional) A final message update.
             *
             * @return {WordArray} The HMAC.
             *
             * @example
             *
             *     var hmac = hmacHasher.finalize();
             *     var hmac = hmacHasher.finalize('message');
             *     var hmac = hmacHasher.finalize(wordArray);
             */
            finalize: function(messageUpdate) {
              var hasher = this._hasher;
              var innerHash = hasher.finalize(messageUpdate);
              hasher.reset();
              var hmac2 = hasher.finalize(this._oKey.clone().concat(innerHash));
              return hmac2;
            }
          });
        })();
      });
    })(hmac);
    return hmac.exports;
  }
  var pbkdf2 = { exports: {} };
  var hasRequiredPbkdf2;
  function requirePbkdf2() {
    if (hasRequiredPbkdf2)
      return pbkdf2.exports;
    hasRequiredPbkdf2 = 1;
    (function(module, exports) {
      (function(root, factory, undef) {
        {
          module.exports = factory(requireCore(), requireSha1(), requireHmac());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        (function() {
          var C = CryptoJS2;
          var C_lib = C.lib;
          var Base = C_lib.Base;
          var WordArray = C_lib.WordArray;
          var C_algo = C.algo;
          var SHA1 = C_algo.SHA1;
          var HMAC = C_algo.HMAC;
          var PBKDF2 = C_algo.PBKDF2 = Base.extend({
            /**
             * Configuration options.
             *
             * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
             * @property {Hasher} hasher The hasher to use. Default: SHA1
             * @property {number} iterations The number of iterations to perform. Default: 1
             */
            cfg: Base.extend({
              keySize: 128 / 32,
              hasher: SHA1,
              iterations: 1
            }),
            /**
             * Initializes a newly created key derivation function.
             *
             * @param {Object} cfg (Optional) The configuration options to use for the derivation.
             *
             * @example
             *
             *     var kdf = CryptoJS.algo.PBKDF2.create();
             *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });
             *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });
             */
            init: function(cfg) {
              this.cfg = this.cfg.extend(cfg);
            },
            /**
             * Computes the Password-Based Key Derivation Function 2.
             *
             * @param {WordArray|string} password The password.
             * @param {WordArray|string} salt A salt.
             *
             * @return {WordArray} The derived key.
             *
             * @example
             *
             *     var key = kdf.compute(password, salt);
             */
            compute: function(password, salt) {
              var cfg = this.cfg;
              var hmac2 = HMAC.create(cfg.hasher, password);
              var derivedKey = WordArray.create();
              var blockIndex = WordArray.create([1]);
              var derivedKeyWords = derivedKey.words;
              var blockIndexWords = blockIndex.words;
              var keySize = cfg.keySize;
              var iterations = cfg.iterations;
              while (derivedKeyWords.length < keySize) {
                var block2 = hmac2.update(salt).finalize(blockIndex);
                hmac2.reset();
                var blockWords = block2.words;
                var blockWordsLength = blockWords.length;
                var intermediate = block2;
                for (var i = 1; i < iterations; i++) {
                  intermediate = hmac2.finalize(intermediate);
                  hmac2.reset();
                  var intermediateWords = intermediate.words;
                  for (var j = 0; j < blockWordsLength; j++) {
                    blockWords[j] ^= intermediateWords[j];
                  }
                }
                derivedKey.concat(block2);
                blockIndexWords[0]++;
              }
              derivedKey.sigBytes = keySize * 4;
              return derivedKey;
            }
          });
          C.PBKDF2 = function(password, salt, cfg) {
            return PBKDF2.create(cfg).compute(password, salt);
          };
        })();
        return CryptoJS2.PBKDF2;
      });
    })(pbkdf2);
    return pbkdf2.exports;
  }
  var evpkdf = { exports: {} };
  var hasRequiredEvpkdf;
  function requireEvpkdf() {
    if (hasRequiredEvpkdf)
      return evpkdf.exports;
    hasRequiredEvpkdf = 1;
    (function(module, exports) {
      (function(root, factory, undef) {
        {
          module.exports = factory(requireCore(), requireSha1(), requireHmac());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        (function() {
          var C = CryptoJS2;
          var C_lib = C.lib;
          var Base = C_lib.Base;
          var WordArray = C_lib.WordArray;
          var C_algo = C.algo;
          var MD5 = C_algo.MD5;
          var EvpKDF = C_algo.EvpKDF = Base.extend({
            /**
             * Configuration options.
             *
             * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
             * @property {Hasher} hasher The hash algorithm to use. Default: MD5
             * @property {number} iterations The number of iterations to perform. Default: 1
             */
            cfg: Base.extend({
              keySize: 128 / 32,
              hasher: MD5,
              iterations: 1
            }),
            /**
             * Initializes a newly created key derivation function.
             *
             * @param {Object} cfg (Optional) The configuration options to use for the derivation.
             *
             * @example
             *
             *     var kdf = CryptoJS.algo.EvpKDF.create();
             *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });
             *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });
             */
            init: function(cfg) {
              this.cfg = this.cfg.extend(cfg);
            },
            /**
             * Derives a key from a password.
             *
             * @param {WordArray|string} password The password.
             * @param {WordArray|string} salt A salt.
             *
             * @return {WordArray} The derived key.
             *
             * @example
             *
             *     var key = kdf.compute(password, salt);
             */
            compute: function(password, salt) {
              var cfg = this.cfg;
              var hasher = cfg.hasher.create();
              var derivedKey = WordArray.create();
              var derivedKeyWords = derivedKey.words;
              var keySize = cfg.keySize;
              var iterations = cfg.iterations;
              while (derivedKeyWords.length < keySize) {
                if (block2) {
                  hasher.update(block2);
                }
                var block2 = hasher.update(password).finalize(salt);
                hasher.reset();
                for (var i = 1; i < iterations; i++) {
                  block2 = hasher.finalize(block2);
                  hasher.reset();
                }
                derivedKey.concat(block2);
              }
              derivedKey.sigBytes = keySize * 4;
              return derivedKey;
            }
          });
          C.EvpKDF = function(password, salt, cfg) {
            return EvpKDF.create(cfg).compute(password, salt);
          };
        })();
        return CryptoJS2.EvpKDF;
      });
    })(evpkdf);
    return evpkdf.exports;
  }
  var cipherCore = { exports: {} };
  var hasRequiredCipherCore;
  function requireCipherCore() {
    if (hasRequiredCipherCore)
      return cipherCore.exports;
    hasRequiredCipherCore = 1;
    (function(module, exports) {
      (function(root, factory, undef) {
        {
          module.exports = factory(requireCore(), requireEvpkdf());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        CryptoJS2.lib.Cipher || function(undefined$1) {
          var C = CryptoJS2;
          var C_lib = C.lib;
          var Base = C_lib.Base;
          var WordArray = C_lib.WordArray;
          var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
          var C_enc = C.enc;
          C_enc.Utf8;
          var Base64 = C_enc.Base64;
          var C_algo = C.algo;
          var EvpKDF = C_algo.EvpKDF;
          var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
            /**
             * Configuration options.
             *
             * @property {WordArray} iv The IV to use for this operation.
             */
            cfg: Base.extend(),
            /**
             * Creates this cipher in encryption mode.
             *
             * @param {WordArray} key The key.
             * @param {Object} cfg (Optional) The configuration options to use for this operation.
             *
             * @return {Cipher} A cipher instance.
             *
             * @static
             *
             * @example
             *
             *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
             */
            createEncryptor: function(key, cfg) {
              return this.create(this._ENC_XFORM_MODE, key, cfg);
            },
            /**
             * Creates this cipher in decryption mode.
             *
             * @param {WordArray} key The key.
             * @param {Object} cfg (Optional) The configuration options to use for this operation.
             *
             * @return {Cipher} A cipher instance.
             *
             * @static
             *
             * @example
             *
             *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
             */
            createDecryptor: function(key, cfg) {
              return this.create(this._DEC_XFORM_MODE, key, cfg);
            },
            /**
             * Initializes a newly created cipher.
             *
             * @param {number} xformMode Either the encryption or decryption transormation mode constant.
             * @param {WordArray} key The key.
             * @param {Object} cfg (Optional) The configuration options to use for this operation.
             *
             * @example
             *
             *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
             */
            init: function(xformMode, key, cfg) {
              this.cfg = this.cfg.extend(cfg);
              this._xformMode = xformMode;
              this._key = key;
              this.reset();
            },
            /**
             * Resets this cipher to its initial state.
             *
             * @example
             *
             *     cipher.reset();
             */
            reset: function() {
              BufferedBlockAlgorithm.reset.call(this);
              this._doReset();
            },
            /**
             * Adds data to be encrypted or decrypted.
             *
             * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.
             *
             * @return {WordArray} The data after processing.
             *
             * @example
             *
             *     var encrypted = cipher.process('data');
             *     var encrypted = cipher.process(wordArray);
             */
            process: function(dataUpdate) {
              this._append(dataUpdate);
              return this._process();
            },
            /**
             * Finalizes the encryption or decryption process.
             * Note that the finalize operation is effectively a destructive, read-once operation.
             *
             * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
             *
             * @return {WordArray} The data after final processing.
             *
             * @example
             *
             *     var encrypted = cipher.finalize();
             *     var encrypted = cipher.finalize('data');
             *     var encrypted = cipher.finalize(wordArray);
             */
            finalize: function(dataUpdate) {
              if (dataUpdate) {
                this._append(dataUpdate);
              }
              var finalProcessedData = this._doFinalize();
              return finalProcessedData;
            },
            keySize: 128 / 32,
            ivSize: 128 / 32,
            _ENC_XFORM_MODE: 1,
            _DEC_XFORM_MODE: 2,
            /**
             * Creates shortcut functions to a cipher's object interface.
             *
             * @param {Cipher} cipher The cipher to create a helper for.
             *
             * @return {Object} An object with encrypt and decrypt shortcut functions.
             *
             * @static
             *
             * @example
             *
             *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
             */
            _createHelper: /* @__PURE__ */ function() {
              function selectCipherStrategy(key) {
                if (typeof key == "string") {
                  return PasswordBasedCipher;
                } else {
                  return SerializableCipher;
                }
              }
              return function(cipher) {
                return {
                  encrypt: function(message, key, cfg) {
                    return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
                  },
                  decrypt: function(ciphertext, key, cfg) {
                    return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
                  }
                };
              };
            }()
          });
          C_lib.StreamCipher = Cipher.extend({
            _doFinalize: function() {
              var finalProcessedBlocks = this._process(true);
              return finalProcessedBlocks;
            },
            blockSize: 1
          });
          var C_mode = C.mode = {};
          var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
            /**
             * Creates this mode for encryption.
             *
             * @param {Cipher} cipher A block cipher instance.
             * @param {Array} iv The IV words.
             *
             * @static
             *
             * @example
             *
             *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
             */
            createEncryptor: function(cipher, iv) {
              return this.Encryptor.create(cipher, iv);
            },
            /**
             * Creates this mode for decryption.
             *
             * @param {Cipher} cipher A block cipher instance.
             * @param {Array} iv The IV words.
             *
             * @static
             *
             * @example
             *
             *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
             */
            createDecryptor: function(cipher, iv) {
              return this.Decryptor.create(cipher, iv);
            },
            /**
             * Initializes a newly created mode.
             *
             * @param {Cipher} cipher A block cipher instance.
             * @param {Array} iv The IV words.
             *
             * @example
             *
             *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
             */
            init: function(cipher, iv) {
              this._cipher = cipher;
              this._iv = iv;
            }
          });
          var CBC = C_mode.CBC = function() {
            var CBC2 = BlockCipherMode.extend();
            CBC2.Encryptor = CBC2.extend({
              /**
               * Processes the data block at offset.
               *
               * @param {Array} words The data words to operate on.
               * @param {number} offset The offset where the block starts.
               *
               * @example
               *
               *     mode.processBlock(data.words, offset);
               */
              processBlock: function(words, offset) {
                var cipher = this._cipher;
                var blockSize = cipher.blockSize;
                xorBlock.call(this, words, offset, blockSize);
                cipher.encryptBlock(words, offset);
                this._prevBlock = words.slice(offset, offset + blockSize);
              }
            });
            CBC2.Decryptor = CBC2.extend({
              /**
               * Processes the data block at offset.
               *
               * @param {Array} words The data words to operate on.
               * @param {number} offset The offset where the block starts.
               *
               * @example
               *
               *     mode.processBlock(data.words, offset);
               */
              processBlock: function(words, offset) {
                var cipher = this._cipher;
                var blockSize = cipher.blockSize;
                var thisBlock = words.slice(offset, offset + blockSize);
                cipher.decryptBlock(words, offset);
                xorBlock.call(this, words, offset, blockSize);
                this._prevBlock = thisBlock;
              }
            });
            function xorBlock(words, offset, blockSize) {
              var iv = this._iv;
              if (iv) {
                var block2 = iv;
                this._iv = undefined$1;
              } else {
                var block2 = this._prevBlock;
              }
              for (var i = 0; i < blockSize; i++) {
                words[offset + i] ^= block2[i];
              }
            }
            return CBC2;
          }();
          var C_pad = C.pad = {};
          var Pkcs7 = C_pad.Pkcs7 = {
            /**
             * Pads data using the algorithm defined in PKCS #5/7.
             *
             * @param {WordArray} data The data to pad.
             * @param {number} blockSize The multiple that the data should be padded to.
             *
             * @static
             *
             * @example
             *
             *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
             */
            pad: function(data, blockSize) {
              var blockSizeBytes = blockSize * 4;
              var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;
              var paddingWord = nPaddingBytes << 24 | nPaddingBytes << 16 | nPaddingBytes << 8 | nPaddingBytes;
              var paddingWords = [];
              for (var i = 0; i < nPaddingBytes; i += 4) {
                paddingWords.push(paddingWord);
              }
              var padding = WordArray.create(paddingWords, nPaddingBytes);
              data.concat(padding);
            },
            /**
             * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
             *
             * @param {WordArray} data The data to unpad.
             *
             * @static
             *
             * @example
             *
             *     CryptoJS.pad.Pkcs7.unpad(wordArray);
             */
            unpad: function(data) {
              var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
              data.sigBytes -= nPaddingBytes;
            }
          };
          C_lib.BlockCipher = Cipher.extend({
            /**
             * Configuration options.
             *
             * @property {Mode} mode The block mode to use. Default: CBC
             * @property {Padding} padding The padding strategy to use. Default: Pkcs7
             */
            cfg: Cipher.cfg.extend({
              mode: CBC,
              padding: Pkcs7
            }),
            reset: function() {
              Cipher.reset.call(this);
              var cfg = this.cfg;
              var iv = cfg.iv;
              var mode = cfg.mode;
              if (this._xformMode == this._ENC_XFORM_MODE) {
                var modeCreator = mode.createEncryptor;
              } else {
                var modeCreator = mode.createDecryptor;
                this._minBufferSize = 1;
              }
              if (this._mode && this._mode.__creator == modeCreator) {
                this._mode.init(this, iv && iv.words);
              } else {
                this._mode = modeCreator.call(mode, this, iv && iv.words);
                this._mode.__creator = modeCreator;
              }
            },
            _doProcessBlock: function(words, offset) {
              this._mode.processBlock(words, offset);
            },
            _doFinalize: function() {
              var padding = this.cfg.padding;
              if (this._xformMode == this._ENC_XFORM_MODE) {
                padding.pad(this._data, this.blockSize);
                var finalProcessedBlocks = this._process(true);
              } else {
                var finalProcessedBlocks = this._process(true);
                padding.unpad(finalProcessedBlocks);
              }
              return finalProcessedBlocks;
            },
            blockSize: 128 / 32
          });
          var CipherParams = C_lib.CipherParams = Base.extend({
            /**
             * Initializes a newly created cipher params object.
             *
             * @param {Object} cipherParams An object with any of the possible cipher parameters.
             *
             * @example
             *
             *     var cipherParams = CryptoJS.lib.CipherParams.create({
             *         ciphertext: ciphertextWordArray,
             *         key: keyWordArray,
             *         iv: ivWordArray,
             *         salt: saltWordArray,
             *         algorithm: CryptoJS.algo.AES,
             *         mode: CryptoJS.mode.CBC,
             *         padding: CryptoJS.pad.PKCS7,
             *         blockSize: 4,
             *         formatter: CryptoJS.format.OpenSSL
             *     });
             */
            init: function(cipherParams) {
              this.mixIn(cipherParams);
            },
            /**
             * Converts this cipher params object to a string.
             *
             * @param {Format} formatter (Optional) The formatting strategy to use.
             *
             * @return {string} The stringified cipher params.
             *
             * @throws Error If neither the formatter nor the default formatter is set.
             *
             * @example
             *
             *     var string = cipherParams + '';
             *     var string = cipherParams.toString();
             *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
             */
            toString: function(formatter) {
              return (formatter || this.formatter).stringify(this);
            }
          });
          var C_format = C.format = {};
          var OpenSSLFormatter = C_format.OpenSSL = {
            /**
             * Converts a cipher params object to an OpenSSL-compatible string.
             *
             * @param {CipherParams} cipherParams The cipher params object.
             *
             * @return {string} The OpenSSL-compatible string.
             *
             * @static
             *
             * @example
             *
             *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
             */
            stringify: function(cipherParams) {
              var ciphertext = cipherParams.ciphertext;
              var salt = cipherParams.salt;
              if (salt) {
                var wordArray = WordArray.create([1398893684, 1701076831]).concat(salt).concat(ciphertext);
              } else {
                var wordArray = ciphertext;
              }
              return wordArray.toString(Base64);
            },
            /**
             * Converts an OpenSSL-compatible string to a cipher params object.
             *
             * @param {string} openSSLStr The OpenSSL-compatible string.
             *
             * @return {CipherParams} The cipher params object.
             *
             * @static
             *
             * @example
             *
             *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
             */
            parse: function(openSSLStr) {
              var ciphertext = Base64.parse(openSSLStr);
              var ciphertextWords = ciphertext.words;
              if (ciphertextWords[0] == 1398893684 && ciphertextWords[1] == 1701076831) {
                var salt = WordArray.create(ciphertextWords.slice(2, 4));
                ciphertextWords.splice(0, 4);
                ciphertext.sigBytes -= 16;
              }
              return CipherParams.create({ ciphertext, salt });
            }
          };
          var SerializableCipher = C_lib.SerializableCipher = Base.extend({
            /**
             * Configuration options.
             *
             * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
             */
            cfg: Base.extend({
              format: OpenSSLFormatter
            }),
            /**
             * Encrypts a message.
             *
             * @param {Cipher} cipher The cipher algorithm to use.
             * @param {WordArray|string} message The message to encrypt.
             * @param {WordArray} key The key.
             * @param {Object} cfg (Optional) The configuration options to use for this operation.
             *
             * @return {CipherParams} A cipher params object.
             *
             * @static
             *
             * @example
             *
             *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
             *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
             *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
             */
            encrypt: function(cipher, message, key, cfg) {
              cfg = this.cfg.extend(cfg);
              var encryptor = cipher.createEncryptor(key, cfg);
              var ciphertext = encryptor.finalize(message);
              var cipherCfg = encryptor.cfg;
              return CipherParams.create({
                ciphertext,
                key,
                iv: cipherCfg.iv,
                algorithm: cipher,
                mode: cipherCfg.mode,
                padding: cipherCfg.padding,
                blockSize: cipher.blockSize,
                formatter: cfg.format
              });
            },
            /**
             * Decrypts serialized ciphertext.
             *
             * @param {Cipher} cipher The cipher algorithm to use.
             * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
             * @param {WordArray} key The key.
             * @param {Object} cfg (Optional) The configuration options to use for this operation.
             *
             * @return {WordArray} The plaintext.
             *
             * @static
             *
             * @example
             *
             *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
             *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
             */
            decrypt: function(cipher, ciphertext, key, cfg) {
              cfg = this.cfg.extend(cfg);
              ciphertext = this._parse(ciphertext, cfg.format);
              var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);
              return plaintext;
            },
            /**
             * Converts serialized ciphertext to CipherParams,
             * else assumed CipherParams already and returns ciphertext unchanged.
             *
             * @param {CipherParams|string} ciphertext The ciphertext.
             * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
             *
             * @return {CipherParams} The unserialized ciphertext.
             *
             * @static
             *
             * @example
             *
             *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
             */
            _parse: function(ciphertext, format) {
              if (typeof ciphertext == "string") {
                return format.parse(ciphertext, this);
              } else {
                return ciphertext;
              }
            }
          });
          var C_kdf = C.kdf = {};
          var OpenSSLKdf = C_kdf.OpenSSL = {
            /**
             * Derives a key and IV from a password.
             *
             * @param {string} password The password to derive from.
             * @param {number} keySize The size in words of the key to generate.
             * @param {number} ivSize The size in words of the IV to generate.
             * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
             *
             * @return {CipherParams} A cipher params object with the key, IV, and salt.
             *
             * @static
             *
             * @example
             *
             *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
             *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
             */
            execute: function(password, keySize, ivSize, salt) {
              if (!salt) {
                salt = WordArray.random(64 / 8);
              }
              var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);
              var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
              key.sigBytes = keySize * 4;
              return CipherParams.create({ key, iv, salt });
            }
          };
          var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
            /**
             * Configuration options.
             *
             * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
             */
            cfg: SerializableCipher.cfg.extend({
              kdf: OpenSSLKdf
            }),
            /**
             * Encrypts a message using a password.
             *
             * @param {Cipher} cipher The cipher algorithm to use.
             * @param {WordArray|string} message The message to encrypt.
             * @param {string} password The password.
             * @param {Object} cfg (Optional) The configuration options to use for this operation.
             *
             * @return {CipherParams} A cipher params object.
             *
             * @static
             *
             * @example
             *
             *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
             *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
             */
            encrypt: function(cipher, message, password, cfg) {
              cfg = this.cfg.extend(cfg);
              var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);
              cfg.iv = derivedParams.iv;
              var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);
              ciphertext.mixIn(derivedParams);
              return ciphertext;
            },
            /**
             * Decrypts serialized ciphertext using a password.
             *
             * @param {Cipher} cipher The cipher algorithm to use.
             * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
             * @param {string} password The password.
             * @param {Object} cfg (Optional) The configuration options to use for this operation.
             *
             * @return {WordArray} The plaintext.
             *
             * @static
             *
             * @example
             *
             *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
             *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
             */
            decrypt: function(cipher, ciphertext, password, cfg) {
              cfg = this.cfg.extend(cfg);
              ciphertext = this._parse(ciphertext, cfg.format);
              var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);
              cfg.iv = derivedParams.iv;
              var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);
              return plaintext;
            }
          });
        }();
      });
    })(cipherCore);
    return cipherCore.exports;
  }
  var modeCfb = { exports: {} };
  var hasRequiredModeCfb;
  function requireModeCfb() {
    if (hasRequiredModeCfb)
      return modeCfb.exports;
    hasRequiredModeCfb = 1;
    (function(module, exports) {
      (function(root, factory, undef) {
        {
          module.exports = factory(requireCore(), requireCipherCore());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        CryptoJS2.mode.CFB = function() {
          var CFB = CryptoJS2.lib.BlockCipherMode.extend();
          CFB.Encryptor = CFB.extend({
            processBlock: function(words, offset) {
              var cipher = this._cipher;
              var blockSize = cipher.blockSize;
              generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);
              this._prevBlock = words.slice(offset, offset + blockSize);
            }
          });
          CFB.Decryptor = CFB.extend({
            processBlock: function(words, offset) {
              var cipher = this._cipher;
              var blockSize = cipher.blockSize;
              var thisBlock = words.slice(offset, offset + blockSize);
              generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);
              this._prevBlock = thisBlock;
            }
          });
          function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {
            var iv = this._iv;
            if (iv) {
              var keystream = iv.slice(0);
              this._iv = void 0;
            } else {
              var keystream = this._prevBlock;
            }
            cipher.encryptBlock(keystream, 0);
            for (var i = 0; i < blockSize; i++) {
              words[offset + i] ^= keystream[i];
            }
          }
          return CFB;
        }();
        return CryptoJS2.mode.CFB;
      });
    })(modeCfb);
    return modeCfb.exports;
  }
  var modeCtr = { exports: {} };
  var hasRequiredModeCtr;
  function requireModeCtr() {
    if (hasRequiredModeCtr)
      return modeCtr.exports;
    hasRequiredModeCtr = 1;
    (function(module, exports) {
      (function(root, factory, undef) {
        {
          module.exports = factory(requireCore(), requireCipherCore());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        CryptoJS2.mode.CTR = function() {
          var CTR = CryptoJS2.lib.BlockCipherMode.extend();
          var Encryptor = CTR.Encryptor = CTR.extend({
            processBlock: function(words, offset) {
              var cipher = this._cipher;
              var blockSize = cipher.blockSize;
              var iv = this._iv;
              var counter = this._counter;
              if (iv) {
                counter = this._counter = iv.slice(0);
                this._iv = void 0;
              }
              var keystream = counter.slice(0);
              cipher.encryptBlock(keystream, 0);
              counter[blockSize - 1] = counter[blockSize - 1] + 1 | 0;
              for (var i = 0; i < blockSize; i++) {
                words[offset + i] ^= keystream[i];
              }
            }
          });
          CTR.Decryptor = Encryptor;
          return CTR;
        }();
        return CryptoJS2.mode.CTR;
      });
    })(modeCtr);
    return modeCtr.exports;
  }
  var modeCtrGladman = { exports: {} };
  var hasRequiredModeCtrGladman;
  function requireModeCtrGladman() {
    if (hasRequiredModeCtrGladman)
      return modeCtrGladman.exports;
    hasRequiredModeCtrGladman = 1;
    (function(module, exports) {
      (function(root, factory, undef) {
        {
          module.exports = factory(requireCore(), requireCipherCore());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        /** @preserve
         * Counter block mode compatible with  Dr Brian Gladman fileenc.c
         * derived from CryptoJS.mode.CTR
         * Jan Hruby jhruby.web@gmail.com
         */
        CryptoJS2.mode.CTRGladman = function() {
          var CTRGladman = CryptoJS2.lib.BlockCipherMode.extend();
          function incWord(word) {
            if ((word >> 24 & 255) === 255) {
              var b1 = word >> 16 & 255;
              var b2 = word >> 8 & 255;
              var b3 = word & 255;
              if (b1 === 255) {
                b1 = 0;
                if (b2 === 255) {
                  b2 = 0;
                  if (b3 === 255) {
                    b3 = 0;
                  } else {
                    ++b3;
                  }
                } else {
                  ++b2;
                }
              } else {
                ++b1;
              }
              word = 0;
              word += b1 << 16;
              word += b2 << 8;
              word += b3;
            } else {
              word += 1 << 24;
            }
            return word;
          }
          function incCounter(counter) {
            if ((counter[0] = incWord(counter[0])) === 0) {
              counter[1] = incWord(counter[1]);
            }
            return counter;
          }
          var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({
            processBlock: function(words, offset) {
              var cipher = this._cipher;
              var blockSize = cipher.blockSize;
              var iv = this._iv;
              var counter = this._counter;
              if (iv) {
                counter = this._counter = iv.slice(0);
                this._iv = void 0;
              }
              incCounter(counter);
              var keystream = counter.slice(0);
              cipher.encryptBlock(keystream, 0);
              for (var i = 0; i < blockSize; i++) {
                words[offset + i] ^= keystream[i];
              }
            }
          });
          CTRGladman.Decryptor = Encryptor;
          return CTRGladman;
        }();
        return CryptoJS2.mode.CTRGladman;
      });
    })(modeCtrGladman);
    return modeCtrGladman.exports;
  }
  var modeOfb = { exports: {} };
  var hasRequiredModeOfb;
  function requireModeOfb() {
    if (hasRequiredModeOfb)
      return modeOfb.exports;
    hasRequiredModeOfb = 1;
    (function(module, exports) {
      (function(root, factory, undef) {
        {
          module.exports = factory(requireCore(), requireCipherCore());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        CryptoJS2.mode.OFB = function() {
          var OFB = CryptoJS2.lib.BlockCipherMode.extend();
          var Encryptor = OFB.Encryptor = OFB.extend({
            processBlock: function(words, offset) {
              var cipher = this._cipher;
              var blockSize = cipher.blockSize;
              var iv = this._iv;
              var keystream = this._keystream;
              if (iv) {
                keystream = this._keystream = iv.slice(0);
                this._iv = void 0;
              }
              cipher.encryptBlock(keystream, 0);
              for (var i = 0; i < blockSize; i++) {
                words[offset + i] ^= keystream[i];
              }
            }
          });
          OFB.Decryptor = Encryptor;
          return OFB;
        }();
        return CryptoJS2.mode.OFB;
      });
    })(modeOfb);
    return modeOfb.exports;
  }
  var modeEcb = { exports: {} };
  var hasRequiredModeEcb;
  function requireModeEcb() {
    if (hasRequiredModeEcb)
      return modeEcb.exports;
    hasRequiredModeEcb = 1;
    (function(module, exports) {
      (function(root, factory, undef) {
        {
          module.exports = factory(requireCore(), requireCipherCore());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        CryptoJS2.mode.ECB = function() {
          var ECB = CryptoJS2.lib.BlockCipherMode.extend();
          ECB.Encryptor = ECB.extend({
            processBlock: function(words, offset) {
              this._cipher.encryptBlock(words, offset);
            }
          });
          ECB.Decryptor = ECB.extend({
            processBlock: function(words, offset) {
              this._cipher.decryptBlock(words, offset);
            }
          });
          return ECB;
        }();
        return CryptoJS2.mode.ECB;
      });
    })(modeEcb);
    return modeEcb.exports;
  }
  var padAnsix923 = { exports: {} };
  var hasRequiredPadAnsix923;
  function requirePadAnsix923() {
    if (hasRequiredPadAnsix923)
      return padAnsix923.exports;
    hasRequiredPadAnsix923 = 1;
    (function(module, exports) {
      (function(root, factory, undef) {
        {
          module.exports = factory(requireCore(), requireCipherCore());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        CryptoJS2.pad.AnsiX923 = {
          pad: function(data, blockSize) {
            var dataSigBytes = data.sigBytes;
            var blockSizeBytes = blockSize * 4;
            var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;
            var lastBytePos = dataSigBytes + nPaddingBytes - 1;
            data.clamp();
            data.words[lastBytePos >>> 2] |= nPaddingBytes << 24 - lastBytePos % 4 * 8;
            data.sigBytes += nPaddingBytes;
          },
          unpad: function(data) {
            var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
            data.sigBytes -= nPaddingBytes;
          }
        };
        return CryptoJS2.pad.Ansix923;
      });
    })(padAnsix923);
    return padAnsix923.exports;
  }
  var padIso10126 = { exports: {} };
  var hasRequiredPadIso10126;
  function requirePadIso10126() {
    if (hasRequiredPadIso10126)
      return padIso10126.exports;
    hasRequiredPadIso10126 = 1;
    (function(module, exports) {
      (function(root, factory, undef) {
        {
          module.exports = factory(requireCore(), requireCipherCore());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        CryptoJS2.pad.Iso10126 = {
          pad: function(data, blockSize) {
            var blockSizeBytes = blockSize * 4;
            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;
            data.concat(CryptoJS2.lib.WordArray.random(nPaddingBytes - 1)).concat(CryptoJS2.lib.WordArray.create([nPaddingBytes << 24], 1));
          },
          unpad: function(data) {
            var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
            data.sigBytes -= nPaddingBytes;
          }
        };
        return CryptoJS2.pad.Iso10126;
      });
    })(padIso10126);
    return padIso10126.exports;
  }
  var padIso97971 = { exports: {} };
  var hasRequiredPadIso97971;
  function requirePadIso97971() {
    if (hasRequiredPadIso97971)
      return padIso97971.exports;
    hasRequiredPadIso97971 = 1;
    (function(module, exports) {
      (function(root, factory, undef) {
        {
          module.exports = factory(requireCore(), requireCipherCore());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        CryptoJS2.pad.Iso97971 = {
          pad: function(data, blockSize) {
            data.concat(CryptoJS2.lib.WordArray.create([2147483648], 1));
            CryptoJS2.pad.ZeroPadding.pad(data, blockSize);
          },
          unpad: function(data) {
            CryptoJS2.pad.ZeroPadding.unpad(data);
            data.sigBytes--;
          }
        };
        return CryptoJS2.pad.Iso97971;
      });
    })(padIso97971);
    return padIso97971.exports;
  }
  var padZeropadding = { exports: {} };
  var hasRequiredPadZeropadding;
  function requirePadZeropadding() {
    if (hasRequiredPadZeropadding)
      return padZeropadding.exports;
    hasRequiredPadZeropadding = 1;
    (function(module, exports) {
      (function(root, factory, undef) {
        {
          module.exports = factory(requireCore(), requireCipherCore());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        CryptoJS2.pad.ZeroPadding = {
          pad: function(data, blockSize) {
            var blockSizeBytes = blockSize * 4;
            data.clamp();
            data.sigBytes += blockSizeBytes - (data.sigBytes % blockSizeBytes || blockSizeBytes);
          },
          unpad: function(data) {
            var dataWords = data.words;
            var i = data.sigBytes - 1;
            while (!(dataWords[i >>> 2] >>> 24 - i % 4 * 8 & 255)) {
              i--;
            }
            data.sigBytes = i + 1;
          }
        };
        return CryptoJS2.pad.ZeroPadding;
      });
    })(padZeropadding);
    return padZeropadding.exports;
  }
  var padNopadding = { exports: {} };
  var hasRequiredPadNopadding;
  function requirePadNopadding() {
    if (hasRequiredPadNopadding)
      return padNopadding.exports;
    hasRequiredPadNopadding = 1;
    (function(module, exports) {
      (function(root, factory, undef) {
        {
          module.exports = factory(requireCore(), requireCipherCore());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        CryptoJS2.pad.NoPadding = {
          pad: function() {
          },
          unpad: function() {
          }
        };
        return CryptoJS2.pad.NoPadding;
      });
    })(padNopadding);
    return padNopadding.exports;
  }
  var formatHex = { exports: {} };
  var hasRequiredFormatHex;
  function requireFormatHex() {
    if (hasRequiredFormatHex)
      return formatHex.exports;
    hasRequiredFormatHex = 1;
    (function(module, exports) {
      (function(root, factory, undef) {
        {
          module.exports = factory(requireCore(), requireCipherCore());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        (function(undefined$1) {
          var C = CryptoJS2;
          var C_lib = C.lib;
          var CipherParams = C_lib.CipherParams;
          var C_enc = C.enc;
          var Hex = C_enc.Hex;
          var C_format = C.format;
          C_format.Hex = {
            /**
             * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.
             *
             * @param {CipherParams} cipherParams The cipher params object.
             *
             * @return {string} The hexadecimally encoded string.
             *
             * @static
             *
             * @example
             *
             *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);
             */
            stringify: function(cipherParams) {
              return cipherParams.ciphertext.toString(Hex);
            },
            /**
             * Converts a hexadecimally encoded ciphertext string to a cipher params object.
             *
             * @param {string} input The hexadecimally encoded string.
             *
             * @return {CipherParams} The cipher params object.
             *
             * @static
             *
             * @example
             *
             *     var cipherParams = CryptoJS.format.Hex.parse(hexString);
             */
            parse: function(input) {
              var ciphertext = Hex.parse(input);
              return CipherParams.create({ ciphertext });
            }
          };
        })();
        return CryptoJS2.format.Hex;
      });
    })(formatHex);
    return formatHex.exports;
  }
  var aes = { exports: {} };
  var hasRequiredAes;
  function requireAes() {
    if (hasRequiredAes)
      return aes.exports;
    hasRequiredAes = 1;
    (function(module, exports) {
      (function(root, factory, undef) {
        {
          module.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        (function() {
          var C = CryptoJS2;
          var C_lib = C.lib;
          var BlockCipher = C_lib.BlockCipher;
          var C_algo = C.algo;
          var SBOX = [];
          var INV_SBOX = [];
          var SUB_MIX_0 = [];
          var SUB_MIX_1 = [];
          var SUB_MIX_2 = [];
          var SUB_MIX_3 = [];
          var INV_SUB_MIX_0 = [];
          var INV_SUB_MIX_1 = [];
          var INV_SUB_MIX_2 = [];
          var INV_SUB_MIX_3 = [];
          (function() {
            var d = [];
            for (var i = 0; i < 256; i++) {
              if (i < 128) {
                d[i] = i << 1;
              } else {
                d[i] = i << 1 ^ 283;
              }
            }
            var x = 0;
            var xi = 0;
            for (var i = 0; i < 256; i++) {
              var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
              sx = sx >>> 8 ^ sx & 255 ^ 99;
              SBOX[x] = sx;
              INV_SBOX[sx] = x;
              var x2 = d[x];
              var x4 = d[x2];
              var x8 = d[x4];
              var t = d[sx] * 257 ^ sx * 16843008;
              SUB_MIX_0[x] = t << 24 | t >>> 8;
              SUB_MIX_1[x] = t << 16 | t >>> 16;
              SUB_MIX_2[x] = t << 8 | t >>> 24;
              SUB_MIX_3[x] = t;
              var t = x8 * 16843009 ^ x4 * 65537 ^ x2 * 257 ^ x * 16843008;
              INV_SUB_MIX_0[sx] = t << 24 | t >>> 8;
              INV_SUB_MIX_1[sx] = t << 16 | t >>> 16;
              INV_SUB_MIX_2[sx] = t << 8 | t >>> 24;
              INV_SUB_MIX_3[sx] = t;
              if (!x) {
                x = xi = 1;
              } else {
                x = x2 ^ d[d[d[x8 ^ x2]]];
                xi ^= d[d[xi]];
              }
            }
          })();
          var RCON = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54];
          var AES = C_algo.AES = BlockCipher.extend({
            _doReset: function() {
              if (this._nRounds && this._keyPriorReset === this._key) {
                return;
              }
              var key = this._keyPriorReset = this._key;
              var keyWords = key.words;
              var keySize = key.sigBytes / 4;
              var nRounds = this._nRounds = keySize + 6;
              var ksRows = (nRounds + 1) * 4;
              var keySchedule = this._keySchedule = [];
              for (var ksRow = 0; ksRow < ksRows; ksRow++) {
                if (ksRow < keySize) {
                  keySchedule[ksRow] = keyWords[ksRow];
                } else {
                  var t = keySchedule[ksRow - 1];
                  if (!(ksRow % keySize)) {
                    t = t << 8 | t >>> 24;
                    t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 255] << 16 | SBOX[t >>> 8 & 255] << 8 | SBOX[t & 255];
                    t ^= RCON[ksRow / keySize | 0] << 24;
                  } else if (keySize > 6 && ksRow % keySize == 4) {
                    t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 255] << 16 | SBOX[t >>> 8 & 255] << 8 | SBOX[t & 255];
                  }
                  keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;
                }
              }
              var invKeySchedule = this._invKeySchedule = [];
              for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
                var ksRow = ksRows - invKsRow;
                if (invKsRow % 4) {
                  var t = keySchedule[ksRow];
                } else {
                  var t = keySchedule[ksRow - 4];
                }
                if (invKsRow < 4 || ksRow <= 4) {
                  invKeySchedule[invKsRow] = t;
                } else {
                  invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[t >>> 16 & 255]] ^ INV_SUB_MIX_2[SBOX[t >>> 8 & 255]] ^ INV_SUB_MIX_3[SBOX[t & 255]];
                }
              }
            },
            encryptBlock: function(M, offset) {
              this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
            },
            decryptBlock: function(M, offset) {
              var t = M[offset + 1];
              M[offset + 1] = M[offset + 3];
              M[offset + 3] = t;
              this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);
              var t = M[offset + 1];
              M[offset + 1] = M[offset + 3];
              M[offset + 3] = t;
            },
            _doCryptBlock: function(M, offset, keySchedule, SUB_MIX_02, SUB_MIX_12, SUB_MIX_22, SUB_MIX_32, SBOX2) {
              var nRounds = this._nRounds;
              var s0 = M[offset] ^ keySchedule[0];
              var s1 = M[offset + 1] ^ keySchedule[1];
              var s2 = M[offset + 2] ^ keySchedule[2];
              var s3 = M[offset + 3] ^ keySchedule[3];
              var ksRow = 4;
              for (var round = 1; round < nRounds; round++) {
                var t0 = SUB_MIX_02[s0 >>> 24] ^ SUB_MIX_12[s1 >>> 16 & 255] ^ SUB_MIX_22[s2 >>> 8 & 255] ^ SUB_MIX_32[s3 & 255] ^ keySchedule[ksRow++];
                var t1 = SUB_MIX_02[s1 >>> 24] ^ SUB_MIX_12[s2 >>> 16 & 255] ^ SUB_MIX_22[s3 >>> 8 & 255] ^ SUB_MIX_32[s0 & 255] ^ keySchedule[ksRow++];
                var t2 = SUB_MIX_02[s2 >>> 24] ^ SUB_MIX_12[s3 >>> 16 & 255] ^ SUB_MIX_22[s0 >>> 8 & 255] ^ SUB_MIX_32[s1 & 255] ^ keySchedule[ksRow++];
                var t3 = SUB_MIX_02[s3 >>> 24] ^ SUB_MIX_12[s0 >>> 16 & 255] ^ SUB_MIX_22[s1 >>> 8 & 255] ^ SUB_MIX_32[s2 & 255] ^ keySchedule[ksRow++];
                s0 = t0;
                s1 = t1;
                s2 = t2;
                s3 = t3;
              }
              var t0 = (SBOX2[s0 >>> 24] << 24 | SBOX2[s1 >>> 16 & 255] << 16 | SBOX2[s2 >>> 8 & 255] << 8 | SBOX2[s3 & 255]) ^ keySchedule[ksRow++];
              var t1 = (SBOX2[s1 >>> 24] << 24 | SBOX2[s2 >>> 16 & 255] << 16 | SBOX2[s3 >>> 8 & 255] << 8 | SBOX2[s0 & 255]) ^ keySchedule[ksRow++];
              var t2 = (SBOX2[s2 >>> 24] << 24 | SBOX2[s3 >>> 16 & 255] << 16 | SBOX2[s0 >>> 8 & 255] << 8 | SBOX2[s1 & 255]) ^ keySchedule[ksRow++];
              var t3 = (SBOX2[s3 >>> 24] << 24 | SBOX2[s0 >>> 16 & 255] << 16 | SBOX2[s1 >>> 8 & 255] << 8 | SBOX2[s2 & 255]) ^ keySchedule[ksRow++];
              M[offset] = t0;
              M[offset + 1] = t1;
              M[offset + 2] = t2;
              M[offset + 3] = t3;
            },
            keySize: 256 / 32
          });
          C.AES = BlockCipher._createHelper(AES);
        })();
        return CryptoJS2.AES;
      });
    })(aes);
    return aes.exports;
  }
  var tripledes = { exports: {} };
  var hasRequiredTripledes;
  function requireTripledes() {
    if (hasRequiredTripledes)
      return tripledes.exports;
    hasRequiredTripledes = 1;
    (function(module, exports) {
      (function(root, factory, undef) {
        {
          module.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        (function() {
          var C = CryptoJS2;
          var C_lib = C.lib;
          var WordArray = C_lib.WordArray;
          var BlockCipher = C_lib.BlockCipher;
          var C_algo = C.algo;
          var PC1 = [
            57,
            49,
            41,
            33,
            25,
            17,
            9,
            1,
            58,
            50,
            42,
            34,
            26,
            18,
            10,
            2,
            59,
            51,
            43,
            35,
            27,
            19,
            11,
            3,
            60,
            52,
            44,
            36,
            63,
            55,
            47,
            39,
            31,
            23,
            15,
            7,
            62,
            54,
            46,
            38,
            30,
            22,
            14,
            6,
            61,
            53,
            45,
            37,
            29,
            21,
            13,
            5,
            28,
            20,
            12,
            4
          ];
          var PC2 = [
            14,
            17,
            11,
            24,
            1,
            5,
            3,
            28,
            15,
            6,
            21,
            10,
            23,
            19,
            12,
            4,
            26,
            8,
            16,
            7,
            27,
            20,
            13,
            2,
            41,
            52,
            31,
            37,
            47,
            55,
            30,
            40,
            51,
            45,
            33,
            48,
            44,
            49,
            39,
            56,
            34,
            53,
            46,
            42,
            50,
            36,
            29,
            32
          ];
          var BIT_SHIFTS = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];
          var SBOX_P = [
            {
              0: 8421888,
              268435456: 32768,
              536870912: 8421378,
              805306368: 2,
              1073741824: 512,
              1342177280: 8421890,
              1610612736: 8389122,
              1879048192: 8388608,
              2147483648: 514,
              2415919104: 8389120,
              2684354560: 33280,
              2952790016: 8421376,
              3221225472: 32770,
              3489660928: 8388610,
              3758096384: 0,
              4026531840: 33282,
              134217728: 0,
              402653184: 8421890,
              671088640: 33282,
              939524096: 32768,
              1207959552: 8421888,
              1476395008: 512,
              1744830464: 8421378,
              2013265920: 2,
              2281701376: 8389120,
              2550136832: 33280,
              2818572288: 8421376,
              3087007744: 8389122,
              3355443200: 8388610,
              3623878656: 32770,
              3892314112: 514,
              4160749568: 8388608,
              1: 32768,
              268435457: 2,
              536870913: 8421888,
              805306369: 8388608,
              1073741825: 8421378,
              1342177281: 33280,
              1610612737: 512,
              1879048193: 8389122,
              2147483649: 8421890,
              2415919105: 8421376,
              2684354561: 8388610,
              2952790017: 33282,
              3221225473: 514,
              3489660929: 8389120,
              3758096385: 32770,
              4026531841: 0,
              134217729: 8421890,
              402653185: 8421376,
              671088641: 8388608,
              939524097: 512,
              1207959553: 32768,
              1476395009: 8388610,
              1744830465: 2,
              2013265921: 33282,
              2281701377: 32770,
              2550136833: 8389122,
              2818572289: 514,
              3087007745: 8421888,
              3355443201: 8389120,
              3623878657: 0,
              3892314113: 33280,
              4160749569: 8421378
            },
            {
              0: 1074282512,
              16777216: 16384,
              33554432: 524288,
              50331648: 1074266128,
              67108864: 1073741840,
              83886080: 1074282496,
              100663296: 1073758208,
              117440512: 16,
              134217728: 540672,
              150994944: 1073758224,
              167772160: 1073741824,
              184549376: 540688,
              201326592: 524304,
              218103808: 0,
              234881024: 16400,
              251658240: 1074266112,
              8388608: 1073758208,
              25165824: 540688,
              41943040: 16,
              58720256: 1073758224,
              75497472: 1074282512,
              92274688: 1073741824,
              109051904: 524288,
              125829120: 1074266128,
              142606336: 524304,
              159383552: 0,
              176160768: 16384,
              192937984: 1074266112,
              209715200: 1073741840,
              226492416: 540672,
              243269632: 1074282496,
              260046848: 16400,
              268435456: 0,
              285212672: 1074266128,
              301989888: 1073758224,
              318767104: 1074282496,
              335544320: 1074266112,
              352321536: 16,
              369098752: 540688,
              385875968: 16384,
              402653184: 16400,
              419430400: 524288,
              436207616: 524304,
              452984832: 1073741840,
              469762048: 540672,
              486539264: 1073758208,
              503316480: 1073741824,
              520093696: 1074282512,
              276824064: 540688,
              293601280: 524288,
              310378496: 1074266112,
              327155712: 16384,
              343932928: 1073758208,
              360710144: 1074282512,
              377487360: 16,
              394264576: 1073741824,
              411041792: 1074282496,
              427819008: 1073741840,
              444596224: 1073758224,
              461373440: 524304,
              478150656: 0,
              494927872: 16400,
              511705088: 1074266128,
              528482304: 540672
            },
            {
              0: 260,
              1048576: 0,
              2097152: 67109120,
              3145728: 65796,
              4194304: 65540,
              5242880: 67108868,
              6291456: 67174660,
              7340032: 67174400,
              8388608: 67108864,
              9437184: 67174656,
              10485760: 65792,
              11534336: 67174404,
              12582912: 67109124,
              13631488: 65536,
              14680064: 4,
              15728640: 256,
              524288: 67174656,
              1572864: 67174404,
              2621440: 0,
              3670016: 67109120,
              4718592: 67108868,
              5767168: 65536,
              6815744: 65540,
              7864320: 260,
              8912896: 4,
              9961472: 256,
              11010048: 67174400,
              12058624: 65796,
              13107200: 65792,
              14155776: 67109124,
              15204352: 67174660,
              16252928: 67108864,
              16777216: 67174656,
              17825792: 65540,
              18874368: 65536,
              19922944: 67109120,
              20971520: 256,
              22020096: 67174660,
              23068672: 67108868,
              24117248: 0,
              25165824: 67109124,
              26214400: 67108864,
              27262976: 4,
              28311552: 65792,
              29360128: 67174400,
              30408704: 260,
              31457280: 65796,
              32505856: 67174404,
              17301504: 67108864,
              18350080: 260,
              19398656: 67174656,
              20447232: 0,
              21495808: 65540,
              22544384: 67109120,
              23592960: 256,
              24641536: 67174404,
              25690112: 65536,
              26738688: 67174660,
              27787264: 65796,
              28835840: 67108868,
              29884416: 67109124,
              30932992: 67174400,
              31981568: 4,
              33030144: 65792
            },
            {
              0: 2151682048,
              65536: 2147487808,
              131072: 4198464,
              196608: 2151677952,
              262144: 0,
              327680: 4198400,
              393216: 2147483712,
              458752: 4194368,
              524288: 2147483648,
              589824: 4194304,
              655360: 64,
              720896: 2147487744,
              786432: 2151678016,
              851968: 4160,
              917504: 4096,
              983040: 2151682112,
              32768: 2147487808,
              98304: 64,
              163840: 2151678016,
              229376: 2147487744,
              294912: 4198400,
              360448: 2151682112,
              425984: 0,
              491520: 2151677952,
              557056: 4096,
              622592: 2151682048,
              688128: 4194304,
              753664: 4160,
              819200: 2147483648,
              884736: 4194368,
              950272: 4198464,
              1015808: 2147483712,
              1048576: 4194368,
              1114112: 4198400,
              1179648: 2147483712,
              1245184: 0,
              1310720: 4160,
              1376256: 2151678016,
              1441792: 2151682048,
              1507328: 2147487808,
              1572864: 2151682112,
              1638400: 2147483648,
              1703936: 2151677952,
              1769472: 4198464,
              1835008: 2147487744,
              1900544: 4194304,
              1966080: 64,
              2031616: 4096,
              1081344: 2151677952,
              1146880: 2151682112,
              1212416: 0,
              1277952: 4198400,
              1343488: 4194368,
              1409024: 2147483648,
              1474560: 2147487808,
              1540096: 64,
              1605632: 2147483712,
              1671168: 4096,
              1736704: 2147487744,
              1802240: 2151678016,
              1867776: 4160,
              1933312: 2151682048,
              1998848: 4194304,
              2064384: 4198464
            },
            {
              0: 128,
              4096: 17039360,
              8192: 262144,
              12288: 536870912,
              16384: 537133184,
              20480: 16777344,
              24576: 553648256,
              28672: 262272,
              32768: 16777216,
              36864: 537133056,
              40960: 536871040,
              45056: 553910400,
              49152: 553910272,
              53248: 0,
              57344: 17039488,
              61440: 553648128,
              2048: 17039488,
              6144: 553648256,
              10240: 128,
              14336: 17039360,
              18432: 262144,
              22528: 537133184,
              26624: 553910272,
              30720: 536870912,
              34816: 537133056,
              38912: 0,
              43008: 553910400,
              47104: 16777344,
              51200: 536871040,
              55296: 553648128,
              59392: 16777216,
              63488: 262272,
              65536: 262144,
              69632: 128,
              73728: 536870912,
              77824: 553648256,
              81920: 16777344,
              86016: 553910272,
              90112: 537133184,
              94208: 16777216,
              98304: 553910400,
              102400: 553648128,
              106496: 17039360,
              110592: 537133056,
              114688: 262272,
              118784: 536871040,
              122880: 0,
              126976: 17039488,
              67584: 553648256,
              71680: 16777216,
              75776: 17039360,
              79872: 537133184,
              83968: 536870912,
              88064: 17039488,
              92160: 128,
              96256: 553910272,
              100352: 262272,
              104448: 553910400,
              108544: 0,
              112640: 553648128,
              116736: 16777344,
              120832: 262144,
              124928: 537133056,
              129024: 536871040
            },
            {
              0: 268435464,
              256: 8192,
              512: 270532608,
              768: 270540808,
              1024: 268443648,
              1280: 2097152,
              1536: 2097160,
              1792: 268435456,
              2048: 0,
              2304: 268443656,
              2560: 2105344,
              2816: 8,
              3072: 270532616,
              3328: 2105352,
              3584: 8200,
              3840: 270540800,
              128: 270532608,
              384: 270540808,
              640: 8,
              896: 2097152,
              1152: 2105352,
              1408: 268435464,
              1664: 268443648,
              1920: 8200,
              2176: 2097160,
              2432: 8192,
              2688: 268443656,
              2944: 270532616,
              3200: 0,
              3456: 270540800,
              3712: 2105344,
              3968: 268435456,
              4096: 268443648,
              4352: 270532616,
              4608: 270540808,
              4864: 8200,
              5120: 2097152,
              5376: 268435456,
              5632: 268435464,
              5888: 2105344,
              6144: 2105352,
              6400: 0,
              6656: 8,
              6912: 270532608,
              7168: 8192,
              7424: 268443656,
              7680: 270540800,
              7936: 2097160,
              4224: 8,
              4480: 2105344,
              4736: 2097152,
              4992: 268435464,
              5248: 268443648,
              5504: 8200,
              5760: 270540808,
              6016: 270532608,
              6272: 270540800,
              6528: 270532616,
              6784: 8192,
              7040: 2105352,
              7296: 2097160,
              7552: 0,
              7808: 268435456,
              8064: 268443656
            },
            {
              0: 1048576,
              16: 33555457,
              32: 1024,
              48: 1049601,
              64: 34604033,
              80: 0,
              96: 1,
              112: 34603009,
              128: 33555456,
              144: 1048577,
              160: 33554433,
              176: 34604032,
              192: 34603008,
              208: 1025,
              224: 1049600,
              240: 33554432,
              8: 34603009,
              24: 0,
              40: 33555457,
              56: 34604032,
              72: 1048576,
              88: 33554433,
              104: 33554432,
              120: 1025,
              136: 1049601,
              152: 33555456,
              168: 34603008,
              184: 1048577,
              200: 1024,
              216: 34604033,
              232: 1,
              248: 1049600,
              256: 33554432,
              272: 1048576,
              288: 33555457,
              304: 34603009,
              320: 1048577,
              336: 33555456,
              352: 34604032,
              368: 1049601,
              384: 1025,
              400: 34604033,
              416: 1049600,
              432: 1,
              448: 0,
              464: 34603008,
              480: 33554433,
              496: 1024,
              264: 1049600,
              280: 33555457,
              296: 34603009,
              312: 1,
              328: 33554432,
              344: 1048576,
              360: 1025,
              376: 34604032,
              392: 33554433,
              408: 34603008,
              424: 0,
              440: 34604033,
              456: 1049601,
              472: 1024,
              488: 33555456,
              504: 1048577
            },
            {
              0: 134219808,
              1: 131072,
              2: 134217728,
              3: 32,
              4: 131104,
              5: 134350880,
              6: 134350848,
              7: 2048,
              8: 134348800,
              9: 134219776,
              10: 133120,
              11: 134348832,
              12: 2080,
              13: 0,
              14: 134217760,
              15: 133152,
              2147483648: 2048,
              2147483649: 134350880,
              2147483650: 134219808,
              2147483651: 134217728,
              2147483652: 134348800,
              2147483653: 133120,
              2147483654: 133152,
              2147483655: 32,
              2147483656: 134217760,
              2147483657: 2080,
              2147483658: 131104,
              2147483659: 134350848,
              2147483660: 0,
              2147483661: 134348832,
              2147483662: 134219776,
              2147483663: 131072,
              16: 133152,
              17: 134350848,
              18: 32,
              19: 2048,
              20: 134219776,
              21: 134217760,
              22: 134348832,
              23: 131072,
              24: 0,
              25: 131104,
              26: 134348800,
              27: 134219808,
              28: 134350880,
              29: 133120,
              30: 2080,
              31: 134217728,
              2147483664: 131072,
              2147483665: 2048,
              2147483666: 134348832,
              2147483667: 133152,
              2147483668: 32,
              2147483669: 134348800,
              2147483670: 134217728,
              2147483671: 134219808,
              2147483672: 134350880,
              2147483673: 134217760,
              2147483674: 134219776,
              2147483675: 0,
              2147483676: 133120,
              2147483677: 2080,
              2147483678: 131104,
              2147483679: 134350848
            }
          ];
          var SBOX_MASK = [
            4160749569,
            528482304,
            33030144,
            2064384,
            129024,
            8064,
            504,
            2147483679
          ];
          var DES = C_algo.DES = BlockCipher.extend({
            _doReset: function() {
              var key = this._key;
              var keyWords = key.words;
              var keyBits = [];
              for (var i = 0; i < 56; i++) {
                var keyBitPos = PC1[i] - 1;
                keyBits[i] = keyWords[keyBitPos >>> 5] >>> 31 - keyBitPos % 32 & 1;
              }
              var subKeys = this._subKeys = [];
              for (var nSubKey = 0; nSubKey < 16; nSubKey++) {
                var subKey = subKeys[nSubKey] = [];
                var bitShift = BIT_SHIFTS[nSubKey];
                for (var i = 0; i < 24; i++) {
                  subKey[i / 6 | 0] |= keyBits[(PC2[i] - 1 + bitShift) % 28] << 31 - i % 6;
                  subKey[4 + (i / 6 | 0)] |= keyBits[28 + (PC2[i + 24] - 1 + bitShift) % 28] << 31 - i % 6;
                }
                subKey[0] = subKey[0] << 1 | subKey[0] >>> 31;
                for (var i = 1; i < 7; i++) {
                  subKey[i] = subKey[i] >>> (i - 1) * 4 + 3;
                }
                subKey[7] = subKey[7] << 5 | subKey[7] >>> 27;
              }
              var invSubKeys = this._invSubKeys = [];
              for (var i = 0; i < 16; i++) {
                invSubKeys[i] = subKeys[15 - i];
              }
            },
            encryptBlock: function(M, offset) {
              this._doCryptBlock(M, offset, this._subKeys);
            },
            decryptBlock: function(M, offset) {
              this._doCryptBlock(M, offset, this._invSubKeys);
            },
            _doCryptBlock: function(M, offset, subKeys) {
              this._lBlock = M[offset];
              this._rBlock = M[offset + 1];
              exchangeLR.call(this, 4, 252645135);
              exchangeLR.call(this, 16, 65535);
              exchangeRL.call(this, 2, 858993459);
              exchangeRL.call(this, 8, 16711935);
              exchangeLR.call(this, 1, 1431655765);
              for (var round = 0; round < 16; round++) {
                var subKey = subKeys[round];
                var lBlock = this._lBlock;
                var rBlock = this._rBlock;
                var f = 0;
                for (var i = 0; i < 8; i++) {
                  f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];
                }
                this._lBlock = rBlock;
                this._rBlock = lBlock ^ f;
              }
              var t = this._lBlock;
              this._lBlock = this._rBlock;
              this._rBlock = t;
              exchangeLR.call(this, 1, 1431655765);
              exchangeRL.call(this, 8, 16711935);
              exchangeRL.call(this, 2, 858993459);
              exchangeLR.call(this, 16, 65535);
              exchangeLR.call(this, 4, 252645135);
              M[offset] = this._lBlock;
              M[offset + 1] = this._rBlock;
            },
            keySize: 64 / 32,
            ivSize: 64 / 32,
            blockSize: 64 / 32
          });
          function exchangeLR(offset, mask) {
            var t = (this._lBlock >>> offset ^ this._rBlock) & mask;
            this._rBlock ^= t;
            this._lBlock ^= t << offset;
          }
          function exchangeRL(offset, mask) {
            var t = (this._rBlock >>> offset ^ this._lBlock) & mask;
            this._lBlock ^= t;
            this._rBlock ^= t << offset;
          }
          C.DES = BlockCipher._createHelper(DES);
          var TripleDES = C_algo.TripleDES = BlockCipher.extend({
            _doReset: function() {
              var key = this._key;
              var keyWords = key.words;
              this._des1 = DES.createEncryptor(WordArray.create(keyWords.slice(0, 2)));
              this._des2 = DES.createEncryptor(WordArray.create(keyWords.slice(2, 4)));
              this._des3 = DES.createEncryptor(WordArray.create(keyWords.slice(4, 6)));
            },
            encryptBlock: function(M, offset) {
              this._des1.encryptBlock(M, offset);
              this._des2.decryptBlock(M, offset);
              this._des3.encryptBlock(M, offset);
            },
            decryptBlock: function(M, offset) {
              this._des3.decryptBlock(M, offset);
              this._des2.encryptBlock(M, offset);
              this._des1.decryptBlock(M, offset);
            },
            keySize: 192 / 32,
            ivSize: 64 / 32,
            blockSize: 64 / 32
          });
          C.TripleDES = BlockCipher._createHelper(TripleDES);
        })();
        return CryptoJS2.TripleDES;
      });
    })(tripledes);
    return tripledes.exports;
  }
  var rc4 = { exports: {} };
  var hasRequiredRc4;
  function requireRc4() {
    if (hasRequiredRc4)
      return rc4.exports;
    hasRequiredRc4 = 1;
    (function(module, exports) {
      (function(root, factory, undef) {
        {
          module.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        (function() {
          var C = CryptoJS2;
          var C_lib = C.lib;
          var StreamCipher = C_lib.StreamCipher;
          var C_algo = C.algo;
          var RC4 = C_algo.RC4 = StreamCipher.extend({
            _doReset: function() {
              var key = this._key;
              var keyWords = key.words;
              var keySigBytes = key.sigBytes;
              var S = this._S = [];
              for (var i = 0; i < 256; i++) {
                S[i] = i;
              }
              for (var i = 0, j = 0; i < 256; i++) {
                var keyByteIndex = i % keySigBytes;
                var keyByte = keyWords[keyByteIndex >>> 2] >>> 24 - keyByteIndex % 4 * 8 & 255;
                j = (j + S[i] + keyByte) % 256;
                var t = S[i];
                S[i] = S[j];
                S[j] = t;
              }
              this._i = this._j = 0;
            },
            _doProcessBlock: function(M, offset) {
              M[offset] ^= generateKeystreamWord.call(this);
            },
            keySize: 256 / 32,
            ivSize: 0
          });
          function generateKeystreamWord() {
            var S = this._S;
            var i = this._i;
            var j = this._j;
            var keystreamWord = 0;
            for (var n = 0; n < 4; n++) {
              i = (i + 1) % 256;
              j = (j + S[i]) % 256;
              var t = S[i];
              S[i] = S[j];
              S[j] = t;
              keystreamWord |= S[(S[i] + S[j]) % 256] << 24 - n * 8;
            }
            this._i = i;
            this._j = j;
            return keystreamWord;
          }
          C.RC4 = StreamCipher._createHelper(RC4);
          var RC4Drop = C_algo.RC4Drop = RC4.extend({
            /**
             * Configuration options.
             *
             * @property {number} drop The number of keystream words to drop. Default 192
             */
            cfg: RC4.cfg.extend({
              drop: 192
            }),
            _doReset: function() {
              RC4._doReset.call(this);
              for (var i = this.cfg.drop; i > 0; i--) {
                generateKeystreamWord.call(this);
              }
            }
          });
          C.RC4Drop = StreamCipher._createHelper(RC4Drop);
        })();
        return CryptoJS2.RC4;
      });
    })(rc4);
    return rc4.exports;
  }
  var rabbit = { exports: {} };
  var hasRequiredRabbit;
  function requireRabbit() {
    if (hasRequiredRabbit)
      return rabbit.exports;
    hasRequiredRabbit = 1;
    (function(module, exports) {
      (function(root, factory, undef) {
        {
          module.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        (function() {
          var C = CryptoJS2;
          var C_lib = C.lib;
          var StreamCipher = C_lib.StreamCipher;
          var C_algo = C.algo;
          var S = [];
          var C_ = [];
          var G = [];
          var Rabbit = C_algo.Rabbit = StreamCipher.extend({
            _doReset: function() {
              var K = this._key.words;
              var iv = this.cfg.iv;
              for (var i = 0; i < 4; i++) {
                K[i] = (K[i] << 8 | K[i] >>> 24) & 16711935 | (K[i] << 24 | K[i] >>> 8) & 4278255360;
              }
              var X = this._X = [
                K[0],
                K[3] << 16 | K[2] >>> 16,
                K[1],
                K[0] << 16 | K[3] >>> 16,
                K[2],
                K[1] << 16 | K[0] >>> 16,
                K[3],
                K[2] << 16 | K[1] >>> 16
              ];
              var C2 = this._C = [
                K[2] << 16 | K[2] >>> 16,
                K[0] & 4294901760 | K[1] & 65535,
                K[3] << 16 | K[3] >>> 16,
                K[1] & 4294901760 | K[2] & 65535,
                K[0] << 16 | K[0] >>> 16,
                K[2] & 4294901760 | K[3] & 65535,
                K[1] << 16 | K[1] >>> 16,
                K[3] & 4294901760 | K[0] & 65535
              ];
              this._b = 0;
              for (var i = 0; i < 4; i++) {
                nextState.call(this);
              }
              for (var i = 0; i < 8; i++) {
                C2[i] ^= X[i + 4 & 7];
              }
              if (iv) {
                var IV = iv.words;
                var IV_0 = IV[0];
                var IV_1 = IV[1];
                var i0 = (IV_0 << 8 | IV_0 >>> 24) & 16711935 | (IV_0 << 24 | IV_0 >>> 8) & 4278255360;
                var i2 = (IV_1 << 8 | IV_1 >>> 24) & 16711935 | (IV_1 << 24 | IV_1 >>> 8) & 4278255360;
                var i1 = i0 >>> 16 | i2 & 4294901760;
                var i3 = i2 << 16 | i0 & 65535;
                C2[0] ^= i0;
                C2[1] ^= i1;
                C2[2] ^= i2;
                C2[3] ^= i3;
                C2[4] ^= i0;
                C2[5] ^= i1;
                C2[6] ^= i2;
                C2[7] ^= i3;
                for (var i = 0; i < 4; i++) {
                  nextState.call(this);
                }
              }
            },
            _doProcessBlock: function(M, offset) {
              var X = this._X;
              nextState.call(this);
              S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;
              S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;
              S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;
              S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;
              for (var i = 0; i < 4; i++) {
                S[i] = (S[i] << 8 | S[i] >>> 24) & 16711935 | (S[i] << 24 | S[i] >>> 8) & 4278255360;
                M[offset + i] ^= S[i];
              }
            },
            blockSize: 128 / 32,
            ivSize: 64 / 32
          });
          function nextState() {
            var X = this._X;
            var C2 = this._C;
            for (var i = 0; i < 8; i++) {
              C_[i] = C2[i];
            }
            C2[0] = C2[0] + 1295307597 + this._b | 0;
            C2[1] = C2[1] + 3545052371 + (C2[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
            C2[2] = C2[2] + 886263092 + (C2[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
            C2[3] = C2[3] + 1295307597 + (C2[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
            C2[4] = C2[4] + 3545052371 + (C2[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
            C2[5] = C2[5] + 886263092 + (C2[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
            C2[6] = C2[6] + 1295307597 + (C2[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
            C2[7] = C2[7] + 3545052371 + (C2[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
            this._b = C2[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;
            for (var i = 0; i < 8; i++) {
              var gx = X[i] + C2[i];
              var ga = gx & 65535;
              var gb = gx >>> 16;
              var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
              var gl = ((gx & 4294901760) * gx | 0) + ((gx & 65535) * gx | 0);
              G[i] = gh ^ gl;
            }
            X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;
            X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;
            X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;
            X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;
            X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;
            X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;
            X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;
            X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;
          }
          C.Rabbit = StreamCipher._createHelper(Rabbit);
        })();
        return CryptoJS2.Rabbit;
      });
    })(rabbit);
    return rabbit.exports;
  }
  var rabbitLegacy = { exports: {} };
  var hasRequiredRabbitLegacy;
  function requireRabbitLegacy() {
    if (hasRequiredRabbitLegacy)
      return rabbitLegacy.exports;
    hasRequiredRabbitLegacy = 1;
    (function(module, exports) {
      (function(root, factory, undef) {
        {
          module.exports = factory(requireCore(), requireEncBase64(), requireMd5(), requireEvpkdf(), requireCipherCore());
        }
      })(commonjsGlobal, function(CryptoJS2) {
        (function() {
          var C = CryptoJS2;
          var C_lib = C.lib;
          var StreamCipher = C_lib.StreamCipher;
          var C_algo = C.algo;
          var S = [];
          var C_ = [];
          var G = [];
          var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({
            _doReset: function() {
              var K = this._key.words;
              var iv = this.cfg.iv;
              var X = this._X = [
                K[0],
                K[3] << 16 | K[2] >>> 16,
                K[1],
                K[0] << 16 | K[3] >>> 16,
                K[2],
                K[1] << 16 | K[0] >>> 16,
                K[3],
                K[2] << 16 | K[1] >>> 16
              ];
              var C2 = this._C = [
                K[2] << 16 | K[2] >>> 16,
                K[0] & 4294901760 | K[1] & 65535,
                K[3] << 16 | K[3] >>> 16,
                K[1] & 4294901760 | K[2] & 65535,
                K[0] << 16 | K[0] >>> 16,
                K[2] & 4294901760 | K[3] & 65535,
                K[1] << 16 | K[1] >>> 16,
                K[3] & 4294901760 | K[0] & 65535
              ];
              this._b = 0;
              for (var i = 0; i < 4; i++) {
                nextState.call(this);
              }
              for (var i = 0; i < 8; i++) {
                C2[i] ^= X[i + 4 & 7];
              }
              if (iv) {
                var IV = iv.words;
                var IV_0 = IV[0];
                var IV_1 = IV[1];
                var i0 = (IV_0 << 8 | IV_0 >>> 24) & 16711935 | (IV_0 << 24 | IV_0 >>> 8) & 4278255360;
                var i2 = (IV_1 << 8 | IV_1 >>> 24) & 16711935 | (IV_1 << 24 | IV_1 >>> 8) & 4278255360;
                var i1 = i0 >>> 16 | i2 & 4294901760;
                var i3 = i2 << 16 | i0 & 65535;
                C2[0] ^= i0;
                C2[1] ^= i1;
                C2[2] ^= i2;
                C2[3] ^= i3;
                C2[4] ^= i0;
                C2[5] ^= i1;
                C2[6] ^= i2;
                C2[7] ^= i3;
                for (var i = 0; i < 4; i++) {
                  nextState.call(this);
                }
              }
            },
            _doProcessBlock: function(M, offset) {
              var X = this._X;
              nextState.call(this);
              S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;
              S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;
              S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;
              S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;
              for (var i = 0; i < 4; i++) {
                S[i] = (S[i] << 8 | S[i] >>> 24) & 16711935 | (S[i] << 24 | S[i] >>> 8) & 4278255360;
                M[offset + i] ^= S[i];
              }
            },
            blockSize: 128 / 32,
            ivSize: 64 / 32
          });
          function nextState() {
            var X = this._X;
            var C2 = this._C;
            for (var i = 0; i < 8; i++) {
              C_[i] = C2[i];
            }
            C2[0] = C2[0] + 1295307597 + this._b | 0;
            C2[1] = C2[1] + 3545052371 + (C2[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
            C2[2] = C2[2] + 886263092 + (C2[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
            C2[3] = C2[3] + 1295307597 + (C2[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
            C2[4] = C2[4] + 3545052371 + (C2[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
            C2[5] = C2[5] + 886263092 + (C2[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
            C2[6] = C2[6] + 1295307597 + (C2[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
            C2[7] = C2[7] + 3545052371 + (C2[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
            this._b = C2[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;
            for (var i = 0; i < 8; i++) {
              var gx = X[i] + C2[i];
              var ga = gx & 65535;
              var gb = gx >>> 16;
              var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
              var gl = ((gx & 4294901760) * gx | 0) + ((gx & 65535) * gx | 0);
              G[i] = gh ^ gl;
            }
            X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;
            X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;
            X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;
            X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;
            X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;
            X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;
            X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;
            X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;
          }
          C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);
        })();
        return CryptoJS2.RabbitLegacy;
      });
    })(rabbitLegacy);
    return rabbitLegacy.exports;
  }
  (function(module, exports) {
    (function(root, factory, undef) {
      {
        module.exports = factory(requireCore(), requireX64Core(), requireLibTypedarrays(), requireEncUtf16(), requireEncBase64(), requireMd5(), requireSha1(), requireSha256(), requireSha224(), requireSha512(), requireSha384(), requireSha3(), requireRipemd160(), requireHmac(), requirePbkdf2(), requireEvpkdf(), requireCipherCore(), requireModeCfb(), requireModeCtr(), requireModeCtrGladman(), requireModeOfb(), requireModeEcb(), requirePadAnsix923(), requirePadIso10126(), requirePadIso97971(), requirePadZeropadding(), requirePadNopadding(), requireFormatHex(), requireAes(), requireTripledes(), requireRc4(), requireRabbit(), requireRabbitLegacy());
      }
    })(commonjsGlobal, function(CryptoJS2) {
      return CryptoJS2;
    });
  })(cryptoJs);
  var cryptoJsExports = cryptoJs.exports;
  const CryptoJS = /* @__PURE__ */ getDefaultExportFromCjs(cryptoJsExports);
  const SECRET_KEY = "campus";
  const USER_INFO_KEY = "userInfo";
  function getRandomWord() {
    const randomWords = [
      "apple",
      "banana",
      "cherry",
      "date",
      "elderberry",
      "fig",
      "grape",
      "honeydew",
      "kiwi",
      "lemon",
      "mango",
      "nectarine",
      "orange",
      "papaya",
      "quince",
      "raspberry",
      "strawberry",
      "tangerine",
      "ugli",
      "vanilla"
    ];
    const randomIndex = Math.floor(Math.random() * randomWords.length);
    return randomWords[randomIndex];
  }
  function generateSalt() {
    const saltLength = 16;
    let salt = "";
    for (let i = 0; i < saltLength; i++) {
      salt += getRandomWord();
    }
    return salt;
  }
  function encryptData(data) {
    const salt = generateSalt();
    const iv = CryptoJS.lib.WordArray.random(16);
    const encrypted = CryptoJS.AES.encrypt(JSON.stringify(data), SECRET_KEY + salt, {
      iv,
      padding: CryptoJS.pad.Pkcs7,
      mode: CryptoJS.mode.CBC
    });
    return salt + ":" + iv.toString(CryptoJS.enc.Base64) + ":" + encrypted.toString();
  }
  function decryptData(encryptedData) {
    const parts = encryptedData.split(":");
    const salt = parts[0];
    const iv = CryptoJS.enc.Base64.parse(parts[1]);
    const encrypted = parts[2];
    const decrypted = CryptoJS.AES.decrypt(encrypted, SECRET_KEY + salt, {
      iv,
      padding: CryptoJS.pad.Pkcs7,
      mode: CryptoJS.mode.CBC
    });
    const originalText = decrypted.toString(CryptoJS.enc.Utf8);
    return JSON.parse(originalText);
  }
  function setUserInfo(userInfo) {
    const encryptedData = encryptData(userInfo);
    uni.setStorageSync(USER_INFO_KEY, encryptedData);
  }
  function getUserInfo() {
    const encryptedData = uni.getStorageSync(USER_INFO_KEY);
    if (encryptedData) {
      return decryptData(encryptedData);
    }
    return null;
  }
  function clearUserInfo() {
    uni.removeStorageSync(USER_INFO_KEY);
  }
  const base_url = "http://localhost:8090";
  const defaultHeader = {
    "Content-Type": "application/json;charset=UTF-8",
    "Authorization": "Basic c2FiZXI6c2FiZXJfc2VjcmV0"
  };
  const handleLogin = () => {
    uni.clearStorageSync();
    uni.showModal({
      title: "提示",
      content: "请登录",
      showCancel: false,
      success() {
        setTimeout(() => {
          uni.reLaunch({
            url: "/pages/login/login"
          });
        }, 1e3);
      }
    });
  };
  const request = (params) => {
    let url2 = params.url;
    let method = params.method || "GET";
    let data = params.data || {};
    let enableChunked = params.enableChunked || false;
    let header = {
      "sa-Token": uni.getStorageSync("token") || "",
      ...defaultHeader,
      ...params.header
    };
    return new Promise((resolve, reject) => {
      uni.request({
        url: base_url + url2,
        method,
        header,
        data,
        enableChunked,
        withCredentials: true,
        success(response) {
          const res = response;
          if (res.data.code === 200) {
            resolve(res.data);
          } else {
            switch (res.data.code) {
              case 40100:
                handleLogin();
                break;
              case 40400:
                uni.showToast({
                  title: "请求地址不存在...",
                  icon: "error",
                  duration: 2e3
                });
                break;
              case 4e4:
                uni.showToast({
                  title: res.data.message,
                  icon: "error",
                  duration: 2e3
                });
                break;
              default:
                uni.showToast({
                  title: res.data.message,
                  icon: "error",
                  duration: 2e3
                });
                break;
            }
          }
        },
        fail(err) {
          formatAppLog("log", "at utils/request.ts:94", err);
          if (err.errMsg.includes("request:fail")) {
            uni.showToast({
              title: "网络异常",
              icon: "error",
              duration: 2e3
            });
          } else {
            uni.showToast({
              title: "未知异常",
              icon: "error",
              duration: 2e3
            });
          }
          reject(err);
        },
        complete() {
        }
      });
    });
  };
  function addArticle(data) {
    return request({
      url: "/api/article/add",
      method: "POST",
      data
    });
  }
  function getArticleList(data) {
    return request({
      url: "/api/article/articleList/page",
      method: "POST",
      data
    });
  }
  function getArticleVOLikeListByUserId(id) {
    return request({
      url: `/api/article/articleLike/${id}`,
      method: "GET"
    });
  }
  function likeArticle(id) {
    return request({
      url: `/api/article/like/` + id,
      method: "GET"
    });
  }
  function getArticleByArticleId(id) {
    return request({
      url: `/api/article/get/detail?articleId=${id}`,
      method: "GET"
    });
  }
  function getArticleTags() {
    return request({
      url: "/api/article/tags",
      method: "GET"
    });
  }
  function deleteArticle(id) {
    return request({
      url: `/api/article/delete?id=${encodeURIComponent(id)}`,
      method: "POST"
    });
  }
  const _sfc_main$U = /* @__PURE__ */ vue.defineComponent({
    __name: "index",
    setup(__props, { expose: __expose }) {
      const message = useMessage();
      const { closeOutside } = useQueue();
      const banner = vue.ref(true);
      const toast = useToast();
      const searchValue = vue.ref("");
      const onSearch = (value) => {
        formatAppLog("log", "at pages/index/index.vue:196", "搜索:", value);
      };
      const successLoadBanner = () => {
        banner.value = false;
      };
      const onActivity = () => {
        formatAppLog("log", "at pages/index/index.vue:204", "点击活动模块");
        uni.navigateTo({
          url: "/pages/activity/activity"
        });
      };
      const onClub = () => {
        formatAppLog("log", "at pages/index/index.vue:212", "点击社团圈模块");
        uni.navigateTo({
          url: "/pages/club/club"
        });
      };
      const onStudy = () => {
        uni.navigateTo({
          url: "/pages/study/study"
        });
        formatAppLog("log", "at pages/index/index.vue:222", "点击学习圈模块");
      };
      const lostFound = () => {
        uni.navigateTo({
          url: "/pages/lostFound/lostFound"
        });
        formatAppLog("log", "at pages/index/index.vue:228", "点击失物招领模块");
      };
      const articleList = vue.ref([]);
      const pagination = vue.reactive({
        current: 1,
        pageSize: 5,
        total: 0,
        hasMore: true,
        // 新增刷新锁防止重复请求
        isRefreshing: false
      });
      const loadStatus = vue.ref("loading");
      const needRefresh = vue.ref(false);
      const getImageLayoutClass = (count) => {
        switch (count) {
          case 1:
            return "one-column";
          case 2:
          case 4:
            return "two-columns";
          case 3:
            return "three-columns";
          default:
            return "three-columns";
        }
      };
      onReachBottom(() => {
        formatAppLog("log", "at pages/index/index.vue:267", "到底部了");
        formatAppLog("log", "at pages/index/index.vue:269", articleList.value);
        fetchArticles();
      });
      onPullDownRefresh(() => {
        if (!pagination.isRefreshing) {
          fetchArticles(true).then(() => {
            toast.show("加载成功");
          }).finally(() => {
            setTimeout(() => {
              uni.stopPullDownRefresh();
            }, 500);
          });
        }
      });
      const fetchArticles = async (isRefresh = false) => {
        if (pagination.isRefreshing)
          return;
        pagination.isRefreshing = true;
        try {
          if (isRefresh) {
            pagination.current = 1;
            pagination.hasMore = true;
            articleList.value = [];
            uni.showNavigationBarLoading();
          }
          if (!pagination.hasMore) {
            loadStatus.value = "finished";
            return;
          }
          const res = await getArticleList({
            current: pagination.current,
            pageSize: pagination.pageSize
          });
          if (res.code === 200) {
            articleList.value = isRefresh ? res.data.records : [...articleList.value, ...res.data.records];
            pagination.total = res.data.total;
            pagination.hasMore = pagination.current * pagination.pageSize < res.data.total;
            pagination.current += 1;
            loadStatus.value = pagination.hasMore ? "loading" : "finished";
          }
        } catch (err) {
          formatAppLog("error", "at pages/index/index.vue:325", "加载失败:", err);
          loadStatus.value = "error";
        } finally {
          pagination.isRefreshing = false;
          uni.hideNavigationBarLoading();
          uni.stopPullDownRefresh();
        }
      };
      const retryLoad = () => {
        formatAppLog("log", "at pages/index/index.vue:336", "加载......");
        loadStatus.value = "loading";
        fetchArticles();
      };
      const handleArticleInfo = (id) => {
        uni.navigateTo({
          url: `/pages/articleInfo/articleInfo?articleId=${id}`
        });
      };
      const handlePublishArticle = () => {
        const user = getUserInfo();
        formatAppLog("log", "at pages/index/index.vue:352", user);
        if (!user) {
          toast.show({
            iconClass: "info-circle",
            position: "middle",
            msg: "请先登录"
          });
          setTimeout(() => {
            uni.reLaunch({
              url: "/pages/login/login"
            });
          }, 1e3);
        } else {
          uni.navigateTo({
            url: "/pages/publishArticle/publishArticle"
          });
        }
      };
      onShow(() => {
        if (needRefresh.value) {
          formatAppLog("log", "at pages/index/index.vue:376", "需要刷新页面");
          const pages = getCurrentPages();
          formatAppLog("log", "at pages/index/index.vue:379", "当前页面栈:", pages.map((p) => p.route));
          pagination.current = 1;
          pagination.hasMore = true;
          articleList.value = [];
          fetchArticles(true);
          needRefresh.value = false;
        }
      });
      onLoad(() => {
        fetchArticles();
      });
      const previewImage = (url2, urlList) => {
        uni.previewImage({
          current: url2,
          // 当前显示图片的http链接
          urls: urlList
          // 需要预览的图片http链接列表
        });
      };
      const handleLikeItem = async (id, index) => {
        formatAppLog("log", "at pages/index/index.vue:407", id, index);
        const res = await likeArticle(id);
        if (res.code == 200) {
          if (articleList.value[index].isLike) {
            articleList.value[index].likeCount -= 1;
            articleList.value[index].isLike = false;
          } else {
            articleList.value[index].likeCount += 1;
            articleList.value[index].isLike = true;
          }
        } else {
          toast.show(res.message);
        }
      };
      const menu = vue.ref([
        {
          iconClass: "warning",
          content: "举报"
        }
      ]);
      function link2(id) {
        formatAppLog("log", "at pages/index/index.vue:431", id);
        toast.show("敬请期待");
      }
      const handleToDetail = (id) => {
        formatAppLog("log", "at pages/index/index.vue:439", "id", id);
        uni.navigateTo({
          url: `/pages/userDetail/userDetail?userId=${id}`
        });
      };
      onLoad(() => {
        fetchArticles();
      });
      const showMessageAlert = () => {
        message.alert({
          msg: `使用声明通告：\r平台内禁止发布任何有关政治立场、色情、暴力等一系列非法言论，如有发现将封禁处理，所有用户均可发布内容，谁发布谁负责

“青春共享站”投稿规范>>>
①平台内禁止售卖论文，毕设，公章，假条等
②投稿内容屏蔽联系方式等敏感信息，如有需要请在评论区发布
③防止诈骗提醒，任何涉及金钱交易行为或买卖物品行为一定要面对面线下交易完成
④平台内禁止骚扰他人，发现一律禁言处理
⑤与平台无关的第三方内容需自行分辨
⑥欢迎大家积极举报不良内容营造和谐平台

网络不是法外之地，要知敬畏明底线
以上所有规则最终解释权归平台所有

本公告生效时间：2025年3月24日`,
          title: "官方通知",
          closeOnClickModal: false
        });
      };
      const setNeedRefresh = () => {
        needRefresh.value = true;
      };
      __expose({
        setNeedRefresh
      });
      onShareAppMessage((res) => {
        formatAppLog("log", "at pages/index/index.vue:481", res);
        return {
          title: "青春共享站",
          path: "/pages/index/index",
          imageUrl: "/static/logo.jpg"
          // 分享图片
        };
      });
      onShareTimeline(() => {
        return {
          title: "青春共享站",
          path: "/pages/index/index",
          imageUrl: "/static/logo.jpg"
          // 分享图片
        };
      });
      const __returned__ = { message, closeOutside, banner, toast, searchValue, onSearch, successLoadBanner, onActivity, onClub, onStudy, lostFound, articleList, pagination, loadStatus, needRefresh, getImageLayoutClass, fetchArticles, retryLoad, handleArticleInfo, handlePublishArticle, previewImage, handleLikeItem, menu, link: link2, handleToDetail, showMessageAlert, setNeedRefresh };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$T(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_wd_skeleton = resolveEasycom(vue.resolveDynamicComponent("wd-skeleton"), __easycom_0$6);
    const _component_wd_notice_bar = resolveEasycom(vue.resolveDynamicComponent("wd-notice-bar"), __easycom_0$4);
    const _component_wd_search = resolveEasycom(vue.resolveDynamicComponent("wd-search"), __easycom_1$5);
    const _component_wd_img = resolveEasycom(vue.resolveDynamicComponent("wd-img"), WdImg);
    const _component_wd_text = resolveEasycom(vue.resolveDynamicComponent("wd-text"), __easycom_1$4);
    const _component_wd_loading = resolveEasycom(vue.resolveDynamicComponent("wd-loading"), __easycom_0$3);
    const _component_wd_icon = resolveEasycom(vue.resolveDynamicComponent("wd-icon"), __easycom_0$5);
    const _component_wd_popover = resolveEasycom(vue.resolveDynamicComponent("wd-popover"), __easycom_9);
    const _component_wd_status_tip = resolveEasycom(vue.resolveDynamicComponent("wd-status-tip"), __easycom_4$1);
    const _component_wd_loadmore = resolveEasycom(vue.resolveDynamicComponent("wd-loadmore"), __easycom_10$1);
    const _component_wd_fab = resolveEasycom(vue.resolveDynamicComponent("wd-fab"), __easycom_10);
    const _component_wd_toast = resolveEasycom(vue.resolveDynamicComponent("wd-toast"), __easycom_2$2);
    const _component_wd_message_box = resolveEasycom(vue.resolveDynamicComponent("wd-message-box"), __easycom_12);
    return vue.openBlock(), vue.createElementBlock("view", { class: "index" }, [
      vue.createElementVNode("view", { class: "pop" }, [
        vue.createVNode(_component_wd_skeleton, {
          theme: "image",
          animation: "flashed",
          loading: $setup.banner
        }, {
          default: vue.withCtx(() => [
            vue.createCommentVNode(" 顶部banner "),
            vue.createElementVNode(
              "image",
              {
                class: "banner",
                src: "https://pic1.imgdb.cn/item/67d576ab88c538a9b5becd09.webp",
                onLoad: $setup.successLoadBanner
              },
              null,
              32
              /* NEED_HYDRATION */
            )
          ]),
          _: 1
          /* STABLE */
        }, 8, ["loading"]),
        vue.createCommentVNode("小鳄鱼"),
        vue.createElementVNode("image", {
          class: "flag",
          src: "https://pic1.imgdb.cn/item/67d56ea388c538a9b5becba1.webp"
        }),
        vue.createCommentVNode("  消息通知  "),
        vue.createElementVNode("view", { class: "message" }, [
          vue.createVNode(_component_wd_notice_bar, {
            text: "声明公告：平台内禁止发布任何有关政治立场、色情、暴力等一系列非法言论，如有发现将封禁处理，所有用户均可发布内容，谁发布谁负责",
            prefix: "check-outline",
            type: "info",
            "custom-class": "space"
          })
        ])
      ]),
      vue.createCommentVNode(" 搜索框 "),
      vue.createElementVNode("view", { class: "search-container" }, [
        vue.createVNode(_component_wd_search, {
          modelValue: $setup.searchValue,
          "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $setup.searchValue = $event),
          placeholder: "搜索",
          onSearch: $setup.onSearch,
          "hide-cancel": ""
        }, null, 8, ["modelValue"])
      ]),
      vue.createCommentVNode(" 模块导航 "),
      vue.createElementVNode("view", { class: "module-container" }, [
        vue.createCommentVNode("活动模块"),
        vue.createElementVNode("view", {
          class: "module-activity",
          onClick: $setup.onActivity
        }, [
          vue.createElementVNode("text", { class: "title" }, "校园活动"),
          vue.createElementVNode("text", { class: "profile" }, "校园新鲜事"),
          vue.createElementVNode("image", {
            src: "https://minio.fybreeze.cn/campus/I95haQscB2NT23e3f16a8b2920b53c25b9c0239505ef.webp",
            mode: "widthFix",
            style: { "width": "100%", "height": "100%", "filter": "drop-shadow(1px 5px 5px rgba(0,0,0,0.3))" }
          })
        ]),
        vue.createCommentVNode("社团圈模块"),
        vue.createElementVNode("view", {
          class: "module-club",
          onClick: $setup.onClub
        }, [
          vue.createElementVNode("text", { class: "title" }, "社团互动"),
          vue.createElementVNode("text", { class: "profile" }, "兴趣星球"),
          vue.createElementVNode("image", {
            src: "https://minio.fybreeze.cn/campus/OGVQu3sOFwbI446145dbc890ce7a5bed0c8be31c3049.webp",
            mode: "widthFix",
            style: { "width": "100%", "height": "100%", "filter": "drop-shadow(1px 5px 5px rgba(0,0,0,0.3))" }
          })
        ]),
        vue.createCommentVNode("学习圈模块"),
        vue.createElementVNode("view", {
          class: "module-study",
          onClick: $setup.onStudy
        }, [
          vue.createElementVNode("text", { class: "title" }, "学习交流"),
          vue.createElementVNode("text", { class: "profile" }, "逆袭指南"),
          vue.createElementVNode("image", {
            src: "https://minio.fybreeze.cn/campus/MdMaffVPSoFB1c3c5da5e5e7d9eafc38429679076bea.webp",
            mode: "widthFix",
            style: { "width": "100%", "height": "100%", "filter": "drop-shadow(1px 5px 5px rgba(0,0,0,0.3))" }
          })
        ]),
        vue.createCommentVNode("失物招领"),
        vue.createElementVNode("view", {
          class: "module-lost_found",
          onClick: $setup.lostFound
        }, [
          vue.createElementVNode("text", { class: "title" }, "失物招领"),
          vue.createElementVNode("text", { class: "profile" }, "寻物速配站"),
          vue.createElementVNode("image", {
            src: "https://minio.fybreeze.cn/campus/UvxiqTrRI3RPc609effd90e9de05ab01adc12e909a3c.webp",
            mode: "widthFix",
            style: { "width": "100%", "height": "100%", "filter": "drop-shadow(1px 5px 5px rgba(0,0,0,0.3))" }
          })
        ]),
        vue.createCommentVNode("二手交易 暂时遗弃 考虑UI设计，后续添加"),
        vue.createCommentVNode('      <view class="module-second_hand" @click="onStudy">\n            </view>')
      ]),
      vue.createCommentVNode(" 文章列表 "),
      vue.createElementVNode("view", { class: "article-list" }, [
        (vue.openBlock(true), vue.createElementBlock(
          vue.Fragment,
          null,
          vue.renderList($setup.articleList, (item, index) => {
            return vue.openBlock(), vue.createElementBlock("view", {
              key: index,
              class: "article-item"
            }, [
              vue.createElementVNode("view", {
                class: "article-header",
                onClick: ($event) => $setup.handleToDetail(item.userVO.id)
              }, [
                vue.createVNode(_component_wd_img, {
                  src: item.userVO.imageUrl,
                  width: 45,
                  height: 45,
                  round: "",
                  mode: "scaleToFill"
                }, null, 8, ["src"]),
                vue.createElementVNode("view", { class: "article-info" }, [
                  vue.createElementVNode(
                    "text",
                    { class: "article-author" },
                    vue.toDisplayString(item.userVO.userName),
                    1
                    /* TEXT */
                  ),
                  vue.createElementVNode(
                    "text",
                    { class: "article-date" },
                    "发布时间: " + vue.toDisplayString(item.createTime),
                    1
                    /* TEXT */
                  )
                ])
              ], 8, ["onClick"]),
              vue.createElementVNode("view", {
                class: "article-content",
                onClick: ($event) => $setup.handleArticleInfo(item.id)
              }, [
                vue.createVNode(_component_wd_text, {
                  text: item.content,
                  color: "#565756",
                  size: "14px",
                  lines: 4
                }, null, 8, ["text"]),
                vue.createCommentVNode("{{ item.content }}")
              ], 8, ["onClick"]),
              item.imagesList != null ? (vue.openBlock(), vue.createElementBlock("view", {
                key: 0,
                class: vue.normalizeClass(["image-list", [$setup.getImageLayoutClass(item.imagesList.length)]]),
                onClick: ($event) => $setup.handleArticleInfo(item.id)
              }, [
                (vue.openBlock(true), vue.createElementBlock(
                  vue.Fragment,
                  null,
                  vue.renderList(item.imagesList.slice(0, 9), (url2, index2) => {
                    return vue.openBlock(), vue.createElementBlock("view", {
                      key: index2,
                      class: "image-wrapper"
                    }, [
                      vue.createVNode(_component_wd_img, {
                        width: "100%",
                        height: "100%",
                        mode: "aspectFill",
                        "show-menu-by-longpress": true,
                        radius: "5px",
                        src: url2,
                        onClick: vue.withModifiers(($event) => $setup.previewImage(url2, item.imagesList), ["stop"])
                      }, {
                        loading: vue.withCtx(() => [
                          vue.createElementVNode("view", { class: "loading-wrap" }, [
                            vue.createVNode(_component_wd_loading)
                          ])
                        ]),
                        error: vue.withCtx(() => [
                          vue.createElementVNode("view", { class: "error-wrap" }, "加载失败")
                        ]),
                        _: 2
                        /* DYNAMIC */
                      }, 1032, ["src", "onClick"]),
                      vue.createCommentVNode(" 当为第9张且总数量超过9时显示蒙版 "),
                      index2 === 8 && item.imagesList.length > 9 ? (vue.openBlock(), vue.createElementBlock("view", {
                        key: 0,
                        class: "mask"
                      }, [
                        vue.createElementVNode(
                          "text",
                          { class: "plus-text" },
                          "+" + vue.toDisplayString(item.imagesList.length - 9),
                          1
                          /* TEXT */
                        )
                      ])) : vue.createCommentVNode("v-if", true)
                    ]);
                  }),
                  128
                  /* KEYED_FRAGMENT */
                ))
              ], 10, ["onClick"])) : vue.createCommentVNode("v-if", true),
              vue.createElementVNode("view", { class: "article-footer" }, [
                vue.createElementVNode("view", { class: "footer-left" }, [
                  vue.createElementVNode("view", { class: "footer-item" }, [
                    vue.createVNode(_component_wd_icon, {
                      name: "view",
                      size: "16px"
                    }),
                    vue.createElementVNode(
                      "text",
                      null,
                      vue.toDisplayString(item.viewCount),
                      1
                      /* TEXT */
                    )
                  ]),
                  vue.createElementVNode("view", {
                    class: "footer-item",
                    onClick: ($event) => $setup.handleLikeItem(item.id, index)
                  }, [
                    vue.createCommentVNode('<wd-icon name="thumb-up" size="16px"/>'),
                    item.isLike ? (vue.openBlock(), vue.createElementBlock("i", {
                      key: 0,
                      class: "t-icon t-icon-like-selected",
                      style: { "font-size": "16px" }
                    })) : (vue.openBlock(), vue.createElementBlock("i", {
                      key: 1,
                      class: "t-icon t-icon-like",
                      style: { "font-size": "16px" }
                    })),
                    vue.createElementVNode(
                      "text",
                      null,
                      vue.toDisplayString(item.likeCount),
                      1
                      /* TEXT */
                    )
                  ], 8, ["onClick"]),
                  vue.createElementVNode("view", {
                    class: "footer-item",
                    onClick: ($event) => $setup.handleArticleInfo(item.id)
                  }, [
                    vue.createVNode(_component_wd_icon, {
                      name: "chat",
                      size: "16px"
                    }),
                    vue.createElementVNode(
                      "text",
                      null,
                      vue.toDisplayString(item.commentCount),
                      1
                      /* TEXT */
                    )
                  ], 8, ["onClick"])
                ]),
                vue.createElementVNode("view", {
                  onClick: _cache[1] || (_cache[1] = (...args) => $setup.closeOutside && $setup.closeOutside(...args))
                }, [
                  vue.createVNode(_component_wd_popover, {
                    mode: "menu",
                    content: $setup.menu,
                    onMenuclick: ($event) => $setup.link(item.id)
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_wd_icon, {
                        name: "more",
                        size: "16px"
                      })
                    ]),
                    _: 2
                    /* DYNAMIC */
                  }, 1032, ["content", "onMenuclick"])
                ])
              ])
            ]);
          }),
          128
          /* KEYED_FRAGMENT */
        )),
        $setup.articleList.length == 0 ? (vue.openBlock(), vue.createBlock(_component_wd_status_tip, {
          key: 0,
          image: "content",
          tip: "暂无内容"
        })) : vue.createCommentVNode("v-if", true),
        vue.createCommentVNode(" 加载状态 "),
        $setup.articleList.length > 0 ? (vue.openBlock(), vue.createBlock(_component_wd_loadmore, {
          key: 1,
          "custom-class": "loadmore",
          state: $setup.loadStatus,
          "loading-text": "别急在跑了...",
          "finished-text": "已经没有啦~",
          "error-text": "与火星断联了~，点击重试",
          onClickError: $setup.retryLoad
        }, null, 8, ["state"])) : vue.createCommentVNode("v-if", true)
      ]),
      vue.createCommentVNode("  悬浮按钮  "),
      vue.createVNode(_component_wd_fab, {
        onClick: $setup.handlePublishArticle,
        expandable: false,
        inactiveIcon: "edit-outline",
        position: `right-bottom`
      }),
      vue.createCommentVNode("  轻提示  "),
      vue.createVNode(_component_wd_toast),
      vue.createVNode(_component_wd_message_box)
    ]);
  }
  const PagesIndexIndex = /* @__PURE__ */ _export_sfc(_sfc_main$U, [["render", _sfc_render$T], ["__scopeId", "data-v-1cf27b2a"], ["__file", "G:/Code/campus/miniProject/pages/index/index.vue"]]);
  const tagProps = {
    ...baseProps,
    /**
     * 是否开启图标插槽
     * 类型：boolean
     * 默认值：false
     */
    useIconSlot: makeBooleanProp(false),
    /**
     * 标签类型
     * 类型：string
     * 可选值：'default' / 'primary' / 'danger' / 'warning' / 'success'
     * 默认值：'default'
     */
    type: makeStringProp("default"),
    /**
     * 左侧图标
     * 类型：string
     * 默认值：空字符串
     */
    icon: makeStringProp(""),
    /**
     * 是否可关闭（只对圆角类型支持）
     * 类型：boolean
     * 默认值：false
     */
    closable: makeBooleanProp(false),
    /**
     * 幽灵类型
     * 类型：boolean
     * 默认值：false
     */
    plain: makeBooleanProp(false),
    /**
     * 是否为新增标签
     * 类型：boolean
     * 默认值：false
     */
    dynamic: makeBooleanProp(false),
    /**
     * 文字颜色
     * 类型：string
     * 默认值：空字符串
     */
    color: makeStringProp(""),
    /**
     * 背景色和边框色
     * 类型：string
     * 默认值：空字符串
     */
    bgColor: makeStringProp(""),
    /**
     * 圆角类型
     * 类型：boolean
     * 默认值：false
     */
    round: makeBooleanProp(false),
    /**
     * 标记类型
     * 类型：boolean
     * 默认值：false
     */
    mark: makeBooleanProp(false)
  };
  const __default__$p = {
    name: "wd-tag",
    options: {
      addGlobalClass: true,
      virtualHost: true,
      styleIsolation: "shared"
    }
  };
  const _sfc_main$T = /* @__PURE__ */ vue.defineComponent({
    ...__default__$p,
    props: tagProps,
    emits: ["click", "close", "confirm"],
    setup(__props, { expose: __expose, emit: __emit }) {
      __expose();
      const props = __props;
      const emit = __emit;
      const { translate } = useTranslate("tag");
      const tagClass = vue.ref("");
      const dynamicValue = vue.ref("");
      const dynamicInput = vue.ref(false);
      vue.watch(
        [() => props.useIconSlot, () => props.icon, () => props.plain, () => props.dynamic, () => props.round, () => props.mark],
        () => {
          computeTagClass();
        },
        { deep: true, immediate: true }
      );
      vue.watch(
        () => props.type,
        (newValue) => {
          if (!newValue)
            return;
          const type = ["primary", "danger", "warning", "success", "default"];
          if (type.indexOf(newValue) === -1)
            formatAppLog("error", "at uni_modules/wot-design-uni/components/wd-tag/wd-tag.vue:73", `type must be one of ${type.toString()}`);
          computeTagClass();
        },
        { deep: true, immediate: true }
      );
      vue.watch(
        () => dynamicInput.value,
        () => {
          computeTagClass();
        },
        { deep: true, immediate: true }
      );
      const rootClass = vue.computed(() => {
        return `wd-tag ${props.customClass} ${tagClass.value}`;
      });
      const rootStyle = vue.computed(() => {
        const rootStyle2 = {};
        if (!props.plain && props.bgColor) {
          rootStyle2["background"] = props.bgColor;
        }
        if (props.bgColor) {
          rootStyle2["border-color"] = props.bgColor;
        }
        return `${objToStyle(rootStyle2)};${props.customStyle}`;
      });
      const textStyle = vue.computed(() => {
        const textStyle2 = {};
        if (props.color) {
          textStyle2["color"] = props.color;
        }
        return objToStyle(textStyle2);
      });
      function computeTagClass() {
        const { type, plain, round, mark, dynamic, icon, useIconSlot } = props;
        let tagClassList = [];
        type && tagClassList.push(`is-${type}`);
        plain && tagClassList.push("is-plain");
        round && tagClassList.push("is-round");
        mark && tagClassList.push("is-mark");
        dynamic && tagClassList.push("is-dynamic");
        dynamicInput.value && tagClassList.push("is-dynamic-input");
        if (icon || useIconSlot)
          tagClassList.push("is-icon");
        tagClass.value = tagClassList.join(" ");
      }
      function handleClick(event) {
        emit("click", event);
      }
      function handleClose(event) {
        emit("close", event);
      }
      function handleAdd() {
        dynamicInput.value = true;
        dynamicValue.value = "";
      }
      function handleBlur() {
        setDynamicInput();
      }
      function handleConfirm(event) {
        setDynamicInput();
        emit("confirm", {
          value: event.detail.value
        });
      }
      function setDynamicInput() {
        dynamicInput.value = false;
      }
      const __returned__ = { props, emit, translate, tagClass, dynamicValue, dynamicInput, rootClass, rootStyle, textStyle, computeTagClass, handleClick, handleClose, handleAdd, handleBlur, handleConfirm, setDynamicInput, wdIcon: __easycom_0$5 };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$S(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: vue.normalizeClass($setup.rootClass),
        style: vue.normalizeStyle($setup.rootStyle),
        onClick: $setup.handleClick
      },
      [
        _ctx.useIconSlot ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "wd-tag__icon"
        }, [
          vue.renderSlot(_ctx.$slots, "icon", {}, void 0, true)
        ])) : _ctx.icon ? (vue.openBlock(), vue.createBlock($setup["wdIcon"], {
          key: 1,
          name: _ctx.icon,
          "custom-class": "wd-tag__icon"
        }, null, 8, ["name"])) : vue.createCommentVNode("v-if", true),
        vue.createElementVNode(
          "view",
          {
            class: "wd-tag__text",
            style: vue.normalizeStyle($setup.textStyle)
          },
          [
            vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
          ],
          4
          /* STYLE */
        ),
        _ctx.closable && _ctx.round ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 2,
          class: "wd-tag__close",
          onClick: vue.withModifiers($setup.handleClose, ["stop"])
        }, [
          vue.createVNode($setup["wdIcon"], { name: "error-fill" })
        ])) : vue.createCommentVNode("v-if", true),
        $setup.dynamicInput && _ctx.dynamic ? vue.withDirectives((vue.openBlock(), vue.createElementBlock("input", {
          key: 3,
          class: "wd-tag__add-text",
          placeholder: $setup.translate("placeholder"),
          type: "text",
          focus: true,
          "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $setup.dynamicValue = $event),
          onBlur: $setup.handleBlur,
          onConfirm: $setup.handleConfirm
        }, null, 40, ["placeholder"])), [
          [vue.vModelText, $setup.dynamicValue]
        ]) : _ctx.dynamic ? (vue.openBlock(), vue.createElementBlock(
          "view",
          {
            key: 4,
            class: "wd-tag__text",
            style: vue.normalizeStyle($setup.textStyle),
            onClick: vue.withModifiers($setup.handleAdd, ["stop"])
          },
          [
            _ctx.$slots.add ? vue.renderSlot(_ctx.$slots, "add", { key: 0 }, void 0, true) : (vue.openBlock(), vue.createElementBlock(
              vue.Fragment,
              { key: 1 },
              [
                vue.createVNode($setup["wdIcon"], {
                  name: "add",
                  "custom-class": "wd-tag__add wd-tag__icon"
                }),
                vue.createElementVNode(
                  "text",
                  null,
                  vue.toDisplayString($setup.translate("add")),
                  1
                  /* TEXT */
                )
              ],
              64
              /* STABLE_FRAGMENT */
            ))
          ],
          4
          /* STYLE */
        )) : vue.createCommentVNode("v-if", true)
      ],
      6
      /* CLASS, STYLE */
    );
  }
  const __easycom_2$1 = /* @__PURE__ */ _export_sfc(_sfc_main$T, [["render", _sfc_render$S], ["__scopeId", "data-v-97328e6e"], ["__file", "G:/Code/campus/miniProject/uni_modules/wot-design-uni/components/wd-tag/wd-tag.vue"]]);
  const cellProps = {
    ...baseProps,
    /**
     * 标题
     */
    title: String,
    /**
     * 右侧内容
     */
    value: makeNumericProp(""),
    /**
     * 图标类名
     */
    icon: String,
    /**
     * 描述信息
     */
    label: String,
    /**
     * 是否为跳转链接
     */
    isLink: makeBooleanProp(false),
    /**
     * 跳转地址
     */
    to: String,
    /**
     * 跳转时是否替换栈顶页面
     */
    replace: makeBooleanProp(false),
    /**
     * 开启点击反馈，is-link 默认开启
     */
    clickable: makeBooleanProp(false),
    /**
     * 设置单元格大小，可选值：large
     */
    size: String,
    /**
     * 是否展示边框线
     */
    border: makeBooleanProp(void 0),
    /**
     * 设置左侧标题宽度
     */
    titleWidth: String,
    /**
     * 是否垂直居中，默认顶部居中
     */
    center: makeBooleanProp(false),
    /**
     * 是否必填
     */
    required: makeBooleanProp(false),
    /**
     * 表单属性，上下结构
     */
    vertical: makeBooleanProp(false),
    /**
     * 表单域 model 字段名，在使用表单校验功能的情况下，该属性是必填的
     */
    prop: String,
    /**
     * 表单验证规则，结合wd-form组件使用
     */
    rules: makeArrayProp(),
    /**
     * icon 使用 slot 时的自定义样式
     */
    customIconClass: makeStringProp(""),
    /**
     * label 使用 slot 时的自定义样式
     */
    customLabelClass: makeStringProp(""),
    /**
     * value 使用 slot 时的自定义样式
     */
    customValueClass: makeStringProp(""),
    /**
     * title 使用 slot 时的自定义样式
     */
    customTitleClass: makeStringProp("")
  };
  const __default__$o = {
    name: "wd-cell",
    options: {
      addGlobalClass: true,
      virtualHost: true,
      styleIsolation: "shared"
    }
  };
  const _sfc_main$S = /* @__PURE__ */ vue.defineComponent({
    ...__default__$o,
    props: cellProps,
    emits: ["click"],
    setup(__props, { expose: __expose, emit: __emit }) {
      __expose();
      const props = __props;
      const emit = __emit;
      const cell = useCell();
      const isBorder = vue.computed(() => {
        return Boolean(isDef(props.border) ? props.border : cell.border.value);
      });
      const { parent: form } = useParent(FORM_KEY);
      const errorMessage = vue.computed(() => {
        if (form && props.prop && form.errorMessages && form.errorMessages[props.prop]) {
          return form.errorMessages[props.prop];
        } else {
          return "";
        }
      });
      const isRequired = vue.computed(() => {
        let formRequired = false;
        if (form && form.props.rules) {
          const rules = form.props.rules;
          for (const key in rules) {
            if (Object.prototype.hasOwnProperty.call(rules, key) && key === props.prop && Array.isArray(rules[key])) {
              formRequired = rules[key].some((rule) => rule.required);
            }
          }
        }
        return props.required || props.rules.some((rule) => rule.required) || formRequired;
      });
      function onClick() {
        const url2 = props.to;
        if (props.clickable || props.isLink) {
          emit("click");
        }
        if (url2 && props.isLink) {
          if (props.replace) {
            uni.redirectTo({ url: url2 });
          } else {
            uni.navigateTo({ url: url2 });
          }
        }
      }
      const __returned__ = { props, emit, cell, isBorder, form, errorMessage, isRequired, onClick, wdIcon: __easycom_0$5 };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$R(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", {
      class: vue.normalizeClass(["wd-cell", $setup.isBorder ? "is-border" : "", _ctx.size ? "is-" + _ctx.size : "", _ctx.center ? "is-center" : "", _ctx.customClass]),
      style: vue.normalizeStyle(_ctx.customStyle),
      "hover-class": _ctx.isLink || _ctx.clickable ? "is-hover" : "none",
      "hover-stay-time": 70,
      onClick: $setup.onClick
    }, [
      vue.createElementVNode(
        "view",
        {
          class: vue.normalizeClass(["wd-cell__wrapper", _ctx.vertical ? "is-vertical" : ""])
        },
        [
          vue.createElementVNode(
            "view",
            {
              class: vue.normalizeClass(["wd-cell__left", $setup.isRequired ? "is-required" : ""]),
              style: vue.normalizeStyle(_ctx.titleWidth ? "min-width:" + _ctx.titleWidth + ";max-width:" + _ctx.titleWidth + ";" : "")
            },
            [
              vue.createCommentVNode("左侧icon部位"),
              _ctx.icon ? (vue.openBlock(), vue.createBlock($setup["wdIcon"], {
                key: 0,
                name: _ctx.icon,
                "custom-class": `wd-cell__icon  ${_ctx.customIconClass}`
              }, null, 8, ["name", "custom-class"])) : vue.renderSlot(_ctx.$slots, "icon", { key: 1 }, void 0, true),
              vue.createElementVNode("view", { class: "wd-cell__title" }, [
                vue.createCommentVNode("title BEGIN"),
                _ctx.title ? (vue.openBlock(), vue.createElementBlock(
                  "view",
                  {
                    key: 0,
                    class: vue.normalizeClass(_ctx.customTitleClass)
                  },
                  vue.toDisplayString(_ctx.title),
                  3
                  /* TEXT, CLASS */
                )) : vue.renderSlot(_ctx.$slots, "title", { key: 1 }, void 0, true),
                vue.createCommentVNode("title END"),
                vue.createCommentVNode("label BEGIN"),
                _ctx.label ? (vue.openBlock(), vue.createElementBlock(
                  "view",
                  {
                    key: 2,
                    class: vue.normalizeClass(`wd-cell__label ${_ctx.customLabelClass}`)
                  },
                  vue.toDisplayString(_ctx.label),
                  3
                  /* TEXT, CLASS */
                )) : vue.renderSlot(_ctx.$slots, "label", { key: 3 }, void 0, true),
                vue.createCommentVNode("label END")
              ])
            ],
            6
            /* CLASS, STYLE */
          ),
          vue.createCommentVNode("right content BEGIN"),
          vue.createElementVNode("view", { class: "wd-cell__right" }, [
            vue.createElementVNode("view", { class: "wd-cell__body" }, [
              vue.createCommentVNode("文案内容"),
              vue.createElementVNode(
                "view",
                {
                  class: vue.normalizeClass(`wd-cell__value ${_ctx.customValueClass}`)
                },
                [
                  vue.renderSlot(_ctx.$slots, "default", {}, () => [
                    vue.createTextVNode(
                      vue.toDisplayString(_ctx.value),
                      1
                      /* TEXT */
                    )
                  ], true)
                ],
                2
                /* CLASS */
              ),
              vue.createCommentVNode("箭头"),
              _ctx.isLink ? (vue.openBlock(), vue.createBlock($setup["wdIcon"], {
                key: 0,
                "custom-class": "wd-cell__arrow-right",
                name: "arrow-right"
              })) : vue.renderSlot(_ctx.$slots, "right-icon", { key: 1 }, void 0, true)
            ]),
            $setup.errorMessage ? (vue.openBlock(), vue.createElementBlock(
              "view",
              {
                key: 0,
                class: "wd-cell__error-message"
              },
              vue.toDisplayString($setup.errorMessage),
              1
              /* TEXT */
            )) : vue.createCommentVNode("v-if", true)
          ]),
          vue.createCommentVNode("right content END")
        ],
        2
        /* CLASS */
      )
    ], 14, ["hover-class"]);
  }
  const __easycom_5$2 = /* @__PURE__ */ _export_sfc(_sfc_main$S, [["render", _sfc_render$R], ["__scopeId", "data-v-f1c5bbe2"], ["__file", "G:/Code/campus/miniProject/uni_modules/wot-design-uni/components/wd-cell/wd-cell.vue"]]);
  function isVNode(value) {
    return value ? value.__v_isVNode === true : false;
  }
  function flattenVNodes(children) {
    const result = [];
    const traverse = (children2) => {
      if (Array.isArray(children2)) {
        children2.forEach((child) => {
          var _a;
          if (isVNode(child)) {
            result.push(child);
            if ((_a = child.component) == null ? void 0 : _a.subTree) {
              result.push(child.component.subTree);
              traverse(child.component.subTree.children);
            }
            if (child.children) {
              traverse(child.children);
            }
          }
        });
      }
    };
    traverse(children);
    return result;
  }
  const findVNodeIndex = (vnodes, vnode) => {
    const index = vnodes.indexOf(vnode);
    if (index === -1) {
      return vnodes.findIndex((item) => vnode.key !== void 0 && vnode.key !== null && item.type === vnode.type && item.key === vnode.key);
    }
    return index;
  };
  function sortChildren(parent, publicChildren, internalChildren) {
    const vnodes = parent && parent.subTree && parent.subTree.children ? flattenVNodes(parent.subTree.children) : [];
    internalChildren.sort((a, b) => findVNodeIndex(vnodes, a.vnode) - findVNodeIndex(vnodes, b.vnode));
    const orderedPublicChildren = internalChildren.map((item) => item.proxy);
    publicChildren.sort((a, b) => {
      const indexA = orderedPublicChildren.indexOf(a);
      const indexB = orderedPublicChildren.indexOf(b);
      return indexA - indexB;
    });
  }
  function useChildren(key) {
    const publicChildren = vue.reactive([]);
    const internalChildren = vue.reactive([]);
    const parent = vue.getCurrentInstance();
    const linkChildren = (value) => {
      const link2 = (child) => {
        if (child.proxy) {
          internalChildren.push(child);
          publicChildren.push(child.proxy);
          sortChildren(parent, publicChildren, internalChildren);
        }
      };
      const unlink = (child) => {
        const index = internalChildren.indexOf(child);
        publicChildren.splice(index, 1);
        internalChildren.splice(index, 1);
      };
      vue.provide(
        key,
        Object.assign(
          {
            link: link2,
            unlink,
            children: publicChildren,
            internalChildren
          },
          value
        )
      );
    };
    return {
      children: publicChildren,
      linkChildren
    };
  }
  const __default__$n = {
    name: "wd-cell-group",
    options: {
      addGlobalClass: true,
      virtualHost: true,
      styleIsolation: "shared"
    }
  };
  const _sfc_main$R = /* @__PURE__ */ vue.defineComponent({
    ...__default__$n,
    props: cellGroupProps,
    setup(__props, { expose: __expose }) {
      __expose();
      const props = __props;
      const { linkChildren } = useChildren(CELL_GROUP_KEY);
      linkChildren({ props });
      const __returned__ = { props, linkChildren };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$Q(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: vue.normalizeClass(["wd-cell-group", _ctx.border ? "is-border" : "", _ctx.customClass]),
        style: vue.normalizeStyle(_ctx.customStyle)
      },
      [
        _ctx.title || _ctx.value || _ctx.useSlot ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "wd-cell-group__title"
        }, [
          vue.createCommentVNode("左侧标题"),
          vue.createElementVNode("view", { class: "wd-cell-group__left" }, [
            _ctx.title ? (vue.openBlock(), vue.createElementBlock(
              "text",
              { key: 0 },
              vue.toDisplayString(_ctx.title),
              1
              /* TEXT */
            )) : vue.renderSlot(_ctx.$slots, "title", { key: 1 }, void 0, true)
          ]),
          vue.createCommentVNode("右侧标题"),
          vue.createElementVNode("view", { class: "wd-cell-group__right" }, [
            _ctx.value ? (vue.openBlock(), vue.createElementBlock(
              "text",
              { key: 0 },
              vue.toDisplayString(_ctx.value),
              1
              /* TEXT */
            )) : vue.renderSlot(_ctx.$slots, "value", { key: 1 }, void 0, true)
          ])
        ])) : vue.createCommentVNode("v-if", true),
        vue.createElementVNode("view", { class: "wd-cell-group__body" }, [
          vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
        ])
      ],
      6
      /* CLASS, STYLE */
    );
  }
  const __easycom_6$1 = /* @__PURE__ */ _export_sfc(_sfc_main$R, [["render", _sfc_render$Q], ["__scopeId", "data-v-55e5786b"], ["__file", "G:/Code/campus/miniProject/uni_modules/wot-design-uni/components/wd-cell-group/wd-cell-group.vue"]]);
  const segmentedProps = {
    ...baseProps,
    /**
     * 当前选中的值
     * 类型: string | number
     * 最低版本: 0.1.23
     */
    value: makeRequiredProp([String, Number]),
    /**
     * 是否禁用分段器
     * 类型: boolean
     * 默认值: false
     * 最低版本: 0.1.23
     */
    disabled: makeBooleanProp(false),
    /**
     * 控件尺寸
     * 类型: string
     * 可选值: 'large' | 'middle' | 'small'
     * 默认值: 'middle'
     * 最低版本: 0.1.23
     */
    size: makeStringProp("middle"),
    /**
     * 数据集合
     * 类型: string[] | number[] | SegmentedOption[]
     * 必需: 是
     * 默认值: []
     * 最低版本: 0.1.23
     */
    options: {
      type: Array,
      required: true,
      default: () => []
    },
    /**
     * 切换选项时是否振动
     * 类型: boolean
     * 默认值: false
     * 最低版本: 0.1.23
     */
    vibrateShort: makeBooleanProp(false)
  };
  const __default__$m = {
    name: "wd-segmented",
    options: {
      addGlobalClass: true,
      virtualHost: true,
      styleIsolation: "shared"
    }
  };
  const _sfc_main$Q = /* @__PURE__ */ vue.defineComponent({
    ...__default__$m,
    props: segmentedProps,
    emits: ["update:value", "change", "click"],
    setup(__props, { expose: __expose, emit: __emit }) {
      const $item = ".wd-segmented__item";
      const props = __props;
      const emit = __emit;
      const state = vue.reactive({
        activeIndex: 0,
        // 选中项
        activeStyle: ""
        // 选中样式
      });
      const activeDisabled = vue.computed(() => {
        return props.disabled || (props.options[0] && isObj(props.options[0]) ? props.options[0].disabled : false);
      });
      vue.watch(
        () => props.value,
        () => {
          updateCurrentIndex();
          updateActiveStyle();
          if (props.vibrateShort) {
            uni.vibrateShort({});
          }
        },
        {
          immediate: false
        }
      );
      const { proxy } = vue.getCurrentInstance();
      vue.onMounted(async () => {
        updateCurrentIndex();
        await pause();
        updateActiveStyle(false);
      });
      function updateActiveStyle(animation = true) {
        getRect($item, true, proxy).then((rects) => {
          const rect = rects[state.activeIndex];
          const style = {
            position: "absolute",
            width: addUnit(rect.width),
            "z-index": 0
          };
          const left = rects.slice(0, state.activeIndex).reduce((prev, curr) => prev + Number(curr.width), 0);
          if (left) {
            style.transform = `translateX(${left}px)`;
          }
          if (animation) {
            style.transition = "all 0.2s cubic-bezier(0.645, 0.045, 0.355, 1)";
          }
          state.activeStyle = objToStyle(style);
        });
      }
      function updateCurrentIndex() {
        const index = props.options.findIndex((option) => {
          const value = isObj(option) ? option.value : option;
          return value == props.value;
        });
        if (index >= 0) {
          state.activeIndex = index;
        } else {
          const value = isObj(props.options[0]) ? props.options[0].value : props.options[0];
          emit("update:value", value);
          emit("change", isObj(props.options[0]) ? props.options[0] : { value });
        }
      }
      function handleClick(option, index) {
        const disabled = props.disabled || (isObj(option) ? option.disabled : false);
        if (disabled) {
          return;
        }
        const value = isObj(option) ? option.value : option;
        state.activeIndex = index;
        updateActiveStyle();
        emit("update:value", value);
        emit("change", isObj(option) ? option : { value });
        emit("click", isObj(option) ? option : { value });
      }
      __expose({
        updateActiveStyle
      });
      const __returned__ = { $item, props, emit, state, activeDisabled, proxy, updateActiveStyle, updateCurrentIndex, handleClick, get isObj() {
        return isObj;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$P(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: vue.normalizeClass(`wd-segmented ${_ctx.customClass}`),
        style: vue.normalizeStyle(_ctx.customStyle)
      },
      [
        (vue.openBlock(true), vue.createElementBlock(
          vue.Fragment,
          null,
          vue.renderList(_ctx.options, (option, index) => {
            return vue.openBlock(), vue.createElementBlock("view", {
              class: vue.normalizeClass(`wd-segmented__item is-${_ctx.size} ${$setup.state.activeIndex === index ? "is-active" : ""} ${_ctx.disabled || ($setup.isObj(option) ? option.disabled : false) ? "is-disabled" : ""}`),
              onClick: ($event) => $setup.handleClick(option, index),
              key: index
            }, [
              vue.createElementVNode("view", { class: "wd-segmented__item-label" }, [
                _ctx.$slots.label ? vue.renderSlot(_ctx.$slots, "label", {
                  key: 0,
                  option: $setup.isObj(option) ? option : { value: option }
                }, void 0, true) : (vue.openBlock(), vue.createElementBlock(
                  vue.Fragment,
                  { key: 1 },
                  [
                    vue.createTextVNode(
                      vue.toDisplayString($setup.isObj(option) ? option.value : option),
                      1
                      /* TEXT */
                    )
                  ],
                  64
                  /* STABLE_FRAGMENT */
                ))
              ])
            ], 10, ["onClick"]);
          }),
          128
          /* KEYED_FRAGMENT */
        )),
        vue.createElementVNode(
          "view",
          {
            class: vue.normalizeClass(`wd-segmented__item--active ${$setup.activeDisabled ? "is-disabled" : ""}`),
            style: vue.normalizeStyle($setup.state.activeStyle)
          },
          null,
          6
          /* CLASS, STYLE */
        )
      ],
      6
      /* CLASS, STYLE */
    );
  }
  const __easycom_6 = /* @__PURE__ */ _export_sfc(_sfc_main$Q, [["render", _sfc_render$P], ["__scopeId", "data-v-0a53f024"], ["__file", "G:/Code/campus/miniProject/uni_modules/wot-design-uni/components/wd-segmented/wd-segmented.vue"]]);
  const ACTIVITY_STATUS = {
    0: "未开始",
    // 未开始
    1: "进行中",
    // 进行中
    2: "已结束"
    // 已结束
  };
  function getActivityStatus(code) {
    if (!ACTIVITY_STATUS[code]) {
      return null;
    }
    return ACTIVITY_STATUS[code];
  }
  function getActivityList(data) {
    return request({
      url: "/api/activity/activityList/page",
      method: "POST",
      data
    });
  }
  function registrationActivity(data) {
    return request({
      url: "/api/activity/registration",
      method: "POST",
      data
    });
  }
  function getActivityVOByJoinUserId(id) {
    return request({
      url: `/api/activity/get/${id}`,
      method: "POST"
    });
  }
  const _sfc_main$P = /* @__PURE__ */ vue.defineComponent({
    __name: "my",
    setup(__props, { expose: __expose }) {
      __expose();
      const userInfo = vue.ref({});
      const toast = useToast();
      const articleList = vue.ref([]);
      const activityList = vue.ref([]);
      const loadStatus = vue.ref("loading");
      const pagination = vue.reactive({
        current: 1,
        pageSize: 5,
        total: 0,
        userId: null,
        hasMore: true,
        isRefreshing: false
      });
      const activityPagination = vue.reactive({
        current: 1,
        pageSize: 5,
        hasMore: true,
        isRefreshing: false
      });
      const list2 = vue.ref(["投稿", "活动", "收藏", "喜欢"]);
      const current = vue.ref("投稿");
      const needRefresh = vue.ref(false);
      const collectList = vue.ref([]);
      const collectPagination = vue.reactive({
        current: 1,
        pageSize: 5,
        hasMore: true,
        isRefreshing: false
      });
      const likeList = vue.ref([]);
      const likePagination = vue.reactive({
        current: 1,
        pageSize: 5,
        hasMore: true,
        isRefreshing: false
      });
      const getImageLayoutClass = (count) => {
        switch (count) {
          case 1:
            return "one-column";
          case 2:
          case 4:
            return "two-columns";
          case 3:
            return "three-columns";
          default:
            return "three-columns";
        }
      };
      const handleArticleInfo = (id) => {
        uni.navigateTo({
          url: `/pages/articleInfo/articleInfo?articleId=${id}`
        });
      };
      const retryLoad = () => {
        formatAppLog("log", "at pages/my/my.vue:372", "加载......");
        loadStatus.value = "loading";
        fetchArticles();
      };
      const handleToDetail = (id) => {
        formatAppLog("log", "at pages/my/my.vue:378", "id", id);
        uni.navigateTo({
          url: `/pages/userDetail/userDetail?userId=${id}`
        });
      };
      const handleToInfo = () => {
        uni.navigateTo({
          url: "/pages/updateUserInfo/updateUserInfo"
        });
      };
      const fetchArticles = async (isRefresh = false) => {
        if (!isLogin.value) {
          loadStatus.value = "finished";
          return;
        }
        if (pagination.isRefreshing)
          return;
        pagination.isRefreshing = true;
        try {
          if (isRefresh) {
            pagination.current = 1;
            pagination.hasMore = true;
            articleList.value = [];
            uni.showNavigationBarLoading();
          }
          if (!pagination.hasMore) {
            loadStatus.value = "finished";
            return;
          }
          const res = await getArticleList({
            current: pagination.current,
            pageSize: pagination.pageSize,
            userId: pagination.userId
          });
          if (res.code === 200) {
            articleList.value = isRefresh ? res.data.records : [...articleList.value, ...res.data.records];
            pagination.total = res.data.total;
            pagination.hasMore = pagination.current * pagination.pageSize < res.data.total;
            pagination.current += 1;
            loadStatus.value = pagination.hasMore ? "loading" : "finished";
          }
        } catch (err) {
          formatAppLog("error", "at pages/my/my.vue:434", "加载失败:", err);
          loadStatus.value = "error";
        } finally {
          pagination.isRefreshing = false;
          uni.hideNavigationBarLoading();
          uni.stopPullDownRefresh();
        }
      };
      const fetchActivityList = async (isRefresh = false) => {
        if (!isLogin.value) {
          loadStatus.value = "finished";
          return;
        }
        if (activityPagination.isRefreshing)
          return;
        activityPagination.isRefreshing = true;
        try {
          if (isRefresh) {
            activityPagination.current = 1;
            activityPagination.hasMore = true;
            activityList.value = [];
            uni.showNavigationBarLoading();
          }
          if (!activityPagination.hasMore) {
            loadStatus.value = "finished";
            return;
          }
          const res = await getActivityVOByJoinUserId(userInfo.value.id);
          if (res.code === 200) {
            activityList.value = isRefresh ? res.data : [...activityList.value, ...res.data];
            activityPagination.hasMore = false;
            loadStatus.value = "finished";
          } else {
            toast.error(res.message);
          }
        } catch (error) {
          formatAppLog("error", "at pages/my/my.vue:479", "获取活动列表失败:", error);
          loadStatus.value = "error";
        } finally {
          activityPagination.isRefreshing = false;
          uni.hideNavigationBarLoading();
          uni.stopPullDownRefresh();
        }
      };
      const fetchCollectList = async (isRefresh = false) => {
        var _a;
        if (!isLogin.value) {
          loadStatus.value = "finished";
          return;
        }
        if (collectPagination.isRefreshing)
          return;
        collectPagination.isRefreshing = true;
        try {
          if (isRefresh) {
            collectPagination.current = 1;
            collectPagination.hasMore = true;
            collectList.value = [];
            uni.showNavigationBarLoading();
          }
          if (!collectPagination.hasMore) {
            loadStatus.value = "finished";
            return;
          }
          formatAppLog("log", "at pages/my/my.vue:512", "获取收藏列表:", {
            current: collectPagination.current,
            pageSize: collectPagination.pageSize,
            userId: (_a = userInfo.value) == null ? void 0 : _a.id
          });
          loadStatus.value = "finished";
        } catch (error) {
          formatAppLog("error", "at pages/my/my.vue:527", "获取收藏列表失败:", error);
          loadStatus.value = "error";
        } finally {
          collectPagination.isRefreshing = false;
          uni.hideNavigationBarLoading();
          uni.stopPullDownRefresh();
        }
      };
      const fetchLikeList = async (isRefresh = false) => {
        var _a;
        if (!isLogin.value) {
          loadStatus.value = "finished";
          return;
        }
        if (likePagination.isRefreshing)
          return;
        likePagination.isRefreshing = true;
        try {
          if (isRefresh) {
            likePagination.current = 1;
            likePagination.hasMore = true;
            likeList.value = [];
            uni.showNavigationBarLoading();
          }
          if (!likePagination.hasMore) {
            loadStatus.value = "finished";
            return;
          }
          const res = await getArticleVOLikeListByUserId((_a = userInfo.value) == null ? void 0 : _a.id);
          formatAppLog("log", "at pages/my/my.vue:560", res);
          if (res.code == 200) {
            likeList.value = res.data;
          } else {
            toast.error(res.msg);
          }
          loadStatus.value = "finished";
        } catch (error) {
          formatAppLog("error", "at pages/my/my.vue:569", "获取点赞列表失败:", error);
          loadStatus.value = "error";
        } finally {
          likePagination.isRefreshing = false;
          uni.hideNavigationBarLoading();
          uni.stopPullDownRefresh();
        }
      };
      onReachBottom(() => {
        if (current.value === "投稿") {
          if (pagination.hasMore && !pagination.isRefreshing) {
            fetchArticles();
          }
        } else if (current.value === "活动") {
          if (activityPagination.hasMore && !activityPagination.isRefreshing) {
            fetchActivityList();
          }
        } else if (current.value === "收藏") {
          if (collectPagination.hasMore && !collectPagination.isRefreshing) {
            fetchCollectList();
          }
        } else if (current.value === "喜欢") {
          if (likePagination.hasMore && !likePagination.isRefreshing) {
            fetchLikeList();
          }
        }
      });
      onPullDownRefresh(() => {
        if (current.value === "投稿") {
          fetchArticles(true);
        } else if (current.value === "活动") {
          fetchActivityList(true);
        } else if (current.value === "收藏") {
          fetchCollectList(true);
        } else if (current.value === "喜欢") {
          fetchLikeList(true);
        }
      });
      vue.watch(() => current.value, (newValue) => {
        loadStatus.value = "loading";
        if (newValue === "投稿") {
          fetchArticles(true);
        } else if (newValue === "活动") {
          fetchActivityList(true);
        } else if (newValue === "收藏") {
          fetchCollectList(true);
        } else if (newValue === "喜欢") {
          fetchLikeList(true);
        }
      });
      onShow(() => {
        const user = getUserInfo();
        if (user) {
          userInfo.value = user;
          pagination.userId = user.id;
        }
        if (current.value === "投稿") {
          fetchArticles(true);
        } else if (current.value === "活动") {
          fetchActivityList(true);
        } else if (current.value === "收藏") {
          fetchCollectList(true);
        } else if (current.value === "喜欢") {
          fetchLikeList(true);
        }
      });
      const isPopupShow = vue.ref(false);
      const handlePopupClose = () => {
        isPopupShow.value = false;
      };
      const handleSet = () => {
        isPopupShow.value = true;
      };
      const handleActivityClick = (index) => {
        formatAppLog("log", "at pages/my/my.vue:660", "点击活动详情");
        const str = JSON.stringify(activityList.value[index]);
        uni.navigateTo({
          url: "/pages/activityDetail/activityDetail?activityInfo=" + str
        });
      };
      onShareAppMessage((res) => {
        formatAppLog("log", "at pages/my/my.vue:669", res);
        return {
          title: "青春共享站",
          path: "/pages/index/index",
          imageUrl: "/static/logo.jpg"
          // 分享图片
        };
      });
      onShareTimeline(() => {
        return {
          title: "青春共享站",
          path: "/pages/index/index",
          imageUrl: "/static/logo.jpg"
          // 分享图片
        };
      });
      const getTagType = (index) => {
        const types = ["success", "primary", "warning", "danger"];
        return types[index % types.length];
      };
      const isLogin = vue.computed(() => {
        var _a;
        return !!((_a = userInfo.value) == null ? void 0 : _a.id);
      });
      const handleLoginClick = () => {
        if (!isLogin.value) {
          uni.showModal({
            title: "提示",
            content: "登录后可查看更多信息",
            confirmText: "去登录",
            cancelText: "取消",
            success: (res) => {
              if (res.confirm) {
                uni.navigateTo({
                  url: "/pages/login/login"
                });
              }
            }
          });
        } else {
          handleToInfo();
        }
      };
      const __returned__ = { userInfo, toast, articleList, activityList, loadStatus, pagination, activityPagination, list: list2, current, needRefresh, collectList, collectPagination, likeList, likePagination, getImageLayoutClass, handleArticleInfo, retryLoad, handleToDetail, handleToInfo, fetchArticles, fetchActivityList, fetchCollectList, fetchLikeList, isPopupShow, handlePopupClose, handleSet, handleActivityClick, getTagType, isLogin, handleLoginClick, get getActivityStatus() {
        return getActivityStatus;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$O(_ctx, _cache, $props, $setup, $data, $options) {
    var _a, _b;
    const _component_wd_img = resolveEasycom(vue.resolveDynamicComponent("wd-img"), WdImg);
    const _component_wd_icon = resolveEasycom(vue.resolveDynamicComponent("wd-icon"), __easycom_0$5);
    const _component_wd_tag = resolveEasycom(vue.resolveDynamicComponent("wd-tag"), __easycom_2$1);
    const _component_wd_cell = resolveEasycom(vue.resolveDynamicComponent("wd-cell"), __easycom_5$2);
    const _component_wd_cell_group = resolveEasycom(vue.resolveDynamicComponent("wd-cell-group"), __easycom_6$1);
    const _component_wd_popup = resolveEasycom(vue.resolveDynamicComponent("wd-popup"), wdPopup);
    const _component_wd_segmented = resolveEasycom(vue.resolveDynamicComponent("wd-segmented"), __easycom_6);
    const _component_wd_text = resolveEasycom(vue.resolveDynamicComponent("wd-text"), __easycom_1$4);
    const _component_wd_loading = resolveEasycom(vue.resolveDynamicComponent("wd-loading"), __easycom_0$3);
    const _component_wd_popover = resolveEasycom(vue.resolveDynamicComponent("wd-popover"), __easycom_9);
    const _component_wd_loadmore = resolveEasycom(vue.resolveDynamicComponent("wd-loadmore"), __easycom_10$1);
    const _component_wd_toast = resolveEasycom(vue.resolveDynamicComponent("wd-toast"), __easycom_2$2);
    return vue.openBlock(), vue.createElementBlock("view", { class: "my-page" }, [
      vue.createCommentVNode('<wd-navbar title="" safeAreaInsetTop placeholder></wd-navbar>'),
      vue.createCommentVNode(" 顶部用户信息区域 "),
      vue.createElementVNode("view", { class: "user-info" }, [
        vue.createElementVNode("view", { class: "user-header-bg" }),
        vue.createElementVNode("view", { class: "user-content" }, [
          vue.createElementVNode("view", {
            class: "user-header",
            onClick: $setup.handleLoginClick
          }, [
            vue.createElementVNode("view", { class: "avatar-wrapper" }, [
              vue.createVNode(_component_wd_img, {
                src: ((_a = $setup.userInfo) == null ? void 0 : _a.imageUrl) || "/static/default-avatar.jpg",
                width: "88",
                height: "88",
                round: "",
                class: "avatar-image"
              }, null, 8, ["src"]),
              $setup.isLogin ? (vue.openBlock(), vue.createElementBlock("view", {
                key: 0,
                class: "avatar-edit"
              }, [
                vue.createVNode(_component_wd_icon, {
                  name: "edit-outline",
                  size: "12px",
                  color: "#fff"
                })
              ])) : vue.createCommentVNode("v-if", true)
            ]),
            vue.createElementVNode("view", { class: "user-data" }, [
              vue.createElementVNode("view", { class: "nickname-wrapper" }, [
                vue.createElementVNode(
                  "text",
                  { class: "nickname" },
                  vue.toDisplayString($setup.isLogin ? $setup.userInfo.userName : "未登录"),
                  1
                  /* TEXT */
                ),
                $setup.isLogin ? (vue.openBlock(), vue.createElementBlock("view", {
                  key: 0,
                  class: "constellation"
                }, [
                  vue.createVNode(_component_wd_icon, {
                    name: "star",
                    size: "14px",
                    color: "#FFB52B"
                  }),
                  vue.createElementVNode(
                    "text",
                    null,
                    vue.toDisplayString(((_b = $setup.userInfo) == null ? void 0 : _b.constellation) || `修仙熬夜座~`),
                    1
                    /* TEXT */
                  )
                ])) : vue.createCommentVNode("v-if", true)
              ]),
              !$setup.isLogin ? (vue.openBlock(), vue.createElementBlock("view", {
                key: 0,
                class: "login-tip"
              }, " 点击登录，体验更多功能 ")) : (vue.openBlock(), vue.createElementBlock(
                "view",
                {
                  key: 1,
                  class: "user-id"
                },
                "ID: " + vue.toDisplayString($setup.userInfo.id || "未设置"),
                1
                /* TEXT */
              ))
            ])
          ]),
          vue.createCommentVNode(" 个人简介 "),
          $setup.isLogin ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 0,
            class: "user-bio"
          }, [
            vue.createElementVNode(
              "view",
              { class: "bio-text" },
              vue.toDisplayString($setup.userInfo.userProfile || "这个人很懒，简介都不想写，估计是没有对象吧"),
              1
              /* TEXT */
            ),
            vue.createElementVNode("view", { class: "user-tags" }, [
              (vue.openBlock(true), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList($setup.userInfo.tagList, (item, index) => {
                  return vue.openBlock(), vue.createBlock(_component_wd_tag, {
                    key: index,
                    type: $setup.getTagType(index),
                    size: "small",
                    round: ""
                  }, {
                    default: vue.withCtx(() => [
                      vue.createTextVNode(
                        vue.toDisplayString(item),
                        1
                        /* TEXT */
                      )
                    ]),
                    _: 2
                    /* DYNAMIC */
                  }, 1032, ["type"]);
                }),
                128
                /* KEYED_FRAGMENT */
              ))
            ])
          ])) : vue.createCommentVNode("v-if", true),
          vue.createCommentVNode(" 用户统计数据 "),
          vue.createElementVNode("view", { class: "user-stats" }, [
            vue.createElementVNode("view", {
              class: "stat-item",
              onClick: $setup.handleLoginClick
            }, [
              vue.createElementVNode(
                "text",
                { class: "num" },
                vue.toDisplayString($setup.isLogin ? $setup.userInfo.follows || 0 : "-"),
                1
                /* TEXT */
              ),
              vue.createElementVNode("text", { class: "label" }, "关注")
            ]),
            vue.createElementVNode("view", { class: "divider" }),
            vue.createElementVNode("view", {
              class: "stat-item",
              onClick: $setup.handleLoginClick
            }, [
              vue.createElementVNode(
                "text",
                { class: "num" },
                vue.toDisplayString($setup.isLogin ? $setup.userInfo.fans || 0 : "-"),
                1
                /* TEXT */
              ),
              vue.createElementVNode("text", { class: "label" }, "粉丝")
            ]),
            vue.createElementVNode("view", { class: "divider" }),
            vue.createElementVNode("view", {
              class: "stat-item",
              onClick: $setup.handleLoginClick
            }, [
              vue.createElementVNode(
                "text",
                { class: "num" },
                vue.toDisplayString($setup.isLogin ? $setup.userInfo.likes || 0 : "-"),
                1
                /* TEXT */
              ),
              vue.createElementVNode("text", { class: "label" }, "获赞")
            ]),
            $setup.isLogin ? (vue.openBlock(), vue.createElementBlock("view", {
              key: 0,
              class: "menu-btn",
              onClick: $setup.handleSet
            }, [
              vue.createVNode(_component_wd_icon, {
                name: "setting",
                size: "20px",
                color: "#333"
              })
            ])) : vue.createCommentVNode("v-if", true)
          ])
        ])
      ]),
      vue.createCommentVNode("   侧边栏  "),
      vue.createVNode(_component_wd_popup, {
        modelValue: $setup.isPopupShow,
        "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $setup.isPopupShow = $event),
        position: "left",
        "custom-style": "height:100vh;width:70%",
        onClose: $setup.handlePopupClose
      }, {
        default: vue.withCtx(() => [
          vue.createElementVNode("view", { class: "popup-content" }, [
            vue.createElementVNode("view", { style: { "height": "50px" } }),
            vue.createVNode(_component_wd_cell_group, { border: "" }, {
              default: vue.withCtx(() => [
                vue.createVNode(_component_wd_cell, {
                  title: "修改个人信息",
                  "title-width": "150px",
                  icon: "edit-outline",
                  "is-link": "",
                  to: "/pages/updateUserInfo/updateUserInfo"
                }),
                vue.createVNode(_component_wd_cell, {
                  title: "反馈中心",
                  "title-width": "150px",
                  icon: "cloud-upload",
                  "is-link": "",
                  to: "/pages/feedback/feedback"
                }),
                vue.createVNode(_component_wd_cell, {
                  title: "联系我们",
                  "title-width": "150px",
                  icon: "call",
                  "is-link": "",
                  to: "/pages/relation/relation"
                })
              ]),
              _: 1
              /* STABLE */
            })
          ])
        ]),
        _: 1
        /* STABLE */
      }, 8, ["modelValue"]),
      vue.createCommentVNode("分段器"),
      vue.createVNode(_component_wd_segmented, {
        options: $setup.list,
        value: $setup.current,
        "onUpdate:value": _cache[1] || (_cache[1] = ($event) => $setup.current = $event)
      }, null, 8, ["options", "value"]),
      vue.createCommentVNode("分段选项（投稿）"),
      $setup.current === "投稿" ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 0,
        class: "box"
      }, [
        !$setup.isLogin ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "empty-tip"
        }, " 登录后查看投稿内容 ")) : (vue.openBlock(true), vue.createElementBlock(
          vue.Fragment,
          { key: 1 },
          vue.renderList($setup.articleList, (item, index) => {
            return vue.openBlock(), vue.createElementBlock("view", { key: index }, [
              vue.createCommentVNode(" 圆点 "),
              vue.createElementVNode("view", { class: "point" }, [
                vue.createElementVNode("view", { class: "dot" }, " "),
                vue.createElementVNode(
                  "view",
                  { class: "title" },
                  vue.toDisplayString(item.createTime.split("T")[0]),
                  1
                  /* TEXT */
                )
              ]),
              vue.createCommentVNode(" 容器二 "),
              vue.createElementVNode("view", { class: "box-line" }, [
                vue.createCommentVNode(" 容器三 "),
                vue.createElementVNode("view", { class: "box-data" }, [
                  vue.createElementVNode("view", { class: "userProfile" }, [
                    vue.createElementVNode("image", {
                      src: $setup.userInfo.imageUrl,
                      mode: "aspectFill",
                      class: "articleAvatar"
                    }, null, 8, ["src"]),
                    vue.createElementVNode(
                      "view",
                      { class: "userName" },
                      vue.toDisplayString($setup.userInfo.userName),
                      1
                      /* TEXT */
                    )
                  ]),
                  vue.createElementVNode(
                    "view",
                    { class: "row-info" },
                    vue.toDisplayString(item.content),
                    1
                    /* TEXT */
                  ),
                  vue.createCommentVNode(" 三图容器 "),
                  vue.createElementVNode("view", { class: "image-list" }, [
                    vue.createCommentVNode(" 循环生成三个图片 "),
                    item.imagesList.length != 0 ? (vue.openBlock(true), vue.createElementBlock(
                      vue.Fragment,
                      { key: 0 },
                      vue.renderList(item.imagesList.slice(0, 3), (url2, index2) => {
                        return vue.openBlock(), vue.createElementBlock(
                          "view",
                          {
                            key: index2,
                            class: vue.normalizeClass(["image-wrapper", { "last-item": index2 === 2, "single-item": item.imagesList.length === 1 }])
                          },
                          [
                            vue.createCommentVNode(" wot-design 图片组件 "),
                            vue.createVNode(_component_wd_img, {
                              width: "100%",
                              height: "100%",
                              mode: "aspectFill",
                              radius: "5px",
                              src: url2
                            }, null, 8, ["src"]),
                            vue.createCommentVNode(" 最后一个图片的蒙版 "),
                            index2 === 2 && item.imagesList.length > 3 ? (vue.openBlock(), vue.createElementBlock("view", {
                              key: 0,
                              class: "mask"
                            }, [
                              vue.createElementVNode(
                                "text",
                                { class: "plus-text" },
                                "+" + vue.toDisplayString(item.imagesList.length - 3),
                                1
                                /* TEXT */
                              )
                            ])) : vue.createCommentVNode("v-if", true)
                          ],
                          2
                          /* CLASS */
                        );
                      }),
                      128
                      /* KEYED_FRAGMENT */
                    )) : vue.createCommentVNode("v-if", true)
                  ]),
                  (vue.openBlock(true), vue.createElementBlock(
                    vue.Fragment,
                    null,
                    vue.renderList(item.tags, (tag2) => {
                      return vue.openBlock(), vue.createBlock(
                        _component_wd_tag,
                        {
                          class: "tag",
                          key: tag2,
                          type: "primary",
                          plain: "",
                          mark: ""
                        },
                        {
                          default: vue.withCtx(() => [
                            vue.createTextVNode(
                              vue.toDisplayString(tag2),
                              1
                              /* TEXT */
                            )
                          ]),
                          _: 2
                          /* DYNAMIC */
                        },
                        1024
                        /* DYNAMIC_SLOTS */
                      );
                    }),
                    128
                    /* KEYED_FRAGMENT */
                  )),
                  vue.createElementVNode("view", { class: "row-button" }, [
                    vue.createElementVNode("view", { class: "footer-item" }, [
                      vue.createVNode(_component_wd_icon, {
                        name: "view",
                        size: "16px"
                      }),
                      vue.createElementVNode(
                        "text",
                        null,
                        vue.toDisplayString(item.viewCount),
                        1
                        /* TEXT */
                      )
                    ]),
                    vue.createElementVNode("view", { class: "footer-item" }, [
                      item.isLike ? (vue.openBlock(), vue.createBlock(_component_wd_icon, {
                        key: 0,
                        "class-prefix": "t-icon",
                        name: "like-selected"
                      })) : (vue.openBlock(), vue.createBlock(_component_wd_icon, {
                        key: 1,
                        "class-prefix": "t-icon",
                        name: "like"
                      })),
                      vue.createElementVNode(
                        "text",
                        null,
                        vue.toDisplayString(item.likeCount),
                        1
                        /* TEXT */
                      )
                    ]),
                    vue.createElementVNode("view", { class: "footer-item" }, [
                      vue.createVNode(_component_wd_icon, {
                        name: "chat",
                        size: "16px"
                      }),
                      vue.createElementVNode(
                        "text",
                        null,
                        vue.toDisplayString(item.commentCount),
                        1
                        /* TEXT */
                      )
                    ])
                  ])
                ])
              ])
            ]);
          }),
          128
          /* KEYED_FRAGMENT */
        ))
      ])) : vue.createCommentVNode("v-if", true),
      vue.createCommentVNode("分段选项（活动）"),
      $setup.current === "活动" ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 1,
        class: "activecard"
      }, [
        vue.createElementVNode("view", { class: "activelist" }, [
          vue.createCommentVNode("   活动表单行部分 "),
          (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            null,
            vue.renderList($setup.activityList, (item, index) => {
              return vue.openBlock(), vue.createElementBlock("view", {
                class: "row",
                key: index,
                onClick: ($event) => $setup.handleActivityClick(index)
              }, [
                vue.createElementVNode("view", { class: "left" }, [
                  vue.createElementVNode("view", { class: "Actimage" }, [
                    vue.createElementVNode("image", {
                      src: item.coverPicture,
                      mode: "aspectFill"
                    }, null, 8, ["src"]),
                    vue.createElementVNode("view", { class: "status-tag" }, [
                      vue.createElementVNode(
                        "view",
                        { class: "status-text" },
                        vue.toDisplayString($setup.getActivityStatus(item == null ? void 0 : item.status)),
                        1
                        /* TEXT */
                      ),
                      vue.createElementVNode("view", { class: "status-bg" })
                    ])
                  ])
                ]),
                vue.createElementVNode("view", { class: "right" }, [
                  vue.createElementVNode(
                    "view",
                    { class: "Acttitle" },
                    vue.toDisplayString(item.title),
                    1
                    /* TEXT */
                  ),
                  vue.createElementVNode("view", { class: "Acttime" }, [
                    vue.createVNode(_component_wd_icon, { name: "time" }),
                    vue.createElementVNode(
                      "view",
                      { class: "date" },
                      vue.toDisplayString(item.endTime),
                      1
                      /* TEXT */
                    )
                  ]),
                  vue.createElementVNode("view", { class: "address" }, [
                    vue.createVNode(_component_wd_icon, { name: "location" }),
                    vue.createTextVNode(
                      " " + vue.toDisplayString(item.position),
                      1
                      /* TEXT */
                    )
                  ])
                ])
              ], 8, ["onClick"]);
            }),
            128
            /* KEYED_FRAGMENT */
          ))
        ])
      ])) : vue.createCommentVNode("v-if", true),
      $setup.current === "收藏" ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 2,
        class: "collect-list"
      }, [
        $setup.collectList.length === 0 ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "empty-tip"
        }, " 暂无收藏内容 ")) : vue.createCommentVNode("v-if", true),
        vue.createCommentVNode(" TODO: 添加收藏列表的展示 ")
      ])) : vue.createCommentVNode("v-if", true),
      $setup.current === "喜欢" ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 3,
        class: "like-list"
      }, [
        $setup.likeList.length === 0 ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "empty-tip"
        }, " 暂无点赞内容 ")) : vue.createCommentVNode("v-if", true),
        vue.createCommentVNode(" TODO: 添加点赞列表的展示 "),
        (vue.openBlock(true), vue.createElementBlock(
          vue.Fragment,
          null,
          vue.renderList($setup.likeList, (item, index) => {
            return vue.openBlock(), vue.createElementBlock("view", {
              key: index,
              class: "article-item"
            }, [
              vue.createElementVNode("view", {
                class: "article-header",
                onClick: ($event) => $setup.handleToDetail(item.userVO.id)
              }, [
                vue.createVNode(_component_wd_img, {
                  src: item.userVO.imageUrl,
                  width: 45,
                  height: 45,
                  round: "",
                  mode: "scaleToFill"
                }, null, 8, ["src"]),
                vue.createElementVNode("view", { class: "article-info" }, [
                  vue.createElementVNode(
                    "text",
                    { class: "article-author" },
                    vue.toDisplayString(item.userVO.userName),
                    1
                    /* TEXT */
                  ),
                  vue.createElementVNode(
                    "text",
                    { class: "article-date" },
                    "发布时间: " + vue.toDisplayString(item.createTime),
                    1
                    /* TEXT */
                  )
                ])
              ], 8, ["onClick"]),
              vue.createElementVNode("view", {
                class: "article-content",
                onClick: ($event) => $setup.handleArticleInfo(item.id)
              }, [
                vue.createVNode(_component_wd_text, {
                  text: item.content,
                  color: "#565756",
                  size: "14px",
                  lines: 4
                }, null, 8, ["text"]),
                vue.createCommentVNode("{{ item.content }}")
              ], 8, ["onClick"]),
              item.imagesList != null ? (vue.openBlock(), vue.createElementBlock("view", {
                key: 0,
                class: vue.normalizeClass(["image-list", [$setup.getImageLayoutClass(item.imagesList.length)]]),
                onClick: ($event) => $setup.handleArticleInfo(item.id)
              }, [
                (vue.openBlock(true), vue.createElementBlock(
                  vue.Fragment,
                  null,
                  vue.renderList(item.imagesList.slice(0, 9), (url2, index2) => {
                    return vue.openBlock(), vue.createElementBlock("view", {
                      key: index2,
                      class: "image-wrapper"
                    }, [
                      vue.createVNode(_component_wd_img, {
                        width: "100%",
                        height: "100%",
                        mode: "aspectFill",
                        "show-menu-by-longpress": true,
                        radius: "5px",
                        src: url2,
                        onClick: vue.withModifiers(($event) => _ctx.previewImage(url2, item.imagesList), ["stop"])
                      }, {
                        loading: vue.withCtx(() => [
                          vue.createElementVNode("view", { class: "loading-wrap" }, [
                            vue.createVNode(_component_wd_loading)
                          ])
                        ]),
                        error: vue.withCtx(() => [
                          vue.createElementVNode("view", { class: "error-wrap" }, "加载失败")
                        ]),
                        _: 2
                        /* DYNAMIC */
                      }, 1032, ["src", "onClick"]),
                      vue.createCommentVNode(" 当为第9张且总数量超过9时显示蒙版 "),
                      index2 === 8 && item.imagesList.length > 9 ? (vue.openBlock(), vue.createElementBlock("view", {
                        key: 0,
                        class: "mask"
                      }, [
                        vue.createElementVNode(
                          "text",
                          { class: "plus-text" },
                          "+" + vue.toDisplayString(item.imagesList.length - 9),
                          1
                          /* TEXT */
                        )
                      ])) : vue.createCommentVNode("v-if", true)
                    ]);
                  }),
                  128
                  /* KEYED_FRAGMENT */
                ))
              ], 10, ["onClick"])) : vue.createCommentVNode("v-if", true),
              vue.createElementVNode("view", { class: "article-footer" }, [
                vue.createElementVNode("view", { class: "footer-left" }, [
                  vue.createElementVNode("view", { class: "footer-item" }, [
                    vue.createVNode(_component_wd_icon, {
                      name: "view",
                      size: "16px"
                    }),
                    vue.createElementVNode(
                      "text",
                      null,
                      vue.toDisplayString(item.viewCount),
                      1
                      /* TEXT */
                    )
                  ]),
                  vue.createElementVNode("view", {
                    class: "footer-item",
                    onClick: ($event) => _ctx.handleLikeItem(item.id, index)
                  }, [
                    vue.createCommentVNode('<wd-icon name="thumb-up" size="16px"/>'),
                    item.isLike ? (vue.openBlock(), vue.createElementBlock("i", {
                      key: 0,
                      class: "t-icon t-icon-like-selected",
                      style: { "font-size": "16px" }
                    })) : (vue.openBlock(), vue.createElementBlock("i", {
                      key: 1,
                      class: "t-icon t-icon-like",
                      style: { "font-size": "16px" }
                    })),
                    vue.createElementVNode(
                      "text",
                      null,
                      vue.toDisplayString(item.likeCount),
                      1
                      /* TEXT */
                    )
                  ], 8, ["onClick"]),
                  vue.createElementVNode("view", {
                    class: "footer-item",
                    onClick: ($event) => $setup.handleArticleInfo(item.id)
                  }, [
                    vue.createVNode(_component_wd_icon, {
                      name: "chat",
                      size: "16px"
                    }),
                    vue.createElementVNode(
                      "text",
                      null,
                      vue.toDisplayString(item.commentCount),
                      1
                      /* TEXT */
                    )
                  ], 8, ["onClick"])
                ]),
                vue.createElementVNode("view", {
                  onClick: _cache[2] || (_cache[2] = (...args) => _ctx.closeOutside && _ctx.closeOutside(...args))
                }, [
                  vue.createVNode(_component_wd_popover, {
                    mode: "menu",
                    content: _ctx.menu,
                    onMenuclick: ($event) => _ctx.link(item.id)
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_wd_icon, {
                        name: "more",
                        size: "16px"
                      })
                    ]),
                    _: 2
                    /* DYNAMIC */
                  }, 1032, ["content", "onMenuclick"])
                ])
              ])
            ]);
          }),
          128
          /* KEYED_FRAGMENT */
        ))
      ])) : vue.createCommentVNode("v-if", true),
      vue.createCommentVNode(" 加载状态 "),
      vue.createVNode(_component_wd_loadmore, {
        "custom-class": "loadmore",
        state: $setup.loadStatus,
        "loading-text": "别急在跑了...",
        "finished-text": "已经没有啦~",
        "error-text": "与火星断联了~，点击重试",
        onClickError: $setup.retryLoad
      }, null, 8, ["state"]),
      vue.createVNode(_component_wd_toast)
    ]);
  }
  const PagesMyMy = /* @__PURE__ */ _export_sfc(_sfc_main$P, [["render", _sfc_render$O], ["__scopeId", "data-v-2f1ef635"], ["__file", "G:/Code/campus/miniProject/pages/my/my.vue"]]);
  const navbarProps = {
    ...baseProps,
    /**
     * 标题文字
     */
    title: String,
    /**
     * 左侧文案
     */
    leftText: String,
    /**
     * 右侧文案
     */
    rightText: String,
    /**
     * 是否显示左侧箭头
     */
    leftArrow: makeBooleanProp(false),
    /**
     * 是否显示下边框
     */
    bordered: makeBooleanProp(true),
    /**
     * 是否固定到顶部
     */
    fixed: makeBooleanProp(false),
    /**
     * 固定在顶部时，是否在标签位置生成一个等高的占位元素
     */
    placeholder: makeBooleanProp(false),
    /**
     * 导航栏 z-index
     */
    zIndex: makeNumberProp(500),
    /**
     * 是否开启顶部安全区适配
     */
    safeAreaInsetTop: makeBooleanProp(false),
    /**
     * 是否禁用左侧按钮，禁用时透明度降低，且无法点击
     */
    leftDisabled: makeBooleanProp(false),
    /**
     * 是否禁用右侧按钮，禁用时透明度降低，且无法点击
     */
    rightDisabled: makeBooleanProp(false)
  };
  const __default__$l = {
    name: "wd-navbar",
    options: {
      virtualHost: true,
      addGlobalClass: true,
      styleIsolation: "shared"
    }
  };
  const _sfc_main$O = /* @__PURE__ */ vue.defineComponent({
    ...__default__$l,
    props: navbarProps,
    emits: ["click-left", "click-right"],
    setup(__props, { expose: __expose, emit: __emit }) {
      __expose();
      const props = __props;
      const emit = __emit;
      const height = vue.ref("");
      const { statusBarHeight } = uni.getSystemInfoSync();
      vue.watch(
        [() => props.fixed, () => props.placeholder],
        () => {
          setPlaceholderHeight();
        },
        { deep: true, immediate: false }
      );
      const rootStyle = vue.computed(() => {
        const style = {};
        if (props.fixed && isDef(props.zIndex)) {
          style["z-index"] = props.zIndex;
        }
        if (props.safeAreaInsetTop) {
          style["padding-top"] = addUnit(statusBarHeight || 0);
        }
        return `${objToStyle(style)};${props.customStyle}`;
      });
      vue.onMounted(() => {
        if (props.fixed && props.placeholder) {
          vue.nextTick(() => {
            setPlaceholderHeight();
          });
        }
      });
      function handleClickLeft() {
        if (!props.leftDisabled) {
          emit("click-left");
        }
      }
      function handleClickRight() {
        if (!props.rightDisabled) {
          emit("click-right");
        }
      }
      const { proxy } = vue.getCurrentInstance();
      function setPlaceholderHeight() {
        if (!props.fixed || !props.placeholder) {
          return;
        }
        getRect(".wd-navbar", false, proxy).then((res) => {
          height.value = res.height;
        });
      }
      const __returned__ = { props, emit, height, statusBarHeight, rootStyle, handleClickLeft, handleClickRight, proxy, setPlaceholderHeight, wdIcon: __easycom_0$5, get addUnit() {
        return addUnit;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$N(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        style: vue.normalizeStyle({ height: $setup.addUnit($setup.height) })
      },
      [
        vue.createElementVNode(
          "view",
          {
            class: vue.normalizeClass(`wd-navbar ${_ctx.customClass} ${_ctx.fixed ? "is-fixed" : ""} ${_ctx.bordered ? "is-border" : ""}`),
            style: vue.normalizeStyle($setup.rootStyle)
          },
          [
            vue.createElementVNode("view", { class: "wd-navbar__content" }, [
              _ctx.$slots.capsule ? (vue.openBlock(), vue.createElementBlock("view", {
                key: 0,
                class: "wd-navbar__capsule"
              }, [
                vue.renderSlot(_ctx.$slots, "capsule", {}, void 0, true)
              ])) : !_ctx.$slots.left ? (vue.openBlock(), vue.createElementBlock(
                "view",
                {
                  key: 1,
                  class: vue.normalizeClass(`wd-navbar__left ${_ctx.leftDisabled ? "is-disabled" : ""}`),
                  onClick: $setup.handleClickLeft
                },
                [
                  _ctx.leftArrow ? (vue.openBlock(), vue.createBlock($setup["wdIcon"], {
                    key: 0,
                    name: "arrow-left",
                    "custom-class": "wd-navbar__arrow"
                  })) : vue.createCommentVNode("v-if", true),
                  _ctx.leftText ? (vue.openBlock(), vue.createElementBlock(
                    "view",
                    {
                      key: 1,
                      class: "wd-navbar__text"
                    },
                    vue.toDisplayString(_ctx.leftText),
                    1
                    /* TEXT */
                  )) : vue.createCommentVNode("v-if", true)
                ],
                2
                /* CLASS */
              )) : (vue.openBlock(), vue.createElementBlock(
                "view",
                {
                  key: 2,
                  class: vue.normalizeClass(`wd-navbar__left ${_ctx.leftDisabled ? "is-disabled" : ""}`),
                  onClick: $setup.handleClickLeft
                },
                [
                  vue.renderSlot(_ctx.$slots, "left", {}, void 0, true)
                ],
                2
                /* CLASS */
              )),
              vue.createElementVNode("view", { class: "wd-navbar__title" }, [
                vue.renderSlot(_ctx.$slots, "title", {}, void 0, true),
                !_ctx.$slots.title && _ctx.title ? (vue.openBlock(), vue.createElementBlock(
                  vue.Fragment,
                  { key: 0 },
                  [
                    vue.createTextVNode(
                      vue.toDisplayString(_ctx.title),
                      1
                      /* TEXT */
                    )
                  ],
                  64
                  /* STABLE_FRAGMENT */
                )) : vue.createCommentVNode("v-if", true)
              ]),
              _ctx.$slots.right || _ctx.rightText ? (vue.openBlock(), vue.createElementBlock(
                "view",
                {
                  key: 3,
                  class: vue.normalizeClass(`wd-navbar__right ${_ctx.rightDisabled ? "is-disabled" : ""}`),
                  onClick: $setup.handleClickRight
                },
                [
                  vue.renderSlot(_ctx.$slots, "right", {}, void 0, true),
                  !_ctx.$slots.right && _ctx.rightText ? (vue.openBlock(), vue.createElementBlock(
                    "view",
                    {
                      key: 0,
                      class: "wd-navbar__text",
                      "hover-class": "wd-navbar__text--hover",
                      "hover-stay-time": 70
                    },
                    vue.toDisplayString(_ctx.rightText),
                    1
                    /* TEXT */
                  )) : vue.createCommentVNode("v-if", true)
                ],
                2
                /* CLASS */
              )) : vue.createCommentVNode("v-if", true)
            ])
          ],
          6
          /* CLASS, STYLE */
        )
      ],
      4
      /* STYLE */
    );
  }
  const __easycom_1$3 = /* @__PURE__ */ _export_sfc(_sfc_main$O, [["render", _sfc_render$N], ["__scopeId", "data-v-089e80c4"], ["__file", "G:/Code/campus/miniProject/uni_modules/wot-design-uni/components/wd-navbar/wd-navbar.vue"]]);
  const textareaProps = {
    ...baseProps,
    /**
     * * 自定义文本域容器class名称。
     * 类型：string
     */
    customTextareaContainerClass: makeStringProp(""),
    /**
     * * 自定义文本域class名称。
     * 类型：string
     */
    customTextareaClass: makeStringProp(""),
    /**
     * * 自定义标签class名称。
     * 类型：string
     */
    customLabelClass: makeStringProp(""),
    // 原生属性
    /**
     * * 绑定值。
     * 类型：string | number
     */
    modelValue: makeNumericProp(""),
    /**
     * * 占位文本。
     * 类型：string
     * 默认值：'请输入...'
     */
    placeholder: String,
    /**
     * 指定placeholder的样式。
     * 类型：string
     */
    placeholderStyle: String,
    /**
     * * 指定placeholder的样式类。
     * 类型：string
     * 默认值：空字符串
     */
    placeholderClass: makeStringProp(""),
    /**
     * * 禁用输入框。
     * 类型：boolean
     * 默认值：false
     */
    disabled: makeBooleanProp(false),
    /**
     * * 最大输入长度，设置为-1表示不限制最大长度。
     * 类型：number
     * 默认值：-1
     */
    maxlength: makeNumberProp(-1),
    /**
     * * 自动聚焦并拉起键盘。
     * 类型：boolean
     * 默认值：false
     */
    autoFocus: makeBooleanProp(false),
    /**
     * * 获取焦点。
     * 类型：boolean
     * 默认值：false
     */
    focus: makeBooleanProp(false),
    /**
     * * 是否自动增高输入框高度，style.height属性在auto-height生效时不生效。
     * 类型：boolean
     * 默认值：false
     */
    autoHeight: makeBooleanProp(false),
    /**
     * * 如果textarea处于position:fixed区域，需要设置此属性为true。
     * 类型：boolean
     * 默认值：false
     */
    fixed: makeBooleanProp(false),
    /**
     * * 指定光标与键盘的距离，取textarea距离底部的距离和cursor-spacing指定的距离的最小值作为实际距离。
     * 类型：number
     * 默认值：0
     */
    cursorSpacing: makeNumberProp(0),
    /**
     * * 指定focus时的光标位置。
     * 类型：number
     * 默认值：-1
     */
    cursor: makeNumberProp(-1),
    /**
     * * 设置键盘右下角按钮的文字。
     * 类型：string
     * 默认值：'done'
     * 可选值有'done', 'go', 'next', 'search', 'send'
     */
    confirmType: String,
    /**
     * * 点击键盘右下角按钮时是否保持键盘不收起。
     * 类型：boolean
     * 默认值：false
     */
    confirmHold: makeBooleanProp(false),
    /**
     * * 是否显示键盘上方带有“完成”按钮那一栏。
     * 类型：boolean
     * 默认值：true
     */
    showConfirmBar: makeBooleanProp(true),
    /**
     * * 光标起始位置，自动聚集时有效，需与selection-end搭配使用。
     * 类型：number
     * 默认值：-1
     */
    selectionStart: makeNumberProp(-1),
    /**
     * * 光标结束位置，自动聚集时有效，需与selection-start搭配使用。
     * 类型：number
     * 默认值：-1
     */
    selectionEnd: makeNumberProp(-1),
    /**
     * * 键盘弹起时是否自动上推页面。
     * 类型：boolean
     * 默认值：true
     */
    adjustPosition: makeBooleanProp(true),
    /**
     * * 是否去掉iOS下的默认内边距。
     * 类型：boolean
     * 默认值：false
     */
    disableDefaultPadding: makeBooleanProp(false),
    /**
     * * focus状态下点击页面时是否不收起键盘。
     * 类型：boolean
     * 默认值：false
     */
    holdKeyboard: makeBooleanProp(false),
    // 非原生属性
    /**
     * * 显示为密码框。
     * 类型：boolean
     * 默认值：false
     */
    showPassword: makeBooleanProp(false),
    /**
     * * 是否显示清空按钮。
     * 类型：boolean
     * 默认值：false
     */
    clearable: makeBooleanProp(false),
    /**
     * * 输入框只读状态。
     * 类型：boolean
     * 默认值：false
     */
    readonly: makeBooleanProp(false),
    /**
     * * 前置图标，icon组件中的图标类名。
     * 类型：string
     */
    prefixIcon: String,
    /**
     * * 是否显示字数限制，需要同时设置maxlength。
     * 类型：boolean
     * 默认值：false
     */
    showWordLimit: makeBooleanProp(false),
    /**
     * 设置左侧标题。
     * 类型：string
     */
    label: String,
    /**
     * 设置左侧标题宽度。
     * 类型：string
     */
    labelWidth: makeStringProp(""),
    /**
     * * 设置输入框大小。
     * 类型：string
     */
    size: String,
    /**
     * * 设置输入框错误状态（红色）。
     * 类型：boolean
     * 默认值：false
     */
    error: makeBooleanProp(false),
    /**
     * * 当存在label属性时，设置标题和输入框垂直居中，默认为顶部居中。
     * 类型：boolean
     * 默认值：false
     */
    center: makeBooleanProp(false),
    /**
     * * 非cell类型下是否隐藏下划线。
     * 类型：boolean
     * 默认值：false
     */
    noBorder: makeBooleanProp(false),
    /**
     * * cell类型下必填样式。
     * 类型：boolean
     * 默认值：false
     */
    required: makeBooleanProp(false),
    /**
     * * 表单域model字段名，在使用表单校验功能的情况下，该属性是必填的。
     * 类型：string
     */
    prop: makeStringProp(""),
    /**
     * * 表单验证规则。
     * 类型：FormItemRule[]
     * 默认值：[]
     */
    rules: makeArrayProp(),
    /**
     * 显示清除图标的时机，always 表示输入框不为空时展示，focus 表示输入框聚焦且不为空时展示
     * 类型: "focus" | "always"
     * 默认值: "always"
     */
    clearTrigger: makeStringProp("always"),
    /**
     * 是否在点击清除按钮时聚焦输入框
     * 类型: boolean
     * 默认值: true
     */
    focusWhenClear: makeBooleanProp(true),
    /**
     * 是否忽略组件内对文本合成系统事件的处理。为 false 时将触发 compositionstart、compositionend、compositionupdate 事件，且在文本合成期间会触发 input 事件
     * 类型: boolean
     * 默认值: true
     */
    ignoreCompositionEvent: makeBooleanProp(true),
    /**
     * 它提供了用户在编辑元素或其内容时可能输入的数据类型的提示。在符合条件的高版本webview里，uni-app的web和app-vue平台中可使用本属性。
     * 类型: InputMode
     * 可选值: "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | "search" | "password"
     * 默认值: "text"
     */
    inputmode: makeStringProp("text")
  };
  const __default__$k = {
    name: "wd-textarea",
    options: {
      virtualHost: true,
      addGlobalClass: true,
      styleIsolation: "shared"
    }
  };
  const _sfc_main$N = /* @__PURE__ */ vue.defineComponent({
    ...__default__$k,
    props: textareaProps,
    emits: [
      "update:modelValue",
      "clear",
      "blur",
      "focus",
      "input",
      "keyboardheightchange",
      "confirm",
      "linechange",
      "clickprefixicon",
      "click"
    ],
    setup(__props, { expose: __expose, emit: __emit }) {
      __expose();
      const { translate } = useTranslate("textarea");
      const props = __props;
      const emit = __emit;
      const slots = vue.useSlots();
      const placeholderValue = vue.computed(() => {
        return isDef(props.placeholder) ? props.placeholder : translate("placeholder");
      });
      const clearing = vue.ref(false);
      const focused = vue.ref(false);
      const focusing = vue.ref(false);
      const inputValue = vue.ref("");
      const cell = useCell();
      vue.watch(
        () => props.focus,
        (newValue) => {
          focused.value = newValue;
        },
        { immediate: true, deep: true }
      );
      vue.watch(
        () => props.modelValue,
        (newValue) => {
          inputValue.value = isDef(newValue) ? String(newValue) : "";
        },
        { immediate: true, deep: true }
      );
      const { parent: form } = useParent(FORM_KEY);
      const showClear = vue.computed(() => {
        const { disabled, readonly, clearable, clearTrigger } = props;
        if (clearable && !readonly && !disabled && inputValue.value && (clearTrigger === "always" || props.clearTrigger === "focus" && focusing.value)) {
          return true;
        } else {
          return false;
        }
      });
      const showWordCount = vue.computed(() => {
        const { disabled, readonly, maxlength, showWordLimit } = props;
        return Boolean(!disabled && !readonly && isDef(maxlength) && maxlength > -1 && showWordLimit);
      });
      const errorMessage = vue.computed(() => {
        if (form && props.prop && form.errorMessages && form.errorMessages[props.prop]) {
          return form.errorMessages[props.prop];
        } else {
          return "";
        }
      });
      const isRequired = vue.computed(() => {
        let formRequired = false;
        if (form && form.props.rules) {
          const rules = form.props.rules;
          for (const key in rules) {
            if (Object.prototype.hasOwnProperty.call(rules, key) && key === props.prop && Array.isArray(rules[key])) {
              formRequired = rules[key].some((rule) => rule.required);
            }
          }
        }
        return props.required || props.rules.some((rule) => rule.required) || formRequired;
      });
      const currentLength = vue.computed(() => {
        return String(formatValue(props.modelValue) || "").length;
      });
      const rootClass = vue.computed(() => {
        return `wd-textarea   ${props.label || slots.label ? "is-cell" : ""} ${props.center ? "is-center" : ""} ${cell.border.value ? "is-border" : ""} ${props.size ? "is-" + props.size : ""} ${props.error ? "is-error" : ""} ${props.disabled ? "is-disabled" : ""} ${props.autoHeight ? "is-auto-height" : ""} ${currentLength.value > 0 ? "is-not-empty" : ""}  ${props.noBorder ? "is-no-border" : ""} ${props.customClass}`;
      });
      const labelClass = vue.computed(() => {
        return `wd-textarea__label ${props.customLabelClass} ${isRequired.value ? "is-required" : ""}`;
      });
      const inputPlaceholderClass = vue.computed(() => {
        return `wd-textarea__placeholder  ${props.placeholderClass}`;
      });
      const countClass = vue.computed(() => {
        return `${currentLength.value > 0 ? "wd-textarea__count-current" : ""} ${currentLength.value > props.maxlength ? "is-error" : ""}`;
      });
      const labelStyle = vue.computed(() => {
        return props.labelWidth ? objToStyle({
          "min-width": props.labelWidth,
          "max-width": props.labelWidth
        }) : "";
      });
      vue.onBeforeMount(() => {
        initState();
      });
      function initState() {
        inputValue.value = formatValue(inputValue.value);
        emit("update:modelValue", inputValue.value);
      }
      function formatValue(value) {
        const { maxlength, showWordLimit } = props;
        if (showWordLimit && maxlength !== -1 && String(value).length > maxlength) {
          return value.toString().substring(0, maxlength);
        }
        return `${value}`;
      }
      async function handleClear() {
        clearing.value = true;
        focusing.value = false;
        inputValue.value = "";
        if (props.focusWhenClear) {
          focused.value = false;
        }
        await pause();
        if (props.focusWhenClear) {
          focused.value = true;
          focusing.value = true;
        }
        emit("update:modelValue", inputValue.value);
        emit("clear");
      }
      async function handleBlur({ detail }) {
        await pause(150);
        if (clearing.value) {
          clearing.value = false;
          return;
        }
        focusing.value = false;
        emit("blur", {
          value: inputValue.value,
          cursor: detail.cursor ? detail.cursor : null
        });
      }
      function handleFocus({ detail }) {
        focusing.value = true;
        emit("focus", detail);
      }
      function handleInput({ detail }) {
        inputValue.value = formatValue(inputValue.value);
        emit("update:modelValue", inputValue.value);
        emit("input", detail);
      }
      function handleKeyboardheightchange({ detail }) {
        emit("keyboardheightchange", detail);
      }
      function handleConfirm({ detail }) {
        emit("confirm", detail);
      }
      function handleLineChange({ detail }) {
        emit("linechange", detail);
      }
      function onClickPrefixIcon() {
        emit("clickprefixicon");
      }
      const __returned__ = { translate, props, emit, slots, placeholderValue, clearing, focused, focusing, inputValue, cell, form, showClear, showWordCount, errorMessage, isRequired, currentLength, rootClass, labelClass, inputPlaceholderClass, countClass, labelStyle, initState, formatValue, handleClear, handleBlur, handleFocus, handleInput, handleKeyboardheightchange, handleConfirm, handleLineChange, onClickPrefixIcon, wdIcon: __easycom_0$5 };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$M(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: vue.normalizeClass($setup.rootClass),
        style: vue.normalizeStyle(_ctx.customStyle)
      },
      [
        _ctx.label || _ctx.$slots.label ? (vue.openBlock(), vue.createElementBlock(
          "view",
          {
            key: 0,
            class: vue.normalizeClass($setup.labelClass),
            style: vue.normalizeStyle($setup.labelStyle)
          },
          [
            _ctx.prefixIcon || _ctx.$slots.prefix ? (vue.openBlock(), vue.createElementBlock("view", {
              key: 0,
              class: "wd-textarea__prefix"
            }, [
              _ctx.prefixIcon && !_ctx.$slots.prefix ? (vue.openBlock(), vue.createBlock($setup["wdIcon"], {
                key: 0,
                "custom-class": "wd-textarea__icon",
                name: _ctx.prefixIcon,
                onClick: $setup.onClickPrefixIcon
              }, null, 8, ["name"])) : vue.renderSlot(_ctx.$slots, "prefix", { key: 1 }, void 0, true)
            ])) : vue.createCommentVNode("v-if", true),
            vue.createElementVNode("view", { class: "wd-textarea__label-inner" }, [
              _ctx.label && !_ctx.$slots.label ? (vue.openBlock(), vue.createElementBlock(
                "text",
                { key: 0 },
                vue.toDisplayString(_ctx.label),
                1
                /* TEXT */
              )) : vue.renderSlot(_ctx.$slots, "label", { key: 1 }, void 0, true)
            ])
          ],
          6
          /* CLASS, STYLE */
        )) : vue.createCommentVNode("v-if", true),
        vue.createCommentVNode(" 文本域 "),
        vue.createElementVNode(
          "view",
          {
            class: vue.normalizeClass(`wd-textarea__value ${$setup.showClear ? "is-suffix" : ""} ${_ctx.customTextareaContainerClass} ${$setup.showWordCount ? "is-show-limit" : ""}`)
          },
          [
            vue.withDirectives(vue.createElementVNode("textarea", {
              class: vue.normalizeClass(`wd-textarea__inner ${_ctx.customTextareaClass}`),
              "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $setup.inputValue = $event),
              "show-count": false,
              placeholder: $setup.placeholderValue,
              disabled: _ctx.disabled || _ctx.readonly,
              maxlength: _ctx.maxlength,
              focus: $setup.focused,
              "auto-focus": _ctx.autoFocus,
              "placeholder-style": _ctx.placeholderStyle,
              "placeholder-class": $setup.inputPlaceholderClass,
              "auto-height": _ctx.autoHeight,
              "cursor-spacing": _ctx.cursorSpacing,
              fixed: _ctx.fixed,
              cursor: _ctx.cursor,
              "show-confirm-bar": _ctx.showConfirmBar,
              "selection-start": _ctx.selectionStart,
              "selection-end": _ctx.selectionEnd,
              "adjust-position": _ctx.adjustPosition,
              "hold-keyboard": _ctx.holdKeyboard,
              "confirm-type": _ctx.confirmType,
              "confirm-hold": _ctx.confirmHold,
              "disable-default-padding": _ctx.disableDefaultPadding,
              ignoreCompositionEvent: _ctx.ignoreCompositionEvent,
              inputmode: _ctx.inputmode,
              onInput: $setup.handleInput,
              onFocus: $setup.handleFocus,
              onBlur: $setup.handleBlur,
              onConfirm: $setup.handleConfirm,
              onLinechange: $setup.handleLineChange,
              onKeyboardheightchange: $setup.handleKeyboardheightchange
            }, null, 42, ["placeholder", "disabled", "maxlength", "focus", "auto-focus", "placeholder-style", "placeholder-class", "auto-height", "cursor-spacing", "fixed", "cursor", "show-confirm-bar", "selection-start", "selection-end", "adjust-position", "hold-keyboard", "confirm-type", "confirm-hold", "disable-default-padding", "ignoreCompositionEvent", "inputmode"]), [
              [vue.vModelText, $setup.inputValue]
            ]),
            $setup.errorMessage ? (vue.openBlock(), vue.createElementBlock(
              "view",
              {
                key: 0,
                class: "wd-textarea__error-message"
              },
              vue.toDisplayString($setup.errorMessage),
              1
              /* TEXT */
            )) : vue.createCommentVNode("v-if", true),
            _ctx.readonly ? (vue.openBlock(), vue.createElementBlock("view", {
              key: 1,
              class: "wd-textarea__readonly-mask"
            })) : vue.createCommentVNode("v-if", true),
            vue.createElementVNode("view", { class: "wd-textarea__suffix" }, [
              $setup.showClear ? (vue.openBlock(), vue.createBlock($setup["wdIcon"], {
                key: 0,
                "custom-class": "wd-textarea__clear",
                name: "error-fill",
                onClick: $setup.handleClear
              })) : vue.createCommentVNode("v-if", true),
              $setup.showWordCount ? (vue.openBlock(), vue.createElementBlock("view", {
                key: 1,
                class: "wd-textarea__count"
              }, [
                vue.createElementVNode(
                  "text",
                  {
                    class: vue.normalizeClass($setup.countClass)
                  },
                  vue.toDisplayString($setup.currentLength),
                  3
                  /* TEXT, CLASS */
                ),
                vue.createTextVNode(
                  " /" + vue.toDisplayString(_ctx.maxlength),
                  1
                  /* TEXT */
                )
              ])) : vue.createCommentVNode("v-if", true)
            ])
          ],
          2
          /* CLASS */
        )
      ],
      6
      /* CLASS, STYLE */
    );
  }
  const __easycom_5$1 = /* @__PURE__ */ _export_sfc(_sfc_main$N, [["render", _sfc_render$M], ["__scopeId", "data-v-7d71e04e"], ["__file", "G:/Code/campus/miniProject/uni_modules/wot-design-uni/components/wd-textarea/wd-textarea.vue"]]);
  const videoPreviewProps = {
    ...baseProps
  };
  const __default__$j = {
    name: "wd-video-preview",
    options: {
      addGlobalClass: true,
      virtualHost: true,
      styleIsolation: "shared"
    }
  };
  const _sfc_main$M = /* @__PURE__ */ vue.defineComponent({
    ...__default__$j,
    props: videoPreviewProps,
    setup(__props, { expose: __expose }) {
      const showPopup = vue.ref(false);
      const previdewVideo = vue.reactive({ url: "", poster: "", title: "" });
      function open(video) {
        showPopup.value = true;
        previdewVideo.url = video.url;
        previdewVideo.poster = video.poster;
        previdewVideo.title = video.title;
      }
      function close() {
        showPopup.value = false;
        vue.nextTick(() => {
          handleClosed();
        });
      }
      function handleClosed() {
        previdewVideo.url = "";
        previdewVideo.poster = "";
        previdewVideo.title = "";
      }
      __expose({
        open,
        close
      });
      const __returned__ = { showPopup, previdewVideo, open, close, handleClosed, wdIcon: __easycom_0$5 };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$L(_ctx, _cache, $props, $setup, $data, $options) {
    return $setup.showPopup ? (vue.openBlock(), vue.createElementBlock(
      "view",
      {
        key: 0,
        class: vue.normalizeClass(`wd-video-preview ${_ctx.customClass}`),
        style: vue.normalizeStyle(_ctx.customStyle),
        onClick: $setup.close
      },
      [
        vue.createElementVNode("view", {
          class: "wd-video-preview__video",
          onClick: _cache[0] || (_cache[0] = vue.withModifiers(() => {
          }, ["stop"]))
        }, [
          $setup.previdewVideo.url ? (vue.openBlock(), vue.createElementBlock("video", {
            key: 0,
            class: "wd-video-preview__video",
            controls: true,
            poster: $setup.previdewVideo.poster,
            title: $setup.previdewVideo.title,
            "play-btn-position": "center",
            enableNative: true,
            src: $setup.previdewVideo.url,
            "enable-progress-gesture": false
          }, null, 8, ["poster", "title", "src"])) : vue.createCommentVNode("v-if", true)
        ]),
        vue.createVNode($setup["wdIcon"], {
          name: "close",
          "custom-class": `wd-video-preview__close`,
          onClick: $setup.close
        })
      ],
      6
      /* CLASS, STYLE */
    )) : vue.createCommentVNode("v-if", true);
  }
  const wdVideoPreview = /* @__PURE__ */ _export_sfc(_sfc_main$M, [["render", _sfc_render$L], ["__scopeId", "data-v-f37e4d17"], ["__file", "G:/Code/campus/miniProject/uni_modules/wot-design-uni/components/wd-video-preview/wd-video-preview.vue"]]);
  function formatImage(res) {
    if (isArray(res.tempFiles)) {
      const result = [];
      res.tempFiles.forEach(async (item) => {
        result.push({
          path: item.path || "",
          name: item.name || "",
          size: item.size,
          type: "image",
          thumb: item.path || ""
        });
      });
      return result;
    } else {
      return [
        {
          path: res.tempFiles.path || "",
          name: res.tempFiles.name || "",
          size: res.tempFiles.size,
          type: "image",
          thumb: res.tempFiles.path || ""
        }
      ];
    }
  }
  function formatVideo(res) {
    return [
      {
        path: res.tempFilePath || res.filePath || "",
        name: res.name || "",
        size: res.size,
        type: "video",
        thumb: res.thumbTempFilePath || "",
        duration: res.duration
      }
    ];
  }
  function chooseFile({
    multiple,
    sizeType,
    sourceType,
    maxCount,
    accept,
    compressed,
    maxDuration,
    camera
  }) {
    return new Promise((resolve, reject) => {
      switch (accept) {
        case "image":
          uni.chooseImage({
            count: multiple ? Math.min(maxCount, 9) : 1,
            // 最多可以选择的数量，如果不支持多选则数量为1
            sizeType,
            sourceType,
            success: (res) => resolve(formatImage(res)),
            fail: (error) => {
              reject(error);
            }
          });
          break;
        case "video":
          uni.chooseVideo({
            sourceType,
            compressed,
            maxDuration,
            camera,
            success: (res) => {
              resolve(formatVideo(res));
            },
            fail: reject
          });
          break;
        case "all":
          break;
        default:
          uni.chooseImage({
            count: multiple ? Math.min(maxCount, 9) : 1,
            // 最多可以选择的数量，如果不支持多选则数量为1
            sizeType,
            sourceType,
            success: (res) => resolve(formatImage(res)),
            fail: reject
          });
          break;
      }
    });
  }
  const uploadProps = {
    ...baseProps,
    /**
     * 上传的文件列表,例如:[{name:'food.jpg',url:'https://xxx.cdn.com/xxx.jpg'}]
     * 类型：array
     * 默认值：[]
     */
    fileList: makeArrayProp(),
    /**
     * 必选参数，上传的地址
     * 类型：string
     * 默认值：''
     */
    action: makeStringProp(""),
    /**
     * 设置上传的请求头部
     * 类型：object
     * 默认值：{}
     */
    header: { type: Object, default: () => ({}) },
    /**
     * 是否支持多选文件
     * 类型：boolean
     * 默认值：false
     */
    multiple: makeBooleanProp(false),
    /**
     * 是否禁用
     * 类型：boolean
     * 默认值：false
     */
    disabled: makeBooleanProp(false),
    /**
     * 最大允许上传个数
     * 类型：number
     * 默认值：无
     */
    limit: Number,
    /**
     * 限制上传个数的情况下，是否展示当前上传的个数
     * 类型：boolean
     * 默认值：true
     */
    showLimitNum: makeBooleanProp(true),
    /**
     * 文件大小限制，单位为byte
     * 类型：number
     * 默认值：Number.MAX_VALUE
     */
    maxSize: makeNumberProp(Number.MAX_VALUE),
    /**
     * 选择图片的来源，chooseImage接口详细参数，查看官方手册
     * 类型：array
     * 默认值：['album','camera']
     */
    sourceType: {
      type: Array,
      default: () => ["album", "camera"]
    },
    /**
     * 所选的图片的尺寸，chooseImage接口详细参数，查看官方手册
     * 类型：array
     * 默认值：['original','compressed']
     */
    sizeType: {
      type: Array,
      default: () => ["original", "compressed"]
    },
    /**
     * 文件对应的key，开发者在服务端可以通过这个key获取文件的二进制内容，uploadFile接口详细参数，查看官方手册
     * 类型：string
     * 默认值：'file'
     */
    name: makeStringProp("file"),
    /**
     * HTTP请求中其他额外的formdata，uploadFile接口详细参数，查看官方手册
     * 类型：object
     * 默认值：{}
     */
    formData: { type: Object, default: () => {
    } },
    /**
     * 预览失败执行操作
     * 类型：function({index,imgList})
     * 默认值：-
     */
    onPreviewFail: Function,
    /**
     * 上传文件之前的钩子，参数为上传的文件和文件列表，若返回false或者返回Promise且被reject，则停止上传。
     * 类型：function({files,fileList,resolve})
     * 默认值：-
     */
    beforeUpload: Function,
    /**
     * 选择图片之前的钩子，参数为文件列表，若返回false或者返回Promise且被reject，则停止上传。
     * 类型：function({fileList,resolve})
     * 默认值：-
     */
    beforeChoose: Function,
    /**
     * 删除文件之前的钩子，参数为要删除的文件和文件列表，若返回false或者返回Promise且被reject，则停止上传。
     * 类型：function({file,fileList,resolve})
     * 默认值：-
     */
    beforeRemove: Function,
    /**
     * 图片预览前的钩子，参数为预览的图片下标和图片列表，若返回false或者返回Promise且被reject，则停止上传。
     * 类型：function({index,imgList,resolve})
     * 默认值：-
     */
    beforePreview: Function,
    /**
     * 构建上传formData的钩子，参数为上传的文件、待处理的formData，返回值为处理后的formData，若返回false或者返回Promise且被reject，则停止上传。
     * 类型：function({file,formData,resolve})
     * 默认值：-
     * 最低版本：0.1.61
     */
    buildFormData: Function,
    /**
     * 加载中图标类型
     * 类型：string
     * 默认值：'ring'
     */
    loadingType: makeStringProp("ring"),
    /**
     * 加载中图标颜色
     * 类型：string
     * 默认值：'#ffffff'
     */
    loadingColor: makeStringProp("#ffffff"),
    /**
     * 文件类型，可选值：'image' | 'video' | 'media' | 'all' | 'file'
     * 默认值：image
     * 描述：'media'表示同时支持'image'和'video'，'file'表示支持除'image'和'video'外的所有文件类型，'all'标识支持全部类型文件
     * 'media'和'file'仅微信支持，'all'仅微信和H5支持
     */
    accept: makeStringProp("image"),
    /**
     * file 数据结构中，status 对应的 key
     * 类型：string
     * 默认值：'status'
     */
    statusKey: makeStringProp("status"),
    /**
     * 加载中图标尺寸
     * 类型：string
     * 默认值：'24px'
     */
    loadingSize: makeStringProp("24px"),
    /**
     * 是否压缩视频，当 accept 为 video 时生效。
     * 类型：boolean
     * 默认值：true
     */
    compressed: makeBooleanProp(true),
    /**
     * 拍摄视频最长拍摄时间，当 accept 为 video | media 时生效，单位秒。
     * 类型：number
     * 默认值：60
     */
    maxDuration: makeNumberProp(60),
    /**
     * 使用前置或者后置相机，当 accept 为 video | media 时生效，可选值为：back｜front。
     * 类型：UploadCameraType
     * 默认值：'back'
     */
    camera: makeStringProp("back"),
    /**
     * 预览图片的mode属性
     */
    imageMode: makeStringProp("aspectFit"),
    /**
     * 接口响应的成功状态（statusCode）值
     */
    successStatus: makeNumberProp(200),
    /**
     * 自定义上传按钮样式
     * 类型：string
     */
    customEvokeClass: makeStringProp(""),
    /**
     * 自定义预览图片列表样式
     * 类型：string
     */
    customPreviewClass: makeStringProp(""),
    /**
     * 是否选择文件后自动上传
     * 类型：boolean
     */
    autoUpload: makeBooleanProp(true),
    /**
     * 点击已上传时是否可以重新上传
     * 类型：boolean
     * 默认值：false
     */
    reupload: makeBooleanProp(false),
    /**
     * 自定义上传文件的请求方法
     * 类型：UploadMethod
     * 默认值：-
     */
    uploadMethod: Function
  };
  const __default__$i = {
    name: "wd-upload",
    options: {
      addGlobalClass: true,
      virtualHost: true,
      styleIsolation: "shared"
    }
  };
  const _sfc_main$L = /* @__PURE__ */ vue.defineComponent({
    ...__default__$i,
    props: uploadProps,
    emits: ["fail", "change", "success", "progress", "oversize", "chooseerror", "remove", "update:fileList"],
    setup(__props, { expose: __expose, emit: __emit }) {
      const props = __props;
      const emit = __emit;
      __expose({
        submit: () => startUploadFiles()
      });
      const { translate } = useTranslate("upload");
      const uploadFiles = vue.ref([]);
      const showUpload = vue.computed(() => !props.limit || uploadFiles.value.length < props.limit);
      const videoPreview = vue.ref();
      vue.watch(
        () => props.fileList,
        (val) => {
          const { statusKey } = props;
          if (isEqual(val, uploadFiles.value))
            return;
          const uploadFileList = val.map((item) => {
            item[statusKey] = item[statusKey] || "success";
            item.response = item.response || "";
            return { ...item, uid: context.id++ };
          });
          uploadFiles.value = uploadFileList;
        },
        {
          deep: true,
          immediate: true
        }
      );
      vue.watch(
        () => props.limit,
        (val) => {
          if (val && val < uploadFiles.value.length) {
            formatAppLog("error", "at uni_modules/wot-design-uni/components/wd-upload/wd-upload.vue:169", "[wot-design]Error: props limit must less than fileList.length");
          }
        },
        {
          deep: true,
          immediate: true
        }
      );
      vue.watch(
        () => props.beforePreview,
        (fn) => {
          if (fn && !isFunction(fn)) {
            formatAppLog("error", "at uni_modules/wot-design-uni/components/wd-upload/wd-upload.vue:182", "The type of beforePreview must be Function");
          }
        },
        {
          deep: true,
          immediate: true
        }
      );
      vue.watch(
        () => props.onPreviewFail,
        (fn) => {
          if (fn && !isFunction(fn)) {
            formatAppLog("error", "at uni_modules/wot-design-uni/components/wd-upload/wd-upload.vue:195", "The type of onPreviewFail must be Function");
          }
        },
        {
          deep: true,
          immediate: true
        }
      );
      vue.watch(
        () => props.beforeRemove,
        (fn) => {
          if (fn && !isFunction(fn)) {
            formatAppLog("error", "at uni_modules/wot-design-uni/components/wd-upload/wd-upload.vue:208", "The type of beforeRemove must be Function");
          }
        },
        {
          deep: true,
          immediate: true
        }
      );
      vue.watch(
        () => props.beforeUpload,
        (fn) => {
          if (fn && !isFunction(fn)) {
            formatAppLog("error", "at uni_modules/wot-design-uni/components/wd-upload/wd-upload.vue:221", "The type of beforeUpload must be Function");
          }
        },
        {
          deep: true,
          immediate: true
        }
      );
      vue.watch(
        () => props.beforeChoose,
        (fn) => {
          if (fn && !isFunction(fn)) {
            formatAppLog("error", "at uni_modules/wot-design-uni/components/wd-upload/wd-upload.vue:234", "The type of beforeChoose must be Function");
          }
        },
        {
          deep: true,
          immediate: true
        }
      );
      vue.watch(
        () => props.buildFormData,
        (fn) => {
          if (fn && !isFunction(fn)) {
            formatAppLog("error", "at uni_modules/wot-design-uni/components/wd-upload/wd-upload.vue:247", "The type of buildFormData must be Function");
          }
        },
        {
          deep: true,
          immediate: true
        }
      );
      function emitFileList() {
        emit("update:fileList", uploadFiles.value);
      }
      const upload = (file, formData, options) => {
        const uploadTask = uni.uploadFile({
          url: options.action,
          header: options.header,
          name: options.name,
          fileName: options.name,
          fileType: options.fileType,
          formData,
          filePath: file.url,
          success(res) {
            if (res.statusCode === options.statusCode) {
              options.onSuccess(res, file, formData);
            } else {
              options.onError({ ...res, errMsg: res.errMsg || "" }, file, formData);
            }
          },
          fail(err) {
            options.onError(err, file, formData);
          }
        });
        uploadTask.onProgressUpdate((res) => {
          options.onProgress(res, file);
        });
      };
      const startUpload = (file, formData, options) => {
        const { statusKey, uploadMethod } = props;
        file[statusKey] = "loading";
        if (isFunction(uploadMethod)) {
          uploadMethod(file, formData, options);
        } else {
          upload(file, formData, options);
        }
      };
      function getImageInfo(img) {
        return new Promise((resolve, reject) => {
          uni.getImageInfo({
            src: img,
            success: (res) => {
              resolve(res);
            },
            fail: (error) => {
              reject(error);
            }
          });
        });
      }
      function initFile(file, currentIndex) {
        const { statusKey } = props;
        const initState = {
          uid: context.id++,
          // 仅h5支持 name
          name: file.name || "",
          thumb: file.thumb || "",
          [statusKey]: "pending",
          size: file.size || 0,
          url: file.path,
          percent: 0
        };
        if (typeof currentIndex === "number") {
          uploadFiles.value.splice(currentIndex, 1, initState);
        } else {
          uploadFiles.value.push(initState);
        }
        if (props.autoUpload) {
          startUploadFiles();
        }
      }
      function startUploadFiles() {
        const { buildFormData, formData = {}, statusKey } = props;
        const { action, name, header = {}, accept, successStatus } = props;
        const statusCode = isDef(successStatus) ? successStatus : 200;
        for (const uploadFile of uploadFiles.value) {
          if (uploadFile[statusKey] == "pending") {
            if (buildFormData) {
              buildFormData({
                file: uploadFile,
                formData,
                resolve: (formData2) => {
                  formData2 && startUpload(uploadFile, formData2, {
                    onSuccess: handleSuccess,
                    onError: handleError,
                    onProgress: handleProgress,
                    action,
                    header,
                    name,
                    fileName: name,
                    fileType: accept,
                    statusCode
                  });
                }
              });
            } else {
              startUpload(uploadFile, formData, {
                onSuccess: handleSuccess,
                onError: handleError,
                onProgress: handleProgress,
                action,
                header,
                name,
                fileName: name,
                fileType: accept,
                statusCode
              });
            }
          }
        }
      }
      function handleError(err, file, formData) {
        const { statusKey } = props;
        const index = uploadFiles.value.findIndex((item) => item.uid === file.uid);
        if (index > -1) {
          uploadFiles.value[index][statusKey] = "fail";
          uploadFiles.value[index].error = err.message;
          uploadFiles.value[index].response = err;
          emit("fail", { error: err, file, formData });
          emitFileList();
        }
      }
      function handleSuccess(res, file, formData) {
        const { statusKey } = props;
        const index = uploadFiles.value.findIndex((item) => item.uid === file.uid);
        if (index > -1) {
          uploadFiles.value[index][statusKey] = "success";
          uploadFiles.value[index].response = res.data;
          emit("change", { fileList: uploadFiles.value });
          emit("success", { file, fileList: uploadFiles.value, formData });
          emitFileList();
        }
      }
      function handleProgress(res, file) {
        const index = uploadFiles.value.findIndex((item) => item.uid === file.uid);
        if (index > -1) {
          uploadFiles.value[index].percent = res.progress;
          emit("progress", { response: res, file });
        }
      }
      function onChooseFile(currentIndex) {
        const { multiple, maxSize, accept, sizeType, limit, sourceType, compressed, maxDuration, camera, beforeUpload } = props;
        chooseFile({
          multiple,
          sizeType,
          sourceType,
          maxCount: limit ? limit - uploadFiles.value.length : 9,
          accept,
          compressed,
          maxDuration,
          camera
        }).then((res) => {
          let files = res;
          if (!multiple) {
            files = files.slice(0, 1);
          }
          const mapFiles = async (files2) => {
            for (let index = 0; index < files2.length; index++) {
              const file = files2[index];
              if (file.type === "image" && !file.size) {
                const imageInfo = await getImageInfo(file.path);
                file.size = imageInfo.width * imageInfo.height;
              }
              Number(file.size) <= maxSize ? initFile(file, currentIndex) : emit("oversize", { file });
            }
          };
          if (beforeUpload) {
            beforeUpload({
              files,
              fileList: uploadFiles.value,
              resolve: (isPass) => {
                isPass && mapFiles(files);
              }
            });
          } else {
            mapFiles(files);
          }
        }).catch((error) => {
          emit("chooseerror", { error });
        });
      }
      function handleChoose(index) {
        if (props.disabled)
          return;
        const { beforeChoose } = props;
        if (beforeChoose) {
          beforeChoose({
            fileList: uploadFiles.value,
            resolve: (isPass) => {
              isPass && onChooseFile(index);
            }
          });
        } else {
          onChooseFile(index);
        }
      }
      function handleRemove(file) {
        uploadFiles.value.splice(
          uploadFiles.value.findIndex((item) => item.uid === file.uid),
          1
        );
        emit("change", {
          fileList: uploadFiles.value
        });
        emit("remove", { file });
        emitFileList();
      }
      function removeFile(index) {
        const { beforeRemove } = props;
        const intIndex = index;
        const file = uploadFiles.value[intIndex];
        if (beforeRemove) {
          beforeRemove({
            file,
            index: intIndex,
            fileList: uploadFiles.value,
            resolve: (isPass) => {
              isPass && handleRemove(file);
            }
          });
        } else {
          handleRemove(file);
        }
      }
      function handlePreviewFile(file) {
        uni.openDocument({
          filePath: file.url,
          showMenu: true
        });
      }
      function handlePreviewImage(index, lists) {
        const { onPreviewFail } = props;
        uni.previewImage({
          urls: lists,
          current: lists[index],
          fail() {
            if (onPreviewFail) {
              onPreviewFail({
                index,
                imgList: lists
              });
            } else {
              uni.showToast({ title: "预览图片失败", icon: "none" });
            }
          }
        });
      }
      function handlePreviewVieo(index, lists) {
        var _a;
        (_a = videoPreview.value) == null ? void 0 : _a.open({ url: lists[index].url, poster: lists[index].thumb, title: lists[index].name });
      }
      function onPreviewImage(file) {
        const { beforePreview, reupload } = props;
        const fileList = deepClone(uploadFiles.value);
        const index = fileList.findIndex((item) => item.url === file.url);
        const imgList = fileList.filter((file2) => isImage(file2)).map((file2) => file2.url);
        const imgIndex = imgList.findIndex((item) => item === file.url);
        if (reupload) {
          handleChoose(index);
        } else {
          if (beforePreview) {
            beforePreview({
              file,
              index,
              fileList,
              imgList,
              resolve: (isPass) => {
                isPass && handlePreviewImage(imgIndex, imgList);
              }
            });
          } else {
            handlePreviewImage(imgIndex, imgList);
          }
        }
      }
      function onPreviewVideo(file) {
        const { beforePreview, reupload } = props;
        const fileList = deepClone(uploadFiles.value);
        const index = fileList.findIndex((item) => item.url === file.url);
        const videoList = fileList.filter((file2) => isVideo(file2));
        const videoIndex = videoList.findIndex((item) => item.url === file.url);
        if (reupload) {
          handleChoose(index);
        } else {
          if (beforePreview) {
            beforePreview({
              file,
              index,
              imgList: [],
              fileList,
              resolve: (isPass) => {
                isPass && handlePreviewVieo(videoIndex, videoList);
              }
            });
          } else {
            handlePreviewVieo(videoIndex, videoList);
          }
        }
      }
      function onPreviewFile(file) {
        const { beforePreview, reupload } = props;
        const fileList = deepClone(uploadFiles.value);
        const index = fileList.findIndex((item) => item.url === file.url);
        if (reupload) {
          handleChoose(index);
        } else {
          if (beforePreview) {
            beforePreview({
              file,
              index,
              imgList: [],
              fileList,
              resolve: (isPass) => {
                isPass && handlePreviewFile(file);
              }
            });
          } else {
            handlePreviewFile(file);
          }
        }
      }
      function isVideo(file) {
        return file.name && isVideoUrl(file.name) || isVideoUrl(file.url);
      }
      function isImage(file) {
        return file.name && isImageUrl(file.name) || isImageUrl(file.url);
      }
      const __returned__ = { props, emit, translate, uploadFiles, showUpload, videoPreview, emitFileList, upload, startUpload, getImageInfo, initFile, startUploadFiles, handleError, handleSuccess, handleProgress, onChooseFile, handleChoose, handleRemove, removeFile, handlePreviewFile, handlePreviewImage, handlePreviewVieo, onPreviewImage, onPreviewVideo, onPreviewFile, isVideo, isImage, wdIcon: __easycom_0$5, wdVideoPreview, wdLoading: __easycom_0$3 };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$K(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      vue.Fragment,
      null,
      [
        vue.createElementVNode(
          "view",
          {
            class: vue.normalizeClass(["wd-upload", _ctx.customClass]),
            style: vue.normalizeStyle(_ctx.customStyle)
          },
          [
            vue.createCommentVNode(" 预览列表 "),
            (vue.openBlock(true), vue.createElementBlock(
              vue.Fragment,
              null,
              vue.renderList($setup.uploadFiles, (file, index) => {
                return vue.openBlock(), vue.createElementBlock(
                  "view",
                  {
                    class: vue.normalizeClass(["wd-upload__preview", _ctx.customPreviewClass]),
                    key: index
                  },
                  [
                    vue.createCommentVNode(" 成功时展示图片 "),
                    vue.createElementVNode("view", { class: "wd-upload__status-content" }, [
                      $setup.isImage(file) ? (vue.openBlock(), vue.createElementBlock("image", {
                        key: 0,
                        src: file.url,
                        mode: _ctx.imageMode,
                        class: "wd-upload__picture",
                        onClick: ($event) => $setup.onPreviewImage(file)
                      }, null, 8, ["src", "mode", "onClick"])) : $setup.isVideo(file) ? (vue.openBlock(), vue.createElementBlock(
                        vue.Fragment,
                        { key: 1 },
                        [
                          file.thumb ? (vue.openBlock(), vue.createElementBlock("view", {
                            key: 0,
                            class: "wd-upload__video",
                            onClick: ($event) => $setup.onPreviewVideo(file)
                          }, [
                            vue.createElementVNode("image", {
                              src: file.thumb,
                              mode: _ctx.imageMode,
                              class: "wd-upload__picture"
                            }, null, 8, ["src", "mode"]),
                            vue.createVNode($setup["wdIcon"], {
                              name: "play-circle-filled",
                              "custom-class": "wd-upload__video-paly"
                            })
                          ], 8, ["onClick"])) : (vue.openBlock(), vue.createElementBlock("view", {
                            key: 1,
                            class: "wd-upload__video",
                            onClick: ($event) => $setup.onPreviewVideo(file)
                          }, [
                            vue.createVNode($setup["wdIcon"], {
                              "custom-class": "wd-upload__video-icon",
                              name: "video"
                            })
                          ], 8, ["onClick"]))
                        ],
                        64
                        /* STABLE_FRAGMENT */
                      )) : (vue.openBlock(), vue.createElementBlock("view", {
                        key: 2,
                        class: "wd-upload__file",
                        onClick: ($event) => $setup.onPreviewFile(file)
                      }, [
                        vue.createVNode($setup["wdIcon"], {
                          name: "file",
                          "custom-class": "wd-upload__file-icon"
                        }),
                        vue.createElementVNode(
                          "view",
                          { class: "wd-upload__file-name" },
                          vue.toDisplayString(file.name || file.url),
                          1
                          /* TEXT */
                        )
                      ], 8, ["onClick"]))
                    ]),
                    file[$setup.props.statusKey] !== "success" ? (vue.openBlock(), vue.createElementBlock("view", {
                      key: 0,
                      class: "wd-upload__mask wd-upload__status-content"
                    }, [
                      vue.createCommentVNode(" loading时展示loading图标和进度 "),
                      file[$setup.props.statusKey] === "loading" ? (vue.openBlock(), vue.createElementBlock("view", {
                        key: 0,
                        class: "wd-upload__status-content"
                      }, [
                        vue.createVNode($setup["wdLoading"], {
                          type: _ctx.loadingType,
                          size: _ctx.loadingSize,
                          color: _ctx.loadingColor
                        }, null, 8, ["type", "size", "color"]),
                        vue.createElementVNode(
                          "text",
                          { class: "wd-upload__progress-txt" },
                          vue.toDisplayString(file.percent) + "%",
                          1
                          /* TEXT */
                        )
                      ])) : vue.createCommentVNode("v-if", true),
                      vue.createCommentVNode(" 失败时展示失败图标以及失败信息 "),
                      file[$setup.props.statusKey] === "fail" ? (vue.openBlock(), vue.createElementBlock("view", {
                        key: 1,
                        class: "wd-upload__status-content"
                      }, [
                        vue.createVNode($setup["wdIcon"], {
                          name: "close-outline",
                          "custom-class": "wd-upload__icon"
                        }),
                        vue.createElementVNode(
                          "text",
                          { class: "wd-upload__progress-txt" },
                          vue.toDisplayString(file.error || $setup.translate("error")),
                          1
                          /* TEXT */
                        )
                      ])) : vue.createCommentVNode("v-if", true)
                    ])) : vue.createCommentVNode("v-if", true),
                    vue.createCommentVNode(" 上传状态为上传中时不展示移除按钮 "),
                    file[$setup.props.statusKey] !== "loading" && !_ctx.disabled ? (vue.openBlock(), vue.createBlock($setup["wdIcon"], {
                      key: 1,
                      name: "error-fill",
                      "custom-class": "wd-upload__close",
                      onClick: ($event) => $setup.removeFile(index)
                    }, null, 8, ["onClick"])) : vue.createCommentVNode("v-if", true),
                    vue.createCommentVNode(" 自定义预览样式 "),
                    _ctx.$slots["preview-cover"] ? vue.renderSlot(_ctx.$slots, "preview-cover", {
                      key: 2,
                      file,
                      index
                    }, void 0, true) : vue.createCommentVNode("v-if", true)
                  ],
                  2
                  /* CLASS */
                );
              }),
              128
              /* KEYED_FRAGMENT */
            )),
            $setup.showUpload ? (vue.openBlock(), vue.createElementBlock(
              vue.Fragment,
              { key: 0 },
              [
                _ctx.$slots.default ? (vue.openBlock(), vue.createElementBlock(
                  "view",
                  {
                    key: 0,
                    class: vue.normalizeClass(["wd-upload__evoke-slot", _ctx.customEvokeClass]),
                    onClick: $setup.handleChoose
                  },
                  [
                    vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
                  ],
                  2
                  /* CLASS */
                )) : (vue.openBlock(), vue.createElementBlock(
                  vue.Fragment,
                  { key: 1 },
                  [
                    vue.createCommentVNode(" 唤起项 "),
                    vue.createElementVNode(
                      "view",
                      {
                        onClick: $setup.handleChoose,
                        class: vue.normalizeClass(["wd-upload__evoke", _ctx.disabled ? "is-disabled" : "", _ctx.customEvokeClass])
                      },
                      [
                        vue.createCommentVNode(" 唤起项图标 "),
                        vue.createVNode($setup["wdIcon"], {
                          class: "wd-upload__evoke-icon",
                          name: "fill-camera"
                        }),
                        vue.createCommentVNode(" 有限制个数时确认是否展示限制个数 "),
                        _ctx.limit && _ctx.showLimitNum ? (vue.openBlock(), vue.createElementBlock(
                          "view",
                          {
                            key: 0,
                            class: "wd-upload__evoke-num"
                          },
                          "（" + vue.toDisplayString($setup.uploadFiles.length) + "/" + vue.toDisplayString(_ctx.limit) + "）",
                          1
                          /* TEXT */
                        )) : vue.createCommentVNode("v-if", true)
                      ],
                      2
                      /* CLASS */
                    )
                  ],
                  2112
                  /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
                ))
              ],
              64
              /* STABLE_FRAGMENT */
            )) : vue.createCommentVNode("v-if", true)
          ],
          6
          /* CLASS, STYLE */
        ),
        vue.createVNode(
          $setup["wdVideoPreview"],
          { ref: "videoPreview" },
          null,
          512
          /* NEED_PATCH */
        )
      ],
      64
      /* STABLE_FRAGMENT */
    );
  }
  const __easycom_4 = /* @__PURE__ */ _export_sfc(_sfc_main$L, [["render", _sfc_render$K], ["__scopeId", "data-v-d50d9cde"], ["__file", "G:/Code/campus/miniProject/uni_modules/wot-design-uni/components/wd-upload/wd-upload.vue"]]);
  const gapProps = {
    ...baseProps,
    /**
     * 背景颜色
     */
    bgColor: makeStringProp("transparent"),
    /**
     * 是否开启底部安全区
     */
    safeAreaBottom: makeBooleanProp(false),
    /**
     * 高度
     */
    height: makeNumericProp(15)
  };
  const __default__$h = {
    name: "wd-gap",
    options: {
      addGlobalClass: true,
      virtualHost: true,
      styleIsolation: "shared"
    }
  };
  const _sfc_main$K = /* @__PURE__ */ vue.defineComponent({
    ...__default__$h,
    props: gapProps,
    setup(__props, { expose: __expose }) {
      __expose();
      const props = __props;
      const rootStyle = vue.computed(() => {
        const rootStyle2 = {};
        if (isDef(props.bgColor)) {
          rootStyle2["background"] = props.bgColor;
        }
        if (isDef(props.height)) {
          rootStyle2["height"] = addUnit(props.height);
        }
        return `${objToStyle(rootStyle2)};${props.customStyle}`;
      });
      const __returned__ = { props, rootStyle };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$J(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: vue.normalizeClass(`wd-gap ${_ctx.safeAreaBottom ? "wd-gap--safe" : ""} ${_ctx.customClass}`),
        style: vue.normalizeStyle($setup.rootStyle)
      },
      null,
      6
      /* CLASS, STYLE */
    );
  }
  const __easycom_2 = /* @__PURE__ */ _export_sfc(_sfc_main$K, [["render", _sfc_render$J], ["__scopeId", "data-v-2f8e8392"], ["__file", "G:/Code/campus/miniProject/uni_modules/wot-design-uni/components/wd-gap/wd-gap.vue"]]);
  const actionSheetProps = {
    ...baseProps,
    /**
     * header 头部样式
     * @default ''
     * @type {string}
     */
    customHeaderClass: makeStringProp(""),
    /**
     * 设置菜单显示隐藏
     * @default false
     * @type {boolean}
     */
    modelValue: { ...makeBooleanProp(false), ...makeRequiredProp(Boolean) },
    /**
     * 菜单选项
     * @default []
     * @type {Action[]}
     */
    actions: makeArrayProp(),
    /**
     * 自定义面板项,可以为字符串数组，也可以为对象数组，如果为二维数组，则为多行展示
     * @default []
     * @type {Array<Panel | Panel[]>}
     */
    panels: makeArrayProp(),
    /**
     * 标题
     * @type {string}
     */
    title: String,
    /**
     * 取消按钮文案
     * @type {string}
     */
    cancelText: String,
    /**
     * 点击选项后是否关闭菜单
     * @default true
     * @type {boolean}
     */
    closeOnClickAction: makeBooleanProp(true),
    /**
     * 点击遮罩是否关闭
     * @default true
     * @type {boolean}
     */
    closeOnClickModal: makeBooleanProp(true),
    /**
     * 弹框动画持续时间
     * @default 200
     * @type {number}
     */
    duration: makeNumberProp(200),
    /**
     * 菜单层级
     * @default 10
     * @type {number}
     */
    zIndex: makeNumberProp(10),
    /**
     * 弹层内容懒渲染，触发展示时才渲染内容
     * @default true
     * @type {boolean}
     */
    lazyRender: makeBooleanProp(true),
    /**
     * 弹出面板是否设置底部安全距离（iphone X 类型的机型）
     * @default true
     * @type {boolean}
     */
    safeAreaInsetBottom: makeBooleanProp(true)
  };
  const __default__$g = {
    name: "wd-action-sheet",
    options: {
      addGlobalClass: true,
      virtualHost: true,
      styleIsolation: "shared"
    }
  };
  const _sfc_main$J = /* @__PURE__ */ vue.defineComponent({
    ...__default__$g,
    props: actionSheetProps,
    emits: ["select", "click-modal", "cancel", "closed", "close", "open", "opened", "update:modelValue"],
    setup(__props, { expose: __expose, emit: __emit }) {
      __expose();
      const props = __props;
      const emit = __emit;
      const formatPanels = vue.ref([]);
      const showPopup = vue.ref(false);
      vue.watch(() => props.panels, computedValue, { deep: true, immediate: true });
      vue.watch(
        () => props.modelValue,
        (newValue) => {
          showPopup.value = newValue;
        },
        { deep: true, immediate: true }
      );
      function isPanelArray() {
        return props.panels.length && !isArray(props.panels[0]);
      }
      function computedValue() {
        formatPanels.value = isPanelArray() ? [props.panels] : props.panels;
      }
      function select(rowIndex, type, colIndex) {
        if (type === "action") {
          if (props.actions[rowIndex].disabled || props.actions[rowIndex].loading) {
            return;
          }
          emit("select", {
            item: props.actions[rowIndex],
            index: rowIndex
          });
        } else if (isPanelArray()) {
          emit("select", {
            item: props.panels[Number(colIndex)],
            index: colIndex
          });
        } else {
          emit("select", {
            item: props.panels[rowIndex][Number(colIndex)],
            rowIndex,
            colIndex
          });
        }
        if (props.closeOnClickAction) {
          close();
        }
      }
      function handleClickModal() {
        emit("click-modal");
      }
      function handleCancel() {
        emit("cancel");
        close();
      }
      function close() {
        emit("update:modelValue", false);
        emit("close");
      }
      function handleOpen() {
        emit("open");
      }
      function handleOpened() {
        emit("opened");
      }
      function handleClosed() {
        emit("closed");
      }
      const __returned__ = { props, emit, formatPanels, showPopup, isPanelArray, computedValue, select, handleClickModal, handleCancel, close, handleOpen, handleOpened, handleClosed, wdPopup, wdIcon: __easycom_0$5, wdLoading: __easycom_0$3 };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$I(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", null, [
      vue.createVNode($setup["wdPopup"], {
        "custom-class": "wd-action-sheet__popup",
        "custom-style": `${_ctx.actions && _ctx.actions.length || _ctx.panels && _ctx.panels.length ? "background: transparent;" : ""}`,
        modelValue: $setup.showPopup,
        "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $setup.showPopup = $event),
        duration: _ctx.duration,
        position: "bottom",
        "close-on-click-modal": _ctx.closeOnClickModal,
        "safe-area-inset-bottom": _ctx.safeAreaInsetBottom,
        "lazy-render": _ctx.lazyRender,
        onEnter: $setup.handleOpen,
        onClose: $setup.close,
        onAfterEnter: $setup.handleOpened,
        onAfterLeave: $setup.handleClosed,
        onClickModal: $setup.handleClickModal,
        "z-index": _ctx.zIndex
      }, {
        default: vue.withCtx(() => [
          vue.createElementVNode(
            "view",
            {
              class: vue.normalizeClass(`wd-action-sheet ${_ctx.customClass}`),
              style: vue.normalizeStyle(`${_ctx.actions && _ctx.actions.length || _ctx.panels && _ctx.panels.length ? "margin: 0 10px calc(var(--window-bottom) + 10px) 10px; border-radius: 16px;" : "margin-bottom: var(--window-bottom);"} ${_ctx.customStyle}`)
            },
            [
              _ctx.title ? (vue.openBlock(), vue.createElementBlock(
                "view",
                {
                  key: 0,
                  class: vue.normalizeClass(`wd-action-sheet__header ${_ctx.customHeaderClass}`)
                },
                [
                  vue.createTextVNode(
                    vue.toDisplayString(_ctx.title) + " ",
                    1
                    /* TEXT */
                  ),
                  vue.createVNode($setup["wdIcon"], {
                    "custom-class": "wd-action-sheet__close",
                    name: "add",
                    onClick: $setup.close
                  })
                ],
                2
                /* CLASS */
              )) : vue.createCommentVNode("v-if", true),
              _ctx.actions && _ctx.actions.length ? (vue.openBlock(), vue.createElementBlock("view", {
                key: 1,
                class: "wd-action-sheet__actions"
              }, [
                (vue.openBlock(true), vue.createElementBlock(
                  vue.Fragment,
                  null,
                  vue.renderList(_ctx.actions, (action, rowIndex) => {
                    return vue.openBlock(), vue.createElementBlock("button", {
                      key: rowIndex,
                      class: vue.normalizeClass(`wd-action-sheet__action ${action.disabled ? "wd-action-sheet__action--disabled" : ""}  ${action.loading ? "wd-action-sheet__action--loading" : ""}`),
                      style: vue.normalizeStyle(`color: ${action.color}`),
                      onClick: ($event) => $setup.select(rowIndex, "action")
                    }, [
                      action.loading ? (vue.openBlock(), vue.createBlock($setup["wdLoading"], {
                        key: 0,
                        "custom-class": "`wd-action-sheet__action-loading"
                      })) : (vue.openBlock(), vue.createElementBlock(
                        "view",
                        {
                          key: 1,
                          class: "wd-action-sheet__name"
                        },
                        vue.toDisplayString(action.name),
                        1
                        /* TEXT */
                      )),
                      !action.loading && action.subname ? (vue.openBlock(), vue.createElementBlock(
                        "view",
                        {
                          key: 2,
                          class: "wd-action-sheet__subname"
                        },
                        vue.toDisplayString(action.subname),
                        1
                        /* TEXT */
                      )) : vue.createCommentVNode("v-if", true)
                    ], 14, ["onClick"]);
                  }),
                  128
                  /* KEYED_FRAGMENT */
                ))
              ])) : vue.createCommentVNode("v-if", true),
              $setup.formatPanels && $setup.formatPanels.length ? (vue.openBlock(), vue.createElementBlock("view", { key: 2 }, [
                (vue.openBlock(true), vue.createElementBlock(
                  vue.Fragment,
                  null,
                  vue.renderList($setup.formatPanels, (panel, rowIndex) => {
                    return vue.openBlock(), vue.createElementBlock("view", {
                      key: rowIndex,
                      class: "wd-action-sheet__panels"
                    }, [
                      vue.createElementVNode("view", { class: "wd-action-sheet__panels-content" }, [
                        (vue.openBlock(true), vue.createElementBlock(
                          vue.Fragment,
                          null,
                          vue.renderList(panel, (col, colIndex) => {
                            return vue.openBlock(), vue.createElementBlock("view", {
                              key: colIndex,
                              class: "wd-action-sheet__panel",
                              onClick: ($event) => $setup.select(rowIndex, "panels", colIndex)
                            }, [
                              vue.createElementVNode("image", {
                                class: "wd-action-sheet__panel-img",
                                src: col.iconUrl
                              }, null, 8, ["src"]),
                              vue.createElementVNode(
                                "view",
                                { class: "wd-action-sheet__panel-title" },
                                vue.toDisplayString(col.title),
                                1
                                /* TEXT */
                              )
                            ], 8, ["onClick"]);
                          }),
                          128
                          /* KEYED_FRAGMENT */
                        ))
                      ])
                    ]);
                  }),
                  128
                  /* KEYED_FRAGMENT */
                ))
              ])) : vue.createCommentVNode("v-if", true),
              vue.renderSlot(_ctx.$slots, "default", {}, void 0, true),
              _ctx.cancelText ? (vue.openBlock(), vue.createElementBlock(
                "button",
                {
                  key: 3,
                  class: "wd-action-sheet__cancel",
                  onClick: $setup.handleCancel
                },
                vue.toDisplayString(_ctx.cancelText),
                1
                /* TEXT */
              )) : vue.createCommentVNode("v-if", true)
            ],
            6
            /* CLASS, STYLE */
          )
        ]),
        _: 3
        /* FORWARDED */
      }, 8, ["custom-style", "modelValue", "duration", "close-on-click-modal", "safe-area-inset-bottom", "lazy-render", "z-index"])
    ]);
  }
  const wdActionSheet = /* @__PURE__ */ _export_sfc(_sfc_main$J, [["render", _sfc_render$I], ["__scopeId", "data-v-03619ba9"], ["__file", "G:/Code/campus/miniProject/uni_modules/wot-design-uni/components/wd-action-sheet/wd-action-sheet.vue"]]);
  var lodash = { exports: {} };
  /**
   * @license
   * Lodash <https://lodash.com/>
   * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   */
  lodash.exports;
  (function(module, exports) {
    (function() {
      var undefined$1;
      var VERSION = "4.17.21";
      var LARGE_ARRAY_SIZE = 200;
      var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", FUNC_ERROR_TEXT = "Expected a function", INVALID_TEMPL_VAR_ERROR_TEXT = "Invalid `variable` option passed into `_.template`";
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var MAX_MEMOIZE_SIZE = 500;
      var PLACEHOLDER = "__lodash_placeholder__";
      var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
      var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
      var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
      var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...";
      var HOT_COUNT = 800, HOT_SPAN = 16;
      var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
      var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 17976931348623157e292, NAN = 0 / 0;
      var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
      var wrapFlags = [
        ["ary", WRAP_ARY_FLAG],
        ["bind", WRAP_BIND_FLAG],
        ["bindKey", WRAP_BIND_KEY_FLAG],
        ["curry", WRAP_CURRY_FLAG],
        ["curryRight", WRAP_CURRY_RIGHT_FLAG],
        ["flip", WRAP_FLIP_FLAG],
        ["partial", WRAP_PARTIAL_FLAG],
        ["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
        ["rearg", WRAP_REARG_FLAG]
      ];
      var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", domExcTag = "[object DOMException]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", promiseTag = "[object Promise]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]", weakSetTag = "[object WeakSet]";
      var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
      var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
      var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
      var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
      var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
      var reTrimStart = /^\s+/;
      var reWhitespace = /\s/;
      var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
      var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
      var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
      var reEscapeChar = /\\(\\)?/g;
      var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
      var reFlags = /\w*$/;
      var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
      var reIsBinary = /^0b[01]+$/i;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var reIsOctal = /^0o[0-7]+$/i;
      var reIsUint = /^(?:0|[1-9]\d*)$/;
      var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
      var reNoMatch = /($^)/;
      var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
      var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
      var rsApos = "['’]", rsAstral = "[" + rsAstralRange + "]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d";
      var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
      var reApos = RegExp(rsApos, "g");
      var reComboMark = RegExp(rsCombo, "g");
      var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
      var reUnicodeWord = RegExp([
        rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
        rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
        rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
        rsUpper + "+" + rsOptContrUpper,
        rsOrdUpper,
        rsOrdLower,
        rsDigits,
        rsEmoji
      ].join("|"), "g");
      var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
      var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
      var contextProps = [
        "Array",
        "Buffer",
        "DataView",
        "Date",
        "Error",
        "Float32Array",
        "Float64Array",
        "Function",
        "Int8Array",
        "Int16Array",
        "Int32Array",
        "Map",
        "Math",
        "Object",
        "Promise",
        "RegExp",
        "Set",
        "String",
        "Symbol",
        "TypeError",
        "Uint8Array",
        "Uint8ClampedArray",
        "Uint16Array",
        "Uint32Array",
        "WeakMap",
        "_",
        "clearTimeout",
        "isFinite",
        "parseInt",
        "setTimeout"
      ];
      var templateCounter = -1;
      var typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
      var cloneableTags = {};
      cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
      cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
      var deburredLetters = {
        // Latin-1 Supplement block.
        "À": "A",
        "Á": "A",
        "Â": "A",
        "Ã": "A",
        "Ä": "A",
        "Å": "A",
        "à": "a",
        "á": "a",
        "â": "a",
        "ã": "a",
        "ä": "a",
        "å": "a",
        "Ç": "C",
        "ç": "c",
        "Ð": "D",
        "ð": "d",
        "È": "E",
        "É": "E",
        "Ê": "E",
        "Ë": "E",
        "è": "e",
        "é": "e",
        "ê": "e",
        "ë": "e",
        "Ì": "I",
        "Í": "I",
        "Î": "I",
        "Ï": "I",
        "ì": "i",
        "í": "i",
        "î": "i",
        "ï": "i",
        "Ñ": "N",
        "ñ": "n",
        "Ò": "O",
        "Ó": "O",
        "Ô": "O",
        "Õ": "O",
        "Ö": "O",
        "Ø": "O",
        "ò": "o",
        "ó": "o",
        "ô": "o",
        "õ": "o",
        "ö": "o",
        "ø": "o",
        "Ù": "U",
        "Ú": "U",
        "Û": "U",
        "Ü": "U",
        "ù": "u",
        "ú": "u",
        "û": "u",
        "ü": "u",
        "Ý": "Y",
        "ý": "y",
        "ÿ": "y",
        "Æ": "Ae",
        "æ": "ae",
        "Þ": "Th",
        "þ": "th",
        "ß": "ss",
        // Latin Extended-A block.
        "Ā": "A",
        "Ă": "A",
        "Ą": "A",
        "ā": "a",
        "ă": "a",
        "ą": "a",
        "Ć": "C",
        "Ĉ": "C",
        "Ċ": "C",
        "Č": "C",
        "ć": "c",
        "ĉ": "c",
        "ċ": "c",
        "č": "c",
        "Ď": "D",
        "Đ": "D",
        "ď": "d",
        "đ": "d",
        "Ē": "E",
        "Ĕ": "E",
        "Ė": "E",
        "Ę": "E",
        "Ě": "E",
        "ē": "e",
        "ĕ": "e",
        "ė": "e",
        "ę": "e",
        "ě": "e",
        "Ĝ": "G",
        "Ğ": "G",
        "Ġ": "G",
        "Ģ": "G",
        "ĝ": "g",
        "ğ": "g",
        "ġ": "g",
        "ģ": "g",
        "Ĥ": "H",
        "Ħ": "H",
        "ĥ": "h",
        "ħ": "h",
        "Ĩ": "I",
        "Ī": "I",
        "Ĭ": "I",
        "Į": "I",
        "İ": "I",
        "ĩ": "i",
        "ī": "i",
        "ĭ": "i",
        "į": "i",
        "ı": "i",
        "Ĵ": "J",
        "ĵ": "j",
        "Ķ": "K",
        "ķ": "k",
        "ĸ": "k",
        "Ĺ": "L",
        "Ļ": "L",
        "Ľ": "L",
        "Ŀ": "L",
        "Ł": "L",
        "ĺ": "l",
        "ļ": "l",
        "ľ": "l",
        "ŀ": "l",
        "ł": "l",
        "Ń": "N",
        "Ņ": "N",
        "Ň": "N",
        "Ŋ": "N",
        "ń": "n",
        "ņ": "n",
        "ň": "n",
        "ŋ": "n",
        "Ō": "O",
        "Ŏ": "O",
        "Ő": "O",
        "ō": "o",
        "ŏ": "o",
        "ő": "o",
        "Ŕ": "R",
        "Ŗ": "R",
        "Ř": "R",
        "ŕ": "r",
        "ŗ": "r",
        "ř": "r",
        "Ś": "S",
        "Ŝ": "S",
        "Ş": "S",
        "Š": "S",
        "ś": "s",
        "ŝ": "s",
        "ş": "s",
        "š": "s",
        "Ţ": "T",
        "Ť": "T",
        "Ŧ": "T",
        "ţ": "t",
        "ť": "t",
        "ŧ": "t",
        "Ũ": "U",
        "Ū": "U",
        "Ŭ": "U",
        "Ů": "U",
        "Ű": "U",
        "Ų": "U",
        "ũ": "u",
        "ū": "u",
        "ŭ": "u",
        "ů": "u",
        "ű": "u",
        "ų": "u",
        "Ŵ": "W",
        "ŵ": "w",
        "Ŷ": "Y",
        "ŷ": "y",
        "Ÿ": "Y",
        "Ź": "Z",
        "Ż": "Z",
        "Ž": "Z",
        "ź": "z",
        "ż": "z",
        "ž": "z",
        "Ĳ": "IJ",
        "ĳ": "ij",
        "Œ": "Oe",
        "œ": "oe",
        "ŉ": "'n",
        "ſ": "s"
      };
      var htmlEscapes = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#39;"
      };
      var htmlUnescapes = {
        "&amp;": "&",
        "&lt;": "<",
        "&gt;": ">",
        "&quot;": '"',
        "&#39;": "'"
      };
      var stringEscapes = {
        "\\": "\\",
        "'": "'",
        "\n": "n",
        "\r": "r",
        "\u2028": "u2028",
        "\u2029": "u2029"
      };
      var freeParseFloat = parseFloat, freeParseInt = parseInt;
      var freeGlobal = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root = freeGlobal || freeSelf || Function("return this")();
      var freeExports = exports && !exports.nodeType && exports;
      var freeModule = freeExports && true && module && !module.nodeType && module;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var freeProcess = moduleExports && freeGlobal.process;
      var nodeUtil = function() {
        try {
          var types = freeModule && freeModule.require && freeModule.require("util").types;
          if (types) {
            return types;
          }
          return freeProcess && freeProcess.binding && freeProcess.binding("util");
        } catch (e) {
        }
      }();
      var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
      function apply(func, thisArg, args) {
        switch (args.length) {
          case 0:
            return func.call(thisArg);
          case 1:
            return func.call(thisArg, args[0]);
          case 2:
            return func.call(thisArg, args[0], args[1]);
          case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
      }
      function arrayAggregator(array, setter, iteratee, accumulator) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          var value = array[index];
          setter(accumulator, value, iteratee(value), array);
        }
        return accumulator;
      }
      function arrayEach(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (iteratee(array[index], index, array) === false) {
            break;
          }
        }
        return array;
      }
      function arrayEachRight(array, iteratee) {
        var length = array == null ? 0 : array.length;
        while (length--) {
          if (iteratee(array[length], length, array) === false) {
            break;
          }
        }
        return array;
      }
      function arrayEvery(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (!predicate(array[index], index, array)) {
            return false;
          }
        }
        return true;
      }
      function arrayFilter(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
        while (++index < length) {
          var value = array[index];
          if (predicate(value, index, array)) {
            result[resIndex++] = value;
          }
        }
        return result;
      }
      function arrayIncludes(array, value) {
        var length = array == null ? 0 : array.length;
        return !!length && baseIndexOf(array, value, 0) > -1;
      }
      function arrayIncludesWith(array, value, comparator) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (comparator(value, array[index])) {
            return true;
          }
        }
        return false;
      }
      function arrayMap(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length, result = Array(length);
        while (++index < length) {
          result[index] = iteratee(array[index], index, array);
        }
        return result;
      }
      function arrayPush(array, values) {
        var index = -1, length = values.length, offset = array.length;
        while (++index < length) {
          array[offset + index] = values[index];
        }
        return array;
      }
      function arrayReduce(array, iteratee, accumulator, initAccum) {
        var index = -1, length = array == null ? 0 : array.length;
        if (initAccum && length) {
          accumulator = array[++index];
        }
        while (++index < length) {
          accumulator = iteratee(accumulator, array[index], index, array);
        }
        return accumulator;
      }
      function arrayReduceRight(array, iteratee, accumulator, initAccum) {
        var length = array == null ? 0 : array.length;
        if (initAccum && length) {
          accumulator = array[--length];
        }
        while (length--) {
          accumulator = iteratee(accumulator, array[length], length, array);
        }
        return accumulator;
      }
      function arraySome(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (predicate(array[index], index, array)) {
            return true;
          }
        }
        return false;
      }
      var asciiSize = baseProperty("length");
      function asciiToArray(string) {
        return string.split("");
      }
      function asciiWords(string) {
        return string.match(reAsciiWord) || [];
      }
      function baseFindKey(collection, predicate, eachFunc) {
        var result;
        eachFunc(collection, function(value, key, collection2) {
          if (predicate(value, key, collection2)) {
            result = key;
            return false;
          }
        });
        return result;
      }
      function baseFindIndex(array, predicate, fromIndex, fromRight) {
        var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
        while (fromRight ? index-- : ++index < length) {
          if (predicate(array[index], index, array)) {
            return index;
          }
        }
        return -1;
      }
      function baseIndexOf(array, value, fromIndex) {
        return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
      }
      function baseIndexOfWith(array, value, fromIndex, comparator) {
        var index = fromIndex - 1, length = array.length;
        while (++index < length) {
          if (comparator(array[index], value)) {
            return index;
          }
        }
        return -1;
      }
      function baseIsNaN(value) {
        return value !== value;
      }
      function baseMean(array, iteratee) {
        var length = array == null ? 0 : array.length;
        return length ? baseSum(array, iteratee) / length : NAN;
      }
      function baseProperty(key) {
        return function(object) {
          return object == null ? undefined$1 : object[key];
        };
      }
      function basePropertyOf(object) {
        return function(key) {
          return object == null ? undefined$1 : object[key];
        };
      }
      function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
        eachFunc(collection, function(value, index, collection2) {
          accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection2);
        });
        return accumulator;
      }
      function baseSortBy(array, comparer) {
        var length = array.length;
        array.sort(comparer);
        while (length--) {
          array[length] = array[length].value;
        }
        return array;
      }
      function baseSum(array, iteratee) {
        var result, index = -1, length = array.length;
        while (++index < length) {
          var current = iteratee(array[index]);
          if (current !== undefined$1) {
            result = result === undefined$1 ? current : result + current;
          }
        }
        return result;
      }
      function baseTimes(n, iteratee) {
        var index = -1, result = Array(n);
        while (++index < n) {
          result[index] = iteratee(index);
        }
        return result;
      }
      function baseToPairs(object, props) {
        return arrayMap(props, function(key) {
          return [key, object[key]];
        });
      }
      function baseTrim(string) {
        return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
      }
      function baseUnary(func) {
        return function(value) {
          return func(value);
        };
      }
      function baseValues(object, props) {
        return arrayMap(props, function(key) {
          return object[key];
        });
      }
      function cacheHas(cache, key) {
        return cache.has(key);
      }
      function charsStartIndex(strSymbols, chrSymbols) {
        var index = -1, length = strSymbols.length;
        while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
        }
        return index;
      }
      function charsEndIndex(strSymbols, chrSymbols) {
        var index = strSymbols.length;
        while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
        }
        return index;
      }
      function countHolders(array, placeholder) {
        var length = array.length, result = 0;
        while (length--) {
          if (array[length] === placeholder) {
            ++result;
          }
        }
        return result;
      }
      var deburrLetter = basePropertyOf(deburredLetters);
      var escapeHtmlChar = basePropertyOf(htmlEscapes);
      function escapeStringChar(chr) {
        return "\\" + stringEscapes[chr];
      }
      function getValue(object, key) {
        return object == null ? undefined$1 : object[key];
      }
      function hasUnicode(string) {
        return reHasUnicode.test(string);
      }
      function hasUnicodeWord(string) {
        return reHasUnicodeWord.test(string);
      }
      function iteratorToArray(iterator) {
        var data, result = [];
        while (!(data = iterator.next()).done) {
          result.push(data.value);
        }
        return result;
      }
      function mapToArray(map) {
        var index = -1, result = Array(map.size);
        map.forEach(function(value, key) {
          result[++index] = [key, value];
        });
        return result;
      }
      function overArg(func, transform) {
        return function(arg) {
          return func(transform(arg));
        };
      }
      function replaceHolders(array, placeholder) {
        var index = -1, length = array.length, resIndex = 0, result = [];
        while (++index < length) {
          var value = array[index];
          if (value === placeholder || value === PLACEHOLDER) {
            array[index] = PLACEHOLDER;
            result[resIndex++] = index;
          }
        }
        return result;
      }
      function setToArray(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function(value) {
          result[++index] = value;
        });
        return result;
      }
      function setToPairs(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function(value) {
          result[++index] = [value, value];
        });
        return result;
      }
      function strictIndexOf(array, value, fromIndex) {
        var index = fromIndex - 1, length = array.length;
        while (++index < length) {
          if (array[index] === value) {
            return index;
          }
        }
        return -1;
      }
      function strictLastIndexOf(array, value, fromIndex) {
        var index = fromIndex + 1;
        while (index--) {
          if (array[index] === value) {
            return index;
          }
        }
        return index;
      }
      function stringSize(string) {
        return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
      }
      function stringToArray(string) {
        return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
      }
      function trimmedEndIndex(string) {
        var index = string.length;
        while (index-- && reWhitespace.test(string.charAt(index))) {
        }
        return index;
      }
      var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
      function unicodeSize(string) {
        var result = reUnicode.lastIndex = 0;
        while (reUnicode.test(string)) {
          ++result;
        }
        return result;
      }
      function unicodeToArray(string) {
        return string.match(reUnicode) || [];
      }
      function unicodeWords(string) {
        return string.match(reUnicodeWord) || [];
      }
      var runInContext = function runInContext2(context2) {
        context2 = context2 == null ? root : _.defaults(root.Object(), context2, _.pick(root, contextProps));
        var Array2 = context2.Array, Date2 = context2.Date, Error2 = context2.Error, Function2 = context2.Function, Math2 = context2.Math, Object2 = context2.Object, RegExp2 = context2.RegExp, String2 = context2.String, TypeError2 = context2.TypeError;
        var arrayProto = Array2.prototype, funcProto = Function2.prototype, objectProto = Object2.prototype;
        var coreJsData = context2["__core-js_shared__"];
        var funcToString = funcProto.toString;
        var hasOwnProperty = objectProto.hasOwnProperty;
        var idCounter = 0;
        var maskSrcKey = function() {
          var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
          return uid ? "Symbol(src)_1." + uid : "";
        }();
        var nativeObjectToString = objectProto.toString;
        var objectCtorString = funcToString.call(Object2);
        var oldDash = root._;
        var reIsNative = RegExp2(
          "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
        );
        var Buffer2 = moduleExports ? context2.Buffer : undefined$1, Symbol2 = context2.Symbol, Uint8Array2 = context2.Uint8Array, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : undefined$1, getPrototype = overArg(Object2.getPrototypeOf, Object2), objectCreate = Object2.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : undefined$1, symIterator = Symbol2 ? Symbol2.iterator : undefined$1, symToStringTag = Symbol2 ? Symbol2.toStringTag : undefined$1;
        var defineProperty = function() {
          try {
            var func = getNative(Object2, "defineProperty");
            func({}, "", {});
            return func;
          } catch (e) {
          }
        }();
        var ctxClearTimeout = context2.clearTimeout !== root.clearTimeout && context2.clearTimeout, ctxNow = Date2 && Date2.now !== root.Date.now && Date2.now, ctxSetTimeout = context2.setTimeout !== root.setTimeout && context2.setTimeout;
        var nativeCeil = Math2.ceil, nativeFloor = Math2.floor, nativeGetSymbols = Object2.getOwnPropertySymbols, nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : undefined$1, nativeIsFinite = context2.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object2.keys, Object2), nativeMax = Math2.max, nativeMin = Math2.min, nativeNow = Date2.now, nativeParseInt = context2.parseInt, nativeRandom = Math2.random, nativeReverse = arrayProto.reverse;
        var DataView = getNative(context2, "DataView"), Map2 = getNative(context2, "Map"), Promise2 = getNative(context2, "Promise"), Set2 = getNative(context2, "Set"), WeakMap = getNative(context2, "WeakMap"), nativeCreate = getNative(Object2, "create");
        var metaMap = WeakMap && new WeakMap();
        var realNames = {};
        var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map2), promiseCtorString = toSource(Promise2), setCtorString = toSource(Set2), weakMapCtorString = toSource(WeakMap);
        var symbolProto = Symbol2 ? Symbol2.prototype : undefined$1, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined$1, symbolToString = symbolProto ? symbolProto.toString : undefined$1;
        function lodash2(value) {
          if (isObjectLike(value) && !isArray2(value) && !(value instanceof LazyWrapper)) {
            if (value instanceof LodashWrapper) {
              return value;
            }
            if (hasOwnProperty.call(value, "__wrapped__")) {
              return wrapperClone(value);
            }
          }
          return new LodashWrapper(value);
        }
        var baseCreate = /* @__PURE__ */ function() {
          function object() {
          }
          return function(proto) {
            if (!isObject(proto)) {
              return {};
            }
            if (objectCreate) {
              return objectCreate(proto);
            }
            object.prototype = proto;
            var result2 = new object();
            object.prototype = undefined$1;
            return result2;
          };
        }();
        function baseLodash() {
        }
        function LodashWrapper(value, chainAll) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__chain__ = !!chainAll;
          this.__index__ = 0;
          this.__values__ = undefined$1;
        }
        lodash2.templateSettings = {
          /**
           * Used to detect `data` property values to be HTML-escaped.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          "escape": reEscape,
          /**
           * Used to detect code to be evaluated.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          "evaluate": reEvaluate,
          /**
           * Used to detect `data` property values to inject.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          "interpolate": reInterpolate,
          /**
           * Used to reference the data object in the template text.
           *
           * @memberOf _.templateSettings
           * @type {string}
           */
          "variable": "",
          /**
           * Used to import variables into the compiled template.
           *
           * @memberOf _.templateSettings
           * @type {Object}
           */
          "imports": {
            /**
             * A reference to the `lodash` function.
             *
             * @memberOf _.templateSettings.imports
             * @type {Function}
             */
            "_": lodash2
          }
        };
        lodash2.prototype = baseLodash.prototype;
        lodash2.prototype.constructor = lodash2;
        LodashWrapper.prototype = baseCreate(baseLodash.prototype);
        LodashWrapper.prototype.constructor = LodashWrapper;
        function LazyWrapper(value) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__dir__ = 1;
          this.__filtered__ = false;
          this.__iteratees__ = [];
          this.__takeCount__ = MAX_ARRAY_LENGTH;
          this.__views__ = [];
        }
        function lazyClone() {
          var result2 = new LazyWrapper(this.__wrapped__);
          result2.__actions__ = copyArray(this.__actions__);
          result2.__dir__ = this.__dir__;
          result2.__filtered__ = this.__filtered__;
          result2.__iteratees__ = copyArray(this.__iteratees__);
          result2.__takeCount__ = this.__takeCount__;
          result2.__views__ = copyArray(this.__views__);
          return result2;
        }
        function lazyReverse() {
          if (this.__filtered__) {
            var result2 = new LazyWrapper(this);
            result2.__dir__ = -1;
            result2.__filtered__ = true;
          } else {
            result2 = this.clone();
            result2.__dir__ *= -1;
          }
          return result2;
        }
        function lazyValue() {
          var array = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray2(array), isRight = dir < 0, arrLength = isArr ? array.length : 0, view = getView(0, arrLength, this.__views__), start = view.start, end = view.end, length = end - start, index = isRight ? end : start - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
          if (!isArr || !isRight && arrLength == length && takeCount == length) {
            return baseWrapperValue(array, this.__actions__);
          }
          var result2 = [];
          outer:
            while (length-- && resIndex < takeCount) {
              index += dir;
              var iterIndex = -1, value = array[index];
              while (++iterIndex < iterLength) {
                var data = iteratees[iterIndex], iteratee2 = data.iteratee, type = data.type, computed = iteratee2(value);
                if (type == LAZY_MAP_FLAG) {
                  value = computed;
                } else if (!computed) {
                  if (type == LAZY_FILTER_FLAG) {
                    continue outer;
                  } else {
                    break outer;
                  }
                }
              }
              result2[resIndex++] = value;
            }
          return result2;
        }
        LazyWrapper.prototype = baseCreate(baseLodash.prototype);
        LazyWrapper.prototype.constructor = LazyWrapper;
        function Hash(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function hashClear() {
          this.__data__ = nativeCreate ? nativeCreate(null) : {};
          this.size = 0;
        }
        function hashDelete(key) {
          var result2 = this.has(key) && delete this.__data__[key];
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function hashGet(key) {
          var data = this.__data__;
          if (nativeCreate) {
            var result2 = data[key];
            return result2 === HASH_UNDEFINED ? undefined$1 : result2;
          }
          return hasOwnProperty.call(data, key) ? data[key] : undefined$1;
        }
        function hashHas(key) {
          var data = this.__data__;
          return nativeCreate ? data[key] !== undefined$1 : hasOwnProperty.call(data, key);
        }
        function hashSet(key, value) {
          var data = this.__data__;
          this.size += this.has(key) ? 0 : 1;
          data[key] = nativeCreate && value === undefined$1 ? HASH_UNDEFINED : value;
          return this;
        }
        Hash.prototype.clear = hashClear;
        Hash.prototype["delete"] = hashDelete;
        Hash.prototype.get = hashGet;
        Hash.prototype.has = hashHas;
        Hash.prototype.set = hashSet;
        function ListCache(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function listCacheClear() {
          this.__data__ = [];
          this.size = 0;
        }
        function listCacheDelete(key) {
          var data = this.__data__, index = assocIndexOf(data, key);
          if (index < 0) {
            return false;
          }
          var lastIndex = data.length - 1;
          if (index == lastIndex) {
            data.pop();
          } else {
            splice.call(data, index, 1);
          }
          --this.size;
          return true;
        }
        function listCacheGet(key) {
          var data = this.__data__, index = assocIndexOf(data, key);
          return index < 0 ? undefined$1 : data[index][1];
        }
        function listCacheHas(key) {
          return assocIndexOf(this.__data__, key) > -1;
        }
        function listCacheSet(key, value) {
          var data = this.__data__, index = assocIndexOf(data, key);
          if (index < 0) {
            ++this.size;
            data.push([key, value]);
          } else {
            data[index][1] = value;
          }
          return this;
        }
        ListCache.prototype.clear = listCacheClear;
        ListCache.prototype["delete"] = listCacheDelete;
        ListCache.prototype.get = listCacheGet;
        ListCache.prototype.has = listCacheHas;
        ListCache.prototype.set = listCacheSet;
        function MapCache(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function mapCacheClear() {
          this.size = 0;
          this.__data__ = {
            "hash": new Hash(),
            "map": new (Map2 || ListCache)(),
            "string": new Hash()
          };
        }
        function mapCacheDelete(key) {
          var result2 = getMapData(this, key)["delete"](key);
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function mapCacheGet(key) {
          return getMapData(this, key).get(key);
        }
        function mapCacheHas(key) {
          return getMapData(this, key).has(key);
        }
        function mapCacheSet(key, value) {
          var data = getMapData(this, key), size2 = data.size;
          data.set(key, value);
          this.size += data.size == size2 ? 0 : 1;
          return this;
        }
        MapCache.prototype.clear = mapCacheClear;
        MapCache.prototype["delete"] = mapCacheDelete;
        MapCache.prototype.get = mapCacheGet;
        MapCache.prototype.has = mapCacheHas;
        MapCache.prototype.set = mapCacheSet;
        function SetCache(values2) {
          var index = -1, length = values2 == null ? 0 : values2.length;
          this.__data__ = new MapCache();
          while (++index < length) {
            this.add(values2[index]);
          }
        }
        function setCacheAdd(value) {
          this.__data__.set(value, HASH_UNDEFINED);
          return this;
        }
        function setCacheHas(value) {
          return this.__data__.has(value);
        }
        SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
        SetCache.prototype.has = setCacheHas;
        function Stack(entries) {
          var data = this.__data__ = new ListCache(entries);
          this.size = data.size;
        }
        function stackClear() {
          this.__data__ = new ListCache();
          this.size = 0;
        }
        function stackDelete(key) {
          var data = this.__data__, result2 = data["delete"](key);
          this.size = data.size;
          return result2;
        }
        function stackGet(key) {
          return this.__data__.get(key);
        }
        function stackHas(key) {
          return this.__data__.has(key);
        }
        function stackSet(key, value) {
          var data = this.__data__;
          if (data instanceof ListCache) {
            var pairs = data.__data__;
            if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
              pairs.push([key, value]);
              this.size = ++data.size;
              return this;
            }
            data = this.__data__ = new MapCache(pairs);
          }
          data.set(key, value);
          this.size = data.size;
          return this;
        }
        Stack.prototype.clear = stackClear;
        Stack.prototype["delete"] = stackDelete;
        Stack.prototype.get = stackGet;
        Stack.prototype.has = stackHas;
        Stack.prototype.set = stackSet;
        function arrayLikeKeys(value, inherited) {
          var isArr = isArray2(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result2 = skipIndexes ? baseTimes(value.length, String2) : [], length = result2.length;
          for (var key in value) {
            if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
            (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
            isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
            isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
            isIndex(key, length)))) {
              result2.push(key);
            }
          }
          return result2;
        }
        function arraySample(array) {
          var length = array.length;
          return length ? array[baseRandom(0, length - 1)] : undefined$1;
        }
        function arraySampleSize(array, n) {
          return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
        }
        function arrayShuffle(array) {
          return shuffleSelf(copyArray(array));
        }
        function assignMergeValue(object, key, value) {
          if (value !== undefined$1 && !eq(object[key], value) || value === undefined$1 && !(key in object)) {
            baseAssignValue(object, key, value);
          }
        }
        function assignValue(object, key, value) {
          var objValue = object[key];
          if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined$1 && !(key in object)) {
            baseAssignValue(object, key, value);
          }
        }
        function assocIndexOf(array, key) {
          var length = array.length;
          while (length--) {
            if (eq(array[length][0], key)) {
              return length;
            }
          }
          return -1;
        }
        function baseAggregator(collection, setter, iteratee2, accumulator) {
          baseEach(collection, function(value, key, collection2) {
            setter(accumulator, value, iteratee2(value), collection2);
          });
          return accumulator;
        }
        function baseAssign(object, source) {
          return object && copyObject(source, keys(source), object);
        }
        function baseAssignIn(object, source) {
          return object && copyObject(source, keysIn(source), object);
        }
        function baseAssignValue(object, key, value) {
          if (key == "__proto__" && defineProperty) {
            defineProperty(object, key, {
              "configurable": true,
              "enumerable": true,
              "value": value,
              "writable": true
            });
          } else {
            object[key] = value;
          }
        }
        function baseAt(object, paths) {
          var index = -1, length = paths.length, result2 = Array2(length), skip = object == null;
          while (++index < length) {
            result2[index] = skip ? undefined$1 : get(object, paths[index]);
          }
          return result2;
        }
        function baseClamp(number, lower, upper) {
          if (number === number) {
            if (upper !== undefined$1) {
              number = number <= upper ? number : upper;
            }
            if (lower !== undefined$1) {
              number = number >= lower ? number : lower;
            }
          }
          return number;
        }
        function baseClone(value, bitmask, customizer, key, object, stack) {
          var result2, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
          if (customizer) {
            result2 = object ? customizer(value, key, object, stack) : customizer(value);
          }
          if (result2 !== undefined$1) {
            return result2;
          }
          if (!isObject(value)) {
            return value;
          }
          var isArr = isArray2(value);
          if (isArr) {
            result2 = initCloneArray(value);
            if (!isDeep) {
              return copyArray(value, result2);
            }
          } else {
            var tag2 = getTag(value), isFunc = tag2 == funcTag || tag2 == genTag;
            if (isBuffer(value)) {
              return cloneBuffer(value, isDeep);
            }
            if (tag2 == objectTag || tag2 == argsTag || isFunc && !object) {
              result2 = isFlat || isFunc ? {} : initCloneObject(value);
              if (!isDeep) {
                return isFlat ? copySymbolsIn(value, baseAssignIn(result2, value)) : copySymbols(value, baseAssign(result2, value));
              }
            } else {
              if (!cloneableTags[tag2]) {
                return object ? value : {};
              }
              result2 = initCloneByTag(value, tag2, isDeep);
            }
          }
          stack || (stack = new Stack());
          var stacked = stack.get(value);
          if (stacked) {
            return stacked;
          }
          stack.set(value, result2);
          if (isSet(value)) {
            value.forEach(function(subValue) {
              result2.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
            });
          } else if (isMap(value)) {
            value.forEach(function(subValue, key2) {
              result2.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
            });
          }
          var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
          var props = isArr ? undefined$1 : keysFunc(value);
          arrayEach(props || value, function(subValue, key2) {
            if (props) {
              key2 = subValue;
              subValue = value[key2];
            }
            assignValue(result2, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
          });
          return result2;
        }
        function baseConforms(source) {
          var props = keys(source);
          return function(object) {
            return baseConformsTo(object, source, props);
          };
        }
        function baseConformsTo(object, source, props) {
          var length = props.length;
          if (object == null) {
            return !length;
          }
          object = Object2(object);
          while (length--) {
            var key = props[length], predicate = source[key], value = object[key];
            if (value === undefined$1 && !(key in object) || !predicate(value)) {
              return false;
            }
          }
          return true;
        }
        function baseDelay(func, wait, args) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return setTimeout2(function() {
            func.apply(undefined$1, args);
          }, wait);
        }
        function baseDifference(array, values2, iteratee2, comparator) {
          var index = -1, includes2 = arrayIncludes, isCommon = true, length = array.length, result2 = [], valuesLength = values2.length;
          if (!length) {
            return result2;
          }
          if (iteratee2) {
            values2 = arrayMap(values2, baseUnary(iteratee2));
          }
          if (comparator) {
            includes2 = arrayIncludesWith;
            isCommon = false;
          } else if (values2.length >= LARGE_ARRAY_SIZE) {
            includes2 = cacheHas;
            isCommon = false;
            values2 = new SetCache(values2);
          }
          outer:
            while (++index < length) {
              var value = array[index], computed = iteratee2 == null ? value : iteratee2(value);
              value = comparator || value !== 0 ? value : 0;
              if (isCommon && computed === computed) {
                var valuesIndex = valuesLength;
                while (valuesIndex--) {
                  if (values2[valuesIndex] === computed) {
                    continue outer;
                  }
                }
                result2.push(value);
              } else if (!includes2(values2, computed, comparator)) {
                result2.push(value);
              }
            }
          return result2;
        }
        var baseEach = createBaseEach(baseForOwn);
        var baseEachRight = createBaseEach(baseForOwnRight, true);
        function baseEvery(collection, predicate) {
          var result2 = true;
          baseEach(collection, function(value, index, collection2) {
            result2 = !!predicate(value, index, collection2);
            return result2;
          });
          return result2;
        }
        function baseExtremum(array, iteratee2, comparator) {
          var index = -1, length = array.length;
          while (++index < length) {
            var value = array[index], current = iteratee2(value);
            if (current != null && (computed === undefined$1 ? current === current && !isSymbol(current) : comparator(current, computed))) {
              var computed = current, result2 = value;
            }
          }
          return result2;
        }
        function baseFill(array, value, start, end) {
          var length = array.length;
          start = toInteger(start);
          if (start < 0) {
            start = -start > length ? 0 : length + start;
          }
          end = end === undefined$1 || end > length ? length : toInteger(end);
          if (end < 0) {
            end += length;
          }
          end = start > end ? 0 : toLength(end);
          while (start < end) {
            array[start++] = value;
          }
          return array;
        }
        function baseFilter(collection, predicate) {
          var result2 = [];
          baseEach(collection, function(value, index, collection2) {
            if (predicate(value, index, collection2)) {
              result2.push(value);
            }
          });
          return result2;
        }
        function baseFlatten(array, depth, predicate, isStrict, result2) {
          var index = -1, length = array.length;
          predicate || (predicate = isFlattenable);
          result2 || (result2 = []);
          while (++index < length) {
            var value = array[index];
            if (depth > 0 && predicate(value)) {
              if (depth > 1) {
                baseFlatten(value, depth - 1, predicate, isStrict, result2);
              } else {
                arrayPush(result2, value);
              }
            } else if (!isStrict) {
              result2[result2.length] = value;
            }
          }
          return result2;
        }
        var baseFor = createBaseFor();
        var baseForRight = createBaseFor(true);
        function baseForOwn(object, iteratee2) {
          return object && baseFor(object, iteratee2, keys);
        }
        function baseForOwnRight(object, iteratee2) {
          return object && baseForRight(object, iteratee2, keys);
        }
        function baseFunctions(object, props) {
          return arrayFilter(props, function(key) {
            return isFunction2(object[key]);
          });
        }
        function baseGet(object, path) {
          path = castPath(path, object);
          var index = 0, length = path.length;
          while (object != null && index < length) {
            object = object[toKey(path[index++])];
          }
          return index && index == length ? object : undefined$1;
        }
        function baseGetAllKeys(object, keysFunc, symbolsFunc) {
          var result2 = keysFunc(object);
          return isArray2(object) ? result2 : arrayPush(result2, symbolsFunc(object));
        }
        function baseGetTag(value) {
          if (value == null) {
            return value === undefined$1 ? undefinedTag : nullTag;
          }
          return symToStringTag && symToStringTag in Object2(value) ? getRawTag(value) : objectToString(value);
        }
        function baseGt(value, other2) {
          return value > other2;
        }
        function baseHas(object, key) {
          return object != null && hasOwnProperty.call(object, key);
        }
        function baseHasIn(object, key) {
          return object != null && key in Object2(object);
        }
        function baseInRange(number, start, end) {
          return number >= nativeMin(start, end) && number < nativeMax(start, end);
        }
        function baseIntersection(arrays, iteratee2, comparator) {
          var includes2 = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array2(othLength), maxLength = Infinity, result2 = [];
          while (othIndex--) {
            var array = arrays[othIndex];
            if (othIndex && iteratee2) {
              array = arrayMap(array, baseUnary(iteratee2));
            }
            maxLength = nativeMin(array.length, maxLength);
            caches[othIndex] = !comparator && (iteratee2 || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined$1;
          }
          array = arrays[0];
          var index = -1, seen = caches[0];
          outer:
            while (++index < length && result2.length < maxLength) {
              var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
              value = comparator || value !== 0 ? value : 0;
              if (!(seen ? cacheHas(seen, computed) : includes2(result2, computed, comparator))) {
                othIndex = othLength;
                while (--othIndex) {
                  var cache = caches[othIndex];
                  if (!(cache ? cacheHas(cache, computed) : includes2(arrays[othIndex], computed, comparator))) {
                    continue outer;
                  }
                }
                if (seen) {
                  seen.push(computed);
                }
                result2.push(value);
              }
            }
          return result2;
        }
        function baseInverter(object, setter, iteratee2, accumulator) {
          baseForOwn(object, function(value, key, object2) {
            setter(accumulator, iteratee2(value), key, object2);
          });
          return accumulator;
        }
        function baseInvoke(object, path, args) {
          path = castPath(path, object);
          object = parent(object, path);
          var func = object == null ? object : object[toKey(last(path))];
          return func == null ? undefined$1 : apply(func, object, args);
        }
        function baseIsArguments(value) {
          return isObjectLike(value) && baseGetTag(value) == argsTag;
        }
        function baseIsArrayBuffer(value) {
          return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
        }
        function baseIsDate(value) {
          return isObjectLike(value) && baseGetTag(value) == dateTag;
        }
        function baseIsEqual(value, other2, bitmask, customizer, stack) {
          if (value === other2) {
            return true;
          }
          if (value == null || other2 == null || !isObjectLike(value) && !isObjectLike(other2)) {
            return value !== value && other2 !== other2;
          }
          return baseIsEqualDeep(value, other2, bitmask, customizer, baseIsEqual, stack);
        }
        function baseIsEqualDeep(object, other2, bitmask, customizer, equalFunc, stack) {
          var objIsArr = isArray2(object), othIsArr = isArray2(other2), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other2);
          objTag = objTag == argsTag ? objectTag : objTag;
          othTag = othTag == argsTag ? objectTag : othTag;
          var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
          if (isSameTag && isBuffer(object)) {
            if (!isBuffer(other2)) {
              return false;
            }
            objIsArr = true;
            objIsObj = false;
          }
          if (isSameTag && !objIsObj) {
            stack || (stack = new Stack());
            return objIsArr || isTypedArray(object) ? equalArrays(object, other2, bitmask, customizer, equalFunc, stack) : equalByTag(object, other2, objTag, bitmask, customizer, equalFunc, stack);
          }
          if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
            var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other2, "__wrapped__");
            if (objIsWrapped || othIsWrapped) {
              var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other2.value() : other2;
              stack || (stack = new Stack());
              return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
            }
          }
          if (!isSameTag) {
            return false;
          }
          stack || (stack = new Stack());
          return equalObjects(object, other2, bitmask, customizer, equalFunc, stack);
        }
        function baseIsMap(value) {
          return isObjectLike(value) && getTag(value) == mapTag;
        }
        function baseIsMatch(object, source, matchData, customizer) {
          var index = matchData.length, length = index, noCustomizer = !customizer;
          if (object == null) {
            return !length;
          }
          object = Object2(object);
          while (index--) {
            var data = matchData[index];
            if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
              return false;
            }
          }
          while (++index < length) {
            data = matchData[index];
            var key = data[0], objValue = object[key], srcValue = data[1];
            if (noCustomizer && data[2]) {
              if (objValue === undefined$1 && !(key in object)) {
                return false;
              }
            } else {
              var stack = new Stack();
              if (customizer) {
                var result2 = customizer(objValue, srcValue, key, object, source, stack);
              }
              if (!(result2 === undefined$1 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result2)) {
                return false;
              }
            }
          }
          return true;
        }
        function baseIsNative(value) {
          if (!isObject(value) || isMasked(value)) {
            return false;
          }
          var pattern = isFunction2(value) ? reIsNative : reIsHostCtor;
          return pattern.test(toSource(value));
        }
        function baseIsRegExp(value) {
          return isObjectLike(value) && baseGetTag(value) == regexpTag;
        }
        function baseIsSet(value) {
          return isObjectLike(value) && getTag(value) == setTag;
        }
        function baseIsTypedArray(value) {
          return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
        }
        function baseIteratee(value) {
          if (typeof value == "function") {
            return value;
          }
          if (value == null) {
            return identity;
          }
          if (typeof value == "object") {
            return isArray2(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
          }
          return property(value);
        }
        function baseKeys(object) {
          if (!isPrototype(object)) {
            return nativeKeys(object);
          }
          var result2 = [];
          for (var key in Object2(object)) {
            if (hasOwnProperty.call(object, key) && key != "constructor") {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseKeysIn(object) {
          if (!isObject(object)) {
            return nativeKeysIn(object);
          }
          var isProto = isPrototype(object), result2 = [];
          for (var key in object) {
            if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseLt(value, other2) {
          return value < other2;
        }
        function baseMap(collection, iteratee2) {
          var index = -1, result2 = isArrayLike(collection) ? Array2(collection.length) : [];
          baseEach(collection, function(value, key, collection2) {
            result2[++index] = iteratee2(value, key, collection2);
          });
          return result2;
        }
        function baseMatches(source) {
          var matchData = getMatchData(source);
          if (matchData.length == 1 && matchData[0][2]) {
            return matchesStrictComparable(matchData[0][0], matchData[0][1]);
          }
          return function(object) {
            return object === source || baseIsMatch(object, source, matchData);
          };
        }
        function baseMatchesProperty(path, srcValue) {
          if (isKey(path) && isStrictComparable(srcValue)) {
            return matchesStrictComparable(toKey(path), srcValue);
          }
          return function(object) {
            var objValue = get(object, path);
            return objValue === undefined$1 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
          };
        }
        function baseMerge(object, source, srcIndex, customizer, stack) {
          if (object === source) {
            return;
          }
          baseFor(source, function(srcValue, key) {
            stack || (stack = new Stack());
            if (isObject(srcValue)) {
              baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
            } else {
              var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : undefined$1;
              if (newValue === undefined$1) {
                newValue = srcValue;
              }
              assignMergeValue(object, key, newValue);
            }
          }, keysIn);
        }
        function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
          var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
          if (stacked) {
            assignMergeValue(object, key, stacked);
            return;
          }
          var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : undefined$1;
          var isCommon = newValue === undefined$1;
          if (isCommon) {
            var isArr = isArray2(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
            newValue = srcValue;
            if (isArr || isBuff || isTyped) {
              if (isArray2(objValue)) {
                newValue = objValue;
              } else if (isArrayLikeObject(objValue)) {
                newValue = copyArray(objValue);
              } else if (isBuff) {
                isCommon = false;
                newValue = cloneBuffer(srcValue, true);
              } else if (isTyped) {
                isCommon = false;
                newValue = cloneTypedArray(srcValue, true);
              } else {
                newValue = [];
              }
            } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
              newValue = objValue;
              if (isArguments(objValue)) {
                newValue = toPlainObject(objValue);
              } else if (!isObject(objValue) || isFunction2(objValue)) {
                newValue = initCloneObject(srcValue);
              }
            } else {
              isCommon = false;
            }
          }
          if (isCommon) {
            stack.set(srcValue, newValue);
            mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
            stack["delete"](srcValue);
          }
          assignMergeValue(object, key, newValue);
        }
        function baseNth(array, n) {
          var length = array.length;
          if (!length) {
            return;
          }
          n += n < 0 ? length : 0;
          return isIndex(n, length) ? array[n] : undefined$1;
        }
        function baseOrderBy(collection, iteratees, orders) {
          if (iteratees.length) {
            iteratees = arrayMap(iteratees, function(iteratee2) {
              if (isArray2(iteratee2)) {
                return function(value) {
                  return baseGet(value, iteratee2.length === 1 ? iteratee2[0] : iteratee2);
                };
              }
              return iteratee2;
            });
          } else {
            iteratees = [identity];
          }
          var index = -1;
          iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
          var result2 = baseMap(collection, function(value, key, collection2) {
            var criteria = arrayMap(iteratees, function(iteratee2) {
              return iteratee2(value);
            });
            return { "criteria": criteria, "index": ++index, "value": value };
          });
          return baseSortBy(result2, function(object, other2) {
            return compareMultiple(object, other2, orders);
          });
        }
        function basePick(object, paths) {
          return basePickBy(object, paths, function(value, path) {
            return hasIn(object, path);
          });
        }
        function basePickBy(object, paths, predicate) {
          var index = -1, length = paths.length, result2 = {};
          while (++index < length) {
            var path = paths[index], value = baseGet(object, path);
            if (predicate(value, path)) {
              baseSet(result2, castPath(path, object), value);
            }
          }
          return result2;
        }
        function basePropertyDeep(path) {
          return function(object) {
            return baseGet(object, path);
          };
        }
        function basePullAll(array, values2, iteratee2, comparator) {
          var indexOf2 = comparator ? baseIndexOfWith : baseIndexOf, index = -1, length = values2.length, seen = array;
          if (array === values2) {
            values2 = copyArray(values2);
          }
          if (iteratee2) {
            seen = arrayMap(array, baseUnary(iteratee2));
          }
          while (++index < length) {
            var fromIndex = 0, value = values2[index], computed = iteratee2 ? iteratee2(value) : value;
            while ((fromIndex = indexOf2(seen, computed, fromIndex, comparator)) > -1) {
              if (seen !== array) {
                splice.call(seen, fromIndex, 1);
              }
              splice.call(array, fromIndex, 1);
            }
          }
          return array;
        }
        function basePullAt(array, indexes) {
          var length = array ? indexes.length : 0, lastIndex = length - 1;
          while (length--) {
            var index = indexes[length];
            if (length == lastIndex || index !== previous) {
              var previous = index;
              if (isIndex(index)) {
                splice.call(array, index, 1);
              } else {
                baseUnset(array, index);
              }
            }
          }
          return array;
        }
        function baseRandom(lower, upper) {
          return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
        }
        function baseRange(start, end, step, fromRight) {
          var index = -1, length = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result2 = Array2(length);
          while (length--) {
            result2[fromRight ? length : ++index] = start;
            start += step;
          }
          return result2;
        }
        function baseRepeat(string, n) {
          var result2 = "";
          if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
            return result2;
          }
          do {
            if (n % 2) {
              result2 += string;
            }
            n = nativeFloor(n / 2);
            if (n) {
              string += string;
            }
          } while (n);
          return result2;
        }
        function baseRest(func, start) {
          return setToString(overRest(func, start, identity), func + "");
        }
        function baseSample(collection) {
          return arraySample(values(collection));
        }
        function baseSampleSize(collection, n) {
          var array = values(collection);
          return shuffleSelf(array, baseClamp(n, 0, array.length));
        }
        function baseSet(object, path, value, customizer) {
          if (!isObject(object)) {
            return object;
          }
          path = castPath(path, object);
          var index = -1, length = path.length, lastIndex = length - 1, nested = object;
          while (nested != null && ++index < length) {
            var key = toKey(path[index]), newValue = value;
            if (key === "__proto__" || key === "constructor" || key === "prototype") {
              return object;
            }
            if (index != lastIndex) {
              var objValue = nested[key];
              newValue = customizer ? customizer(objValue, key, nested) : undefined$1;
              if (newValue === undefined$1) {
                newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
              }
            }
            assignValue(nested, key, newValue);
            nested = nested[key];
          }
          return object;
        }
        var baseSetData = !metaMap ? identity : function(func, data) {
          metaMap.set(func, data);
          return func;
        };
        var baseSetToString = !defineProperty ? identity : function(func, string) {
          return defineProperty(func, "toString", {
            "configurable": true,
            "enumerable": false,
            "value": constant(string),
            "writable": true
          });
        };
        function baseShuffle(collection) {
          return shuffleSelf(values(collection));
        }
        function baseSlice(array, start, end) {
          var index = -1, length = array.length;
          if (start < 0) {
            start = -start > length ? 0 : length + start;
          }
          end = end > length ? length : end;
          if (end < 0) {
            end += length;
          }
          length = start > end ? 0 : end - start >>> 0;
          start >>>= 0;
          var result2 = Array2(length);
          while (++index < length) {
            result2[index] = array[index + start];
          }
          return result2;
        }
        function baseSome(collection, predicate) {
          var result2;
          baseEach(collection, function(value, index, collection2) {
            result2 = predicate(value, index, collection2);
            return !result2;
          });
          return !!result2;
        }
        function baseSortedIndex(array, value, retHighest) {
          var low = 0, high = array == null ? low : array.length;
          if (typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
            while (low < high) {
              var mid = low + high >>> 1, computed = array[mid];
              if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
                low = mid + 1;
              } else {
                high = mid;
              }
            }
            return high;
          }
          return baseSortedIndexBy(array, value, identity, retHighest);
        }
        function baseSortedIndexBy(array, value, iteratee2, retHighest) {
          var low = 0, high = array == null ? 0 : array.length;
          if (high === 0) {
            return 0;
          }
          value = iteratee2(value);
          var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol(value), valIsUndefined = value === undefined$1;
          while (low < high) {
            var mid = nativeFloor((low + high) / 2), computed = iteratee2(array[mid]), othIsDefined = computed !== undefined$1, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol(computed);
            if (valIsNaN) {
              var setLow = retHighest || othIsReflexive;
            } else if (valIsUndefined) {
              setLow = othIsReflexive && (retHighest || othIsDefined);
            } else if (valIsNull) {
              setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
            } else if (valIsSymbol) {
              setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
            } else if (othIsNull || othIsSymbol) {
              setLow = false;
            } else {
              setLow = retHighest ? computed <= value : computed < value;
            }
            if (setLow) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }
          return nativeMin(high, MAX_ARRAY_INDEX);
        }
        function baseSortedUniq(array, iteratee2) {
          var index = -1, length = array.length, resIndex = 0, result2 = [];
          while (++index < length) {
            var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
            if (!index || !eq(computed, seen)) {
              var seen = computed;
              result2[resIndex++] = value === 0 ? 0 : value;
            }
          }
          return result2;
        }
        function baseToNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          return +value;
        }
        function baseToString(value) {
          if (typeof value == "string") {
            return value;
          }
          if (isArray2(value)) {
            return arrayMap(value, baseToString) + "";
          }
          if (isSymbol(value)) {
            return symbolToString ? symbolToString.call(value) : "";
          }
          var result2 = value + "";
          return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
        }
        function baseUniq(array, iteratee2, comparator) {
          var index = -1, includes2 = arrayIncludes, length = array.length, isCommon = true, result2 = [], seen = result2;
          if (comparator) {
            isCommon = false;
            includes2 = arrayIncludesWith;
          } else if (length >= LARGE_ARRAY_SIZE) {
            var set2 = iteratee2 ? null : createSet(array);
            if (set2) {
              return setToArray(set2);
            }
            isCommon = false;
            includes2 = cacheHas;
            seen = new SetCache();
          } else {
            seen = iteratee2 ? [] : result2;
          }
          outer:
            while (++index < length) {
              var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
              value = comparator || value !== 0 ? value : 0;
              if (isCommon && computed === computed) {
                var seenIndex = seen.length;
                while (seenIndex--) {
                  if (seen[seenIndex] === computed) {
                    continue outer;
                  }
                }
                if (iteratee2) {
                  seen.push(computed);
                }
                result2.push(value);
              } else if (!includes2(seen, computed, comparator)) {
                if (seen !== result2) {
                  seen.push(computed);
                }
                result2.push(value);
              }
            }
          return result2;
        }
        function baseUnset(object, path) {
          path = castPath(path, object);
          object = parent(object, path);
          return object == null || delete object[toKey(last(path))];
        }
        function baseUpdate(object, path, updater, customizer) {
          return baseSet(object, path, updater(baseGet(object, path)), customizer);
        }
        function baseWhile(array, predicate, isDrop, fromRight) {
          var length = array.length, index = fromRight ? length : -1;
          while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {
          }
          return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
        }
        function baseWrapperValue(value, actions) {
          var result2 = value;
          if (result2 instanceof LazyWrapper) {
            result2 = result2.value();
          }
          return arrayReduce(actions, function(result3, action) {
            return action.func.apply(action.thisArg, arrayPush([result3], action.args));
          }, result2);
        }
        function baseXor(arrays, iteratee2, comparator) {
          var length = arrays.length;
          if (length < 2) {
            return length ? baseUniq(arrays[0]) : [];
          }
          var index = -1, result2 = Array2(length);
          while (++index < length) {
            var array = arrays[index], othIndex = -1;
            while (++othIndex < length) {
              if (othIndex != index) {
                result2[index] = baseDifference(result2[index] || array, arrays[othIndex], iteratee2, comparator);
              }
            }
          }
          return baseUniq(baseFlatten(result2, 1), iteratee2, comparator);
        }
        function baseZipObject(props, values2, assignFunc) {
          var index = -1, length = props.length, valsLength = values2.length, result2 = {};
          while (++index < length) {
            var value = index < valsLength ? values2[index] : undefined$1;
            assignFunc(result2, props[index], value);
          }
          return result2;
        }
        function castArrayLikeObject(value) {
          return isArrayLikeObject(value) ? value : [];
        }
        function castFunction(value) {
          return typeof value == "function" ? value : identity;
        }
        function castPath(value, object) {
          if (isArray2(value)) {
            return value;
          }
          return isKey(value, object) ? [value] : stringToPath(toString(value));
        }
        var castRest = baseRest;
        function castSlice(array, start, end) {
          var length = array.length;
          end = end === undefined$1 ? length : end;
          return !start && end >= length ? array : baseSlice(array, start, end);
        }
        var clearTimeout2 = ctxClearTimeout || function(id) {
          return root.clearTimeout(id);
        };
        function cloneBuffer(buffer, isDeep) {
          if (isDeep) {
            return buffer.slice();
          }
          var length = buffer.length, result2 = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
          buffer.copy(result2);
          return result2;
        }
        function cloneArrayBuffer(arrayBuffer) {
          var result2 = new arrayBuffer.constructor(arrayBuffer.byteLength);
          new Uint8Array2(result2).set(new Uint8Array2(arrayBuffer));
          return result2;
        }
        function cloneDataView(dataView, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
          return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
        }
        function cloneRegExp(regexp) {
          var result2 = new regexp.constructor(regexp.source, reFlags.exec(regexp));
          result2.lastIndex = regexp.lastIndex;
          return result2;
        }
        function cloneSymbol(symbol) {
          return symbolValueOf ? Object2(symbolValueOf.call(symbol)) : {};
        }
        function cloneTypedArray(typedArray, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
          return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
        }
        function compareAscending(value, other2) {
          if (value !== other2) {
            var valIsDefined = value !== undefined$1, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
            var othIsDefined = other2 !== undefined$1, othIsNull = other2 === null, othIsReflexive = other2 === other2, othIsSymbol = isSymbol(other2);
            if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other2 || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
              return 1;
            }
            if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other2 || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
              return -1;
            }
          }
          return 0;
        }
        function compareMultiple(object, other2, orders) {
          var index = -1, objCriteria = object.criteria, othCriteria = other2.criteria, length = objCriteria.length, ordersLength = orders.length;
          while (++index < length) {
            var result2 = compareAscending(objCriteria[index], othCriteria[index]);
            if (result2) {
              if (index >= ordersLength) {
                return result2;
              }
              var order = orders[index];
              return result2 * (order == "desc" ? -1 : 1);
            }
          }
          return object.index - other2.index;
        }
        function composeArgs(args, partials, holders, isCurried) {
          var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(leftLength + rangeLength), isUncurried = !isCurried;
          while (++leftIndex < leftLength) {
            result2[leftIndex] = partials[leftIndex];
          }
          while (++argsIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[holders[argsIndex]] = args[argsIndex];
            }
          }
          while (rangeLength--) {
            result2[leftIndex++] = args[argsIndex++];
          }
          return result2;
        }
        function composeArgsRight(args, partials, holders, isCurried) {
          var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(rangeLength + rightLength), isUncurried = !isCurried;
          while (++argsIndex < rangeLength) {
            result2[argsIndex] = args[argsIndex];
          }
          var offset = argsIndex;
          while (++rightIndex < rightLength) {
            result2[offset + rightIndex] = partials[rightIndex];
          }
          while (++holdersIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[offset + holders[holdersIndex]] = args[argsIndex++];
            }
          }
          return result2;
        }
        function copyArray(source, array) {
          var index = -1, length = source.length;
          array || (array = Array2(length));
          while (++index < length) {
            array[index] = source[index];
          }
          return array;
        }
        function copyObject(source, props, object, customizer) {
          var isNew = !object;
          object || (object = {});
          var index = -1, length = props.length;
          while (++index < length) {
            var key = props[index];
            var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined$1;
            if (newValue === undefined$1) {
              newValue = source[key];
            }
            if (isNew) {
              baseAssignValue(object, key, newValue);
            } else {
              assignValue(object, key, newValue);
            }
          }
          return object;
        }
        function copySymbols(source, object) {
          return copyObject(source, getSymbols(source), object);
        }
        function copySymbolsIn(source, object) {
          return copyObject(source, getSymbolsIn(source), object);
        }
        function createAggregator(setter, initializer) {
          return function(collection, iteratee2) {
            var func = isArray2(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
            return func(collection, setter, getIteratee(iteratee2, 2), accumulator);
          };
        }
        function createAssigner(assigner) {
          return baseRest(function(object, sources) {
            var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined$1, guard = length > 2 ? sources[2] : undefined$1;
            customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : undefined$1;
            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
              customizer = length < 3 ? undefined$1 : customizer;
              length = 1;
            }
            object = Object2(object);
            while (++index < length) {
              var source = sources[index];
              if (source) {
                assigner(object, source, index, customizer);
              }
            }
            return object;
          });
        }
        function createBaseEach(eachFunc, fromRight) {
          return function(collection, iteratee2) {
            if (collection == null) {
              return collection;
            }
            if (!isArrayLike(collection)) {
              return eachFunc(collection, iteratee2);
            }
            var length = collection.length, index = fromRight ? length : -1, iterable = Object2(collection);
            while (fromRight ? index-- : ++index < length) {
              if (iteratee2(iterable[index], index, iterable) === false) {
                break;
              }
            }
            return collection;
          };
        }
        function createBaseFor(fromRight) {
          return function(object, iteratee2, keysFunc) {
            var index = -1, iterable = Object2(object), props = keysFunc(object), length = props.length;
            while (length--) {
              var key = props[fromRight ? length : ++index];
              if (iteratee2(iterable[key], key, iterable) === false) {
                break;
              }
            }
            return object;
          };
        }
        function createBind(func, bitmask, thisArg) {
          var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
          function wrapper() {
            var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
            return fn.apply(isBind ? thisArg : this, arguments);
          }
          return wrapper;
        }
        function createCaseFirst(methodName) {
          return function(string) {
            string = toString(string);
            var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined$1;
            var chr = strSymbols ? strSymbols[0] : string.charAt(0);
            var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
            return chr[methodName]() + trailing;
          };
        }
        function createCompounder(callback) {
          return function(string) {
            return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
          };
        }
        function createCtor(Ctor) {
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0:
                return new Ctor();
              case 1:
                return new Ctor(args[0]);
              case 2:
                return new Ctor(args[0], args[1]);
              case 3:
                return new Ctor(args[0], args[1], args[2]);
              case 4:
                return new Ctor(args[0], args[1], args[2], args[3]);
              case 5:
                return new Ctor(args[0], args[1], args[2], args[3], args[4]);
              case 6:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
              case 7:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
            }
            var thisBinding = baseCreate(Ctor.prototype), result2 = Ctor.apply(thisBinding, args);
            return isObject(result2) ? result2 : thisBinding;
          };
        }
        function createCurry(func, bitmask, arity) {
          var Ctor = createCtor(func);
          function wrapper() {
            var length = arguments.length, args = Array2(length), index = length, placeholder = getHolder(wrapper);
            while (index--) {
              args[index] = arguments[index];
            }
            var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
            length -= holders.length;
            if (length < arity) {
              return createRecurry(
                func,
                bitmask,
                createHybrid,
                wrapper.placeholder,
                undefined$1,
                args,
                holders,
                undefined$1,
                undefined$1,
                arity - length
              );
            }
            var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
            return apply(fn, this, args);
          }
          return wrapper;
        }
        function createFind(findIndexFunc) {
          return function(collection, predicate, fromIndex) {
            var iterable = Object2(collection);
            if (!isArrayLike(collection)) {
              var iteratee2 = getIteratee(predicate, 3);
              collection = keys(collection);
              predicate = function(key) {
                return iteratee2(iterable[key], key, iterable);
              };
            }
            var index = findIndexFunc(collection, predicate, fromIndex);
            return index > -1 ? iterable[iteratee2 ? collection[index] : index] : undefined$1;
          };
        }
        function createFlow(fromRight) {
          return flatRest(function(funcs) {
            var length = funcs.length, index = length, prereq = LodashWrapper.prototype.thru;
            if (fromRight) {
              funcs.reverse();
            }
            while (index--) {
              var func = funcs[index];
              if (typeof func != "function") {
                throw new TypeError2(FUNC_ERROR_TEXT);
              }
              if (prereq && !wrapper && getFuncName(func) == "wrapper") {
                var wrapper = new LodashWrapper([], true);
              }
            }
            index = wrapper ? index : length;
            while (++index < length) {
              func = funcs[index];
              var funcName = getFuncName(func), data = funcName == "wrapper" ? getData(func) : undefined$1;
              if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
                wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
              } else {
                wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
              }
            }
            return function() {
              var args = arguments, value = args[0];
              if (wrapper && args.length == 1 && isArray2(value)) {
                return wrapper.plant(value).value();
              }
              var index2 = 0, result2 = length ? funcs[index2].apply(this, args) : value;
              while (++index2 < length) {
                result2 = funcs[index2].call(this, result2);
              }
              return result2;
            };
          });
        }
        function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary2, arity) {
          var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined$1 : createCtor(func);
          function wrapper() {
            var length = arguments.length, args = Array2(length), index = length;
            while (index--) {
              args[index] = arguments[index];
            }
            if (isCurried) {
              var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
            }
            if (partials) {
              args = composeArgs(args, partials, holders, isCurried);
            }
            if (partialsRight) {
              args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
            }
            length -= holdersCount;
            if (isCurried && length < arity) {
              var newHolders = replaceHolders(args, placeholder);
              return createRecurry(
                func,
                bitmask,
                createHybrid,
                wrapper.placeholder,
                thisArg,
                args,
                newHolders,
                argPos,
                ary2,
                arity - length
              );
            }
            var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func] : func;
            length = args.length;
            if (argPos) {
              args = reorder(args, argPos);
            } else if (isFlip && length > 1) {
              args.reverse();
            }
            if (isAry && ary2 < length) {
              args.length = ary2;
            }
            if (this && this !== root && this instanceof wrapper) {
              fn = Ctor || createCtor(fn);
            }
            return fn.apply(thisBinding, args);
          }
          return wrapper;
        }
        function createInverter(setter, toIteratee) {
          return function(object, iteratee2) {
            return baseInverter(object, setter, toIteratee(iteratee2), {});
          };
        }
        function createMathOperation(operator, defaultValue) {
          return function(value, other2) {
            var result2;
            if (value === undefined$1 && other2 === undefined$1) {
              return defaultValue;
            }
            if (value !== undefined$1) {
              result2 = value;
            }
            if (other2 !== undefined$1) {
              if (result2 === undefined$1) {
                return other2;
              }
              if (typeof value == "string" || typeof other2 == "string") {
                value = baseToString(value);
                other2 = baseToString(other2);
              } else {
                value = baseToNumber(value);
                other2 = baseToNumber(other2);
              }
              result2 = operator(value, other2);
            }
            return result2;
          };
        }
        function createOver(arrayFunc) {
          return flatRest(function(iteratees) {
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
            return baseRest(function(args) {
              var thisArg = this;
              return arrayFunc(iteratees, function(iteratee2) {
                return apply(iteratee2, thisArg, args);
              });
            });
          });
        }
        function createPadding(length, chars) {
          chars = chars === undefined$1 ? " " : baseToString(chars);
          var charsLength = chars.length;
          if (charsLength < 2) {
            return charsLength ? baseRepeat(chars, length) : chars;
          }
          var result2 = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
          return hasUnicode(chars) ? castSlice(stringToArray(result2), 0, length).join("") : result2.slice(0, length);
        }
        function createPartial(func, bitmask, thisArg, partials) {
          var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
          function wrapper() {
            var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array2(leftLength + argsLength), fn = this && this !== root && this instanceof wrapper ? Ctor : func;
            while (++leftIndex < leftLength) {
              args[leftIndex] = partials[leftIndex];
            }
            while (argsLength--) {
              args[leftIndex++] = arguments[++argsIndex];
            }
            return apply(fn, isBind ? thisArg : this, args);
          }
          return wrapper;
        }
        function createRange(fromRight) {
          return function(start, end, step) {
            if (step && typeof step != "number" && isIterateeCall(start, end, step)) {
              end = step = undefined$1;
            }
            start = toFinite(start);
            if (end === undefined$1) {
              end = start;
              start = 0;
            } else {
              end = toFinite(end);
            }
            step = step === undefined$1 ? start < end ? 1 : -1 : toFinite(step);
            return baseRange(start, end, step, fromRight);
          };
        }
        function createRelationalOperation(operator) {
          return function(value, other2) {
            if (!(typeof value == "string" && typeof other2 == "string")) {
              value = toNumber(value);
              other2 = toNumber(other2);
            }
            return operator(value, other2);
          };
        }
        function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary2, arity) {
          var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined$1, newHoldersRight = isCurry ? undefined$1 : holders, newPartials = isCurry ? partials : undefined$1, newPartialsRight = isCurry ? undefined$1 : partials;
          bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
          bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
          if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
            bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
          }
          var newData = [
            func,
            bitmask,
            thisArg,
            newPartials,
            newHolders,
            newPartialsRight,
            newHoldersRight,
            argPos,
            ary2,
            arity
          ];
          var result2 = wrapFunc.apply(undefined$1, newData);
          if (isLaziable(func)) {
            setData(result2, newData);
          }
          result2.placeholder = placeholder;
          return setWrapToString(result2, func, bitmask);
        }
        function createRound(methodName) {
          var func = Math2[methodName];
          return function(number, precision) {
            number = toNumber(number);
            precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
            if (precision && nativeIsFinite(number)) {
              var pair = (toString(number) + "e").split("e"), value = func(pair[0] + "e" + (+pair[1] + precision));
              pair = (toString(value) + "e").split("e");
              return +(pair[0] + "e" + (+pair[1] - precision));
            }
            return func(number);
          };
        }
        var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop : function(values2) {
          return new Set2(values2);
        };
        function createToPairs(keysFunc) {
          return function(object) {
            var tag2 = getTag(object);
            if (tag2 == mapTag) {
              return mapToArray(object);
            }
            if (tag2 == setTag) {
              return setToPairs(object);
            }
            return baseToPairs(object, keysFunc(object));
          };
        }
        function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary2, arity) {
          var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
          if (!isBindKey && typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          var length = partials ? partials.length : 0;
          if (!length) {
            bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
            partials = holders = undefined$1;
          }
          ary2 = ary2 === undefined$1 ? ary2 : nativeMax(toInteger(ary2), 0);
          arity = arity === undefined$1 ? arity : toInteger(arity);
          length -= holders ? holders.length : 0;
          if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
            var partialsRight = partials, holdersRight = holders;
            partials = holders = undefined$1;
          }
          var data = isBindKey ? undefined$1 : getData(func);
          var newData = [
            func,
            bitmask,
            thisArg,
            partials,
            holders,
            partialsRight,
            holdersRight,
            argPos,
            ary2,
            arity
          ];
          if (data) {
            mergeData(newData, data);
          }
          func = newData[0];
          bitmask = newData[1];
          thisArg = newData[2];
          partials = newData[3];
          holders = newData[4];
          arity = newData[9] = newData[9] === undefined$1 ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
          if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
            bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
          }
          if (!bitmask || bitmask == WRAP_BIND_FLAG) {
            var result2 = createBind(func, bitmask, thisArg);
          } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
            result2 = createCurry(func, bitmask, arity);
          } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
            result2 = createPartial(func, bitmask, thisArg, partials);
          } else {
            result2 = createHybrid.apply(undefined$1, newData);
          }
          var setter = data ? baseSetData : setData;
          return setWrapToString(setter(result2, newData), func, bitmask);
        }
        function customDefaultsAssignIn(objValue, srcValue, key, object) {
          if (objValue === undefined$1 || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {
            return srcValue;
          }
          return objValue;
        }
        function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
          if (isObject(objValue) && isObject(srcValue)) {
            stack.set(srcValue, objValue);
            baseMerge(objValue, srcValue, undefined$1, customDefaultsMerge, stack);
            stack["delete"](srcValue);
          }
          return objValue;
        }
        function customOmitClone(value) {
          return isPlainObject(value) ? undefined$1 : value;
        }
        function equalArrays(array, other2, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other2.length;
          if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
            return false;
          }
          var arrStacked = stack.get(array);
          var othStacked = stack.get(other2);
          if (arrStacked && othStacked) {
            return arrStacked == other2 && othStacked == array;
          }
          var index = -1, result2 = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined$1;
          stack.set(array, other2);
          stack.set(other2, array);
          while (++index < arrLength) {
            var arrValue = array[index], othValue = other2[index];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, arrValue, index, other2, array, stack) : customizer(arrValue, othValue, index, array, other2, stack);
            }
            if (compared !== undefined$1) {
              if (compared) {
                continue;
              }
              result2 = false;
              break;
            }
            if (seen) {
              if (!arraySome(other2, function(othValue2, othIndex) {
                if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
                result2 = false;
                break;
              }
            } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              result2 = false;
              break;
            }
          }
          stack["delete"](array);
          stack["delete"](other2);
          return result2;
        }
        function equalByTag(object, other2, tag2, bitmask, customizer, equalFunc, stack) {
          switch (tag2) {
            case dataViewTag:
              if (object.byteLength != other2.byteLength || object.byteOffset != other2.byteOffset) {
                return false;
              }
              object = object.buffer;
              other2 = other2.buffer;
            case arrayBufferTag:
              if (object.byteLength != other2.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other2))) {
                return false;
              }
              return true;
            case boolTag:
            case dateTag:
            case numberTag:
              return eq(+object, +other2);
            case errorTag:
              return object.name == other2.name && object.message == other2.message;
            case regexpTag:
            case stringTag:
              return object == other2 + "";
            case mapTag:
              var convert = mapToArray;
            case setTag:
              var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
              convert || (convert = setToArray);
              if (object.size != other2.size && !isPartial) {
                return false;
              }
              var stacked = stack.get(object);
              if (stacked) {
                return stacked == other2;
              }
              bitmask |= COMPARE_UNORDERED_FLAG;
              stack.set(object, other2);
              var result2 = equalArrays(convert(object), convert(other2), bitmask, customizer, equalFunc, stack);
              stack["delete"](object);
              return result2;
            case symbolTag:
              if (symbolValueOf) {
                return symbolValueOf.call(object) == symbolValueOf.call(other2);
              }
          }
          return false;
        }
        function equalObjects(object, other2, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other2), othLength = othProps.length;
          if (objLength != othLength && !isPartial) {
            return false;
          }
          var index = objLength;
          while (index--) {
            var key = objProps[index];
            if (!(isPartial ? key in other2 : hasOwnProperty.call(other2, key))) {
              return false;
            }
          }
          var objStacked = stack.get(object);
          var othStacked = stack.get(other2);
          if (objStacked && othStacked) {
            return objStacked == other2 && othStacked == object;
          }
          var result2 = true;
          stack.set(object, other2);
          stack.set(other2, object);
          var skipCtor = isPartial;
          while (++index < objLength) {
            key = objProps[index];
            var objValue = object[key], othValue = other2[key];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, objValue, key, other2, object, stack) : customizer(objValue, othValue, key, object, other2, stack);
            }
            if (!(compared === undefined$1 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
              result2 = false;
              break;
            }
            skipCtor || (skipCtor = key == "constructor");
          }
          if (result2 && !skipCtor) {
            var objCtor = object.constructor, othCtor = other2.constructor;
            if (objCtor != othCtor && ("constructor" in object && "constructor" in other2) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
              result2 = false;
            }
          }
          stack["delete"](object);
          stack["delete"](other2);
          return result2;
        }
        function flatRest(func) {
          return setToString(overRest(func, undefined$1, flatten), func + "");
        }
        function getAllKeys(object) {
          return baseGetAllKeys(object, keys, getSymbols);
        }
        function getAllKeysIn(object) {
          return baseGetAllKeys(object, keysIn, getSymbolsIn);
        }
        var getData = !metaMap ? noop : function(func) {
          return metaMap.get(func);
        };
        function getFuncName(func) {
          var result2 = func.name + "", array = realNames[result2], length = hasOwnProperty.call(realNames, result2) ? array.length : 0;
          while (length--) {
            var data = array[length], otherFunc = data.func;
            if (otherFunc == null || otherFunc == func) {
              return data.name;
            }
          }
          return result2;
        }
        function getHolder(func) {
          var object = hasOwnProperty.call(lodash2, "placeholder") ? lodash2 : func;
          return object.placeholder;
        }
        function getIteratee() {
          var result2 = lodash2.iteratee || iteratee;
          result2 = result2 === iteratee ? baseIteratee : result2;
          return arguments.length ? result2(arguments[0], arguments[1]) : result2;
        }
        function getMapData(map2, key) {
          var data = map2.__data__;
          return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
        }
        function getMatchData(object) {
          var result2 = keys(object), length = result2.length;
          while (length--) {
            var key = result2[length], value = object[key];
            result2[length] = [key, value, isStrictComparable(value)];
          }
          return result2;
        }
        function getNative(object, key) {
          var value = getValue(object, key);
          return baseIsNative(value) ? value : undefined$1;
        }
        function getRawTag(value) {
          var isOwn = hasOwnProperty.call(value, symToStringTag), tag2 = value[symToStringTag];
          try {
            value[symToStringTag] = undefined$1;
            var unmasked = true;
          } catch (e) {
          }
          var result2 = nativeObjectToString.call(value);
          if (unmasked) {
            if (isOwn) {
              value[symToStringTag] = tag2;
            } else {
              delete value[symToStringTag];
            }
          }
          return result2;
        }
        var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
          if (object == null) {
            return [];
          }
          object = Object2(object);
          return arrayFilter(nativeGetSymbols(object), function(symbol) {
            return propertyIsEnumerable.call(object, symbol);
          });
        };
        var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
          var result2 = [];
          while (object) {
            arrayPush(result2, getSymbols(object));
            object = getPrototype(object);
          }
          return result2;
        };
        var getTag = baseGetTag;
        if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
          getTag = function(value) {
            var result2 = baseGetTag(value), Ctor = result2 == objectTag ? value.constructor : undefined$1, ctorString = Ctor ? toSource(Ctor) : "";
            if (ctorString) {
              switch (ctorString) {
                case dataViewCtorString:
                  return dataViewTag;
                case mapCtorString:
                  return mapTag;
                case promiseCtorString:
                  return promiseTag;
                case setCtorString:
                  return setTag;
                case weakMapCtorString:
                  return weakMapTag;
              }
            }
            return result2;
          };
        }
        function getView(start, end, transforms) {
          var index = -1, length = transforms.length;
          while (++index < length) {
            var data = transforms[index], size2 = data.size;
            switch (data.type) {
              case "drop":
                start += size2;
                break;
              case "dropRight":
                end -= size2;
                break;
              case "take":
                end = nativeMin(end, start + size2);
                break;
              case "takeRight":
                start = nativeMax(start, end - size2);
                break;
            }
          }
          return { "start": start, "end": end };
        }
        function getWrapDetails(source) {
          var match = source.match(reWrapDetails);
          return match ? match[1].split(reSplitDetails) : [];
        }
        function hasPath(object, path, hasFunc) {
          path = castPath(path, object);
          var index = -1, length = path.length, result2 = false;
          while (++index < length) {
            var key = toKey(path[index]);
            if (!(result2 = object != null && hasFunc(object, key))) {
              break;
            }
            object = object[key];
          }
          if (result2 || ++index != length) {
            return result2;
          }
          length = object == null ? 0 : object.length;
          return !!length && isLength(length) && isIndex(key, length) && (isArray2(object) || isArguments(object));
        }
        function initCloneArray(array) {
          var length = array.length, result2 = new array.constructor(length);
          if (length && typeof array[0] == "string" && hasOwnProperty.call(array, "index")) {
            result2.index = array.index;
            result2.input = array.input;
          }
          return result2;
        }
        function initCloneObject(object) {
          return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
        }
        function initCloneByTag(object, tag2, isDeep) {
          var Ctor = object.constructor;
          switch (tag2) {
            case arrayBufferTag:
              return cloneArrayBuffer(object);
            case boolTag:
            case dateTag:
              return new Ctor(+object);
            case dataViewTag:
              return cloneDataView(object, isDeep);
            case float32Tag:
            case float64Tag:
            case int8Tag:
            case int16Tag:
            case int32Tag:
            case uint8Tag:
            case uint8ClampedTag:
            case uint16Tag:
            case uint32Tag:
              return cloneTypedArray(object, isDeep);
            case mapTag:
              return new Ctor();
            case numberTag:
            case stringTag:
              return new Ctor(object);
            case regexpTag:
              return cloneRegExp(object);
            case setTag:
              return new Ctor();
            case symbolTag:
              return cloneSymbol(object);
          }
        }
        function insertWrapDetails(source, details) {
          var length = details.length;
          if (!length) {
            return source;
          }
          var lastIndex = length - 1;
          details[lastIndex] = (length > 1 ? "& " : "") + details[lastIndex];
          details = details.join(length > 2 ? ", " : " ");
          return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
        }
        function isFlattenable(value) {
          return isArray2(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
        }
        function isIndex(value, length) {
          var type = typeof value;
          length = length == null ? MAX_SAFE_INTEGER : length;
          return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
        }
        function isIterateeCall(value, index, object) {
          if (!isObject(object)) {
            return false;
          }
          var type = typeof index;
          if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
            return eq(object[index], value);
          }
          return false;
        }
        function isKey(value, object) {
          if (isArray2(value)) {
            return false;
          }
          var type = typeof value;
          if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
            return true;
          }
          return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object2(object);
        }
        function isKeyable(value) {
          var type = typeof value;
          return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
        }
        function isLaziable(func) {
          var funcName = getFuncName(func), other2 = lodash2[funcName];
          if (typeof other2 != "function" || !(funcName in LazyWrapper.prototype)) {
            return false;
          }
          if (func === other2) {
            return true;
          }
          var data = getData(other2);
          return !!data && func === data[0];
        }
        function isMasked(func) {
          return !!maskSrcKey && maskSrcKey in func;
        }
        var isMaskable = coreJsData ? isFunction2 : stubFalse;
        function isPrototype(value) {
          var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
          return value === proto;
        }
        function isStrictComparable(value) {
          return value === value && !isObject(value);
        }
        function matchesStrictComparable(key, srcValue) {
          return function(object) {
            if (object == null) {
              return false;
            }
            return object[key] === srcValue && (srcValue !== undefined$1 || key in Object2(object));
          };
        }
        function memoizeCapped(func) {
          var result2 = memoize(func, function(key) {
            if (cache.size === MAX_MEMOIZE_SIZE) {
              cache.clear();
            }
            return key;
          });
          var cache = result2.cache;
          return result2;
        }
        function mergeData(data, source) {
          var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
          var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
          if (!(isCommon || isCombo)) {
            return data;
          }
          if (srcBitmask & WRAP_BIND_FLAG) {
            data[2] = source[2];
            newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
          }
          var value = source[3];
          if (value) {
            var partials = data[3];
            data[3] = partials ? composeArgs(partials, value, source[4]) : value;
            data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
          }
          value = source[5];
          if (value) {
            partials = data[5];
            data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
            data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
          }
          value = source[7];
          if (value) {
            data[7] = value;
          }
          if (srcBitmask & WRAP_ARY_FLAG) {
            data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
          }
          if (data[9] == null) {
            data[9] = source[9];
          }
          data[0] = source[0];
          data[1] = newBitmask;
          return data;
        }
        function nativeKeysIn(object) {
          var result2 = [];
          if (object != null) {
            for (var key in Object2(object)) {
              result2.push(key);
            }
          }
          return result2;
        }
        function objectToString(value) {
          return nativeObjectToString.call(value);
        }
        function overRest(func, start, transform2) {
          start = nativeMax(start === undefined$1 ? func.length - 1 : start, 0);
          return function() {
            var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array2(length);
            while (++index < length) {
              array[index] = args[start + index];
            }
            index = -1;
            var otherArgs = Array2(start + 1);
            while (++index < start) {
              otherArgs[index] = args[index];
            }
            otherArgs[start] = transform2(array);
            return apply(func, this, otherArgs);
          };
        }
        function parent(object, path) {
          return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
        }
        function reorder(array, indexes) {
          var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array);
          while (length--) {
            var index = indexes[length];
            array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined$1;
          }
          return array;
        }
        function safeGet(object, key) {
          if (key === "constructor" && typeof object[key] === "function") {
            return;
          }
          if (key == "__proto__") {
            return;
          }
          return object[key];
        }
        var setData = shortOut(baseSetData);
        var setTimeout2 = ctxSetTimeout || function(func, wait) {
          return root.setTimeout(func, wait);
        };
        var setToString = shortOut(baseSetToString);
        function setWrapToString(wrapper, reference, bitmask) {
          var source = reference + "";
          return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
        }
        function shortOut(func) {
          var count = 0, lastCalled = 0;
          return function() {
            var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
            lastCalled = stamp;
            if (remaining > 0) {
              if (++count >= HOT_COUNT) {
                return arguments[0];
              }
            } else {
              count = 0;
            }
            return func.apply(undefined$1, arguments);
          };
        }
        function shuffleSelf(array, size2) {
          var index = -1, length = array.length, lastIndex = length - 1;
          size2 = size2 === undefined$1 ? length : size2;
          while (++index < size2) {
            var rand = baseRandom(index, lastIndex), value = array[rand];
            array[rand] = array[index];
            array[index] = value;
          }
          array.length = size2;
          return array;
        }
        var stringToPath = memoizeCapped(function(string) {
          var result2 = [];
          if (string.charCodeAt(0) === 46) {
            result2.push("");
          }
          string.replace(rePropName, function(match, number, quote, subString) {
            result2.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
          });
          return result2;
        });
        function toKey(value) {
          if (typeof value == "string" || isSymbol(value)) {
            return value;
          }
          var result2 = value + "";
          return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
        }
        function toSource(func) {
          if (func != null) {
            try {
              return funcToString.call(func);
            } catch (e) {
            }
            try {
              return func + "";
            } catch (e) {
            }
          }
          return "";
        }
        function updateWrapDetails(details, bitmask) {
          arrayEach(wrapFlags, function(pair) {
            var value = "_." + pair[0];
            if (bitmask & pair[1] && !arrayIncludes(details, value)) {
              details.push(value);
            }
          });
          return details.sort();
        }
        function wrapperClone(wrapper) {
          if (wrapper instanceof LazyWrapper) {
            return wrapper.clone();
          }
          var result2 = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
          result2.__actions__ = copyArray(wrapper.__actions__);
          result2.__index__ = wrapper.__index__;
          result2.__values__ = wrapper.__values__;
          return result2;
        }
        function chunk(array, size2, guard) {
          if (guard ? isIterateeCall(array, size2, guard) : size2 === undefined$1) {
            size2 = 1;
          } else {
            size2 = nativeMax(toInteger(size2), 0);
          }
          var length = array == null ? 0 : array.length;
          if (!length || size2 < 1) {
            return [];
          }
          var index = 0, resIndex = 0, result2 = Array2(nativeCeil(length / size2));
          while (index < length) {
            result2[resIndex++] = baseSlice(array, index, index += size2);
          }
          return result2;
        }
        function compact(array) {
          var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result2 = [];
          while (++index < length) {
            var value = array[index];
            if (value) {
              result2[resIndex++] = value;
            }
          }
          return result2;
        }
        function concat() {
          var length = arguments.length;
          if (!length) {
            return [];
          }
          var args = Array2(length - 1), array = arguments[0], index = length;
          while (index--) {
            args[index - 1] = arguments[index];
          }
          return arrayPush(isArray2(array) ? copyArray(array) : [array], baseFlatten(args, 1));
        }
        var difference = baseRest(function(array, values2) {
          return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true)) : [];
        });
        var differenceBy = baseRest(function(array, values2) {
          var iteratee2 = last(values2);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined$1;
          }
          return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2)) : [];
        });
        var differenceWith = baseRest(function(array, values2) {
          var comparator = last(values2);
          if (isArrayLikeObject(comparator)) {
            comparator = undefined$1;
          }
          return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), undefined$1, comparator) : [];
        });
        function drop(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined$1 ? 1 : toInteger(n);
          return baseSlice(array, n < 0 ? 0 : n, length);
        }
        function dropRight(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined$1 ? 1 : toInteger(n);
          n = length - n;
          return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        function dropRightWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
        }
        function dropWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
        }
        function fill(array, value, start, end) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          if (start && typeof start != "number" && isIterateeCall(array, value, start)) {
            start = 0;
            end = length;
          }
          return baseFill(array, value, start, end);
        }
        function findIndex(array, predicate, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseFindIndex(array, getIteratee(predicate, 3), index);
        }
        function findLastIndex(array, predicate, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = length - 1;
          if (fromIndex !== undefined$1) {
            index = toInteger(fromIndex);
            index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
          }
          return baseFindIndex(array, getIteratee(predicate, 3), index, true);
        }
        function flatten(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten(array, 1) : [];
        }
        function flattenDeep(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten(array, INFINITY) : [];
        }
        function flattenDepth(array, depth) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          depth = depth === undefined$1 ? 1 : toInteger(depth);
          return baseFlatten(array, depth);
        }
        function fromPairs(pairs) {
          var index = -1, length = pairs == null ? 0 : pairs.length, result2 = {};
          while (++index < length) {
            var pair = pairs[index];
            result2[pair[0]] = pair[1];
          }
          return result2;
        }
        function head(array) {
          return array && array.length ? array[0] : undefined$1;
        }
        function indexOf(array, value, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger(fromIndex);
          if (index < 0) {
            index = nativeMax(length + index, 0);
          }
          return baseIndexOf(array, value, index);
        }
        function initial(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseSlice(array, 0, -1) : [];
        }
        var intersection = baseRest(function(arrays) {
          var mapped = arrayMap(arrays, castArrayLikeObject);
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
        });
        var intersectionBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
          if (iteratee2 === last(mapped)) {
            iteratee2 = undefined$1;
          } else {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee2, 2)) : [];
        });
        var intersectionWith = baseRest(function(arrays) {
          var comparator = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
          comparator = typeof comparator == "function" ? comparator : undefined$1;
          if (comparator) {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined$1, comparator) : [];
        });
        function join(array, separator) {
          return array == null ? "" : nativeJoin.call(array, separator);
        }
        function last(array) {
          var length = array == null ? 0 : array.length;
          return length ? array[length - 1] : undefined$1;
        }
        function lastIndexOf(array, value, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = length;
          if (fromIndex !== undefined$1) {
            index = toInteger(fromIndex);
            index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
          }
          return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);
        }
        function nth(array, n) {
          return array && array.length ? baseNth(array, toInteger(n)) : undefined$1;
        }
        var pull = baseRest(pullAll);
        function pullAll(array, values2) {
          return array && array.length && values2 && values2.length ? basePullAll(array, values2) : array;
        }
        function pullAllBy(array, values2, iteratee2) {
          return array && array.length && values2 && values2.length ? basePullAll(array, values2, getIteratee(iteratee2, 2)) : array;
        }
        function pullAllWith(array, values2, comparator) {
          return array && array.length && values2 && values2.length ? basePullAll(array, values2, undefined$1, comparator) : array;
        }
        var pullAt = flatRest(function(array, indexes) {
          var length = array == null ? 0 : array.length, result2 = baseAt(array, indexes);
          basePullAt(array, arrayMap(indexes, function(index) {
            return isIndex(index, length) ? +index : index;
          }).sort(compareAscending));
          return result2;
        });
        function remove(array, predicate) {
          var result2 = [];
          if (!(array && array.length)) {
            return result2;
          }
          var index = -1, indexes = [], length = array.length;
          predicate = getIteratee(predicate, 3);
          while (++index < length) {
            var value = array[index];
            if (predicate(value, index, array)) {
              result2.push(value);
              indexes.push(index);
            }
          }
          basePullAt(array, indexes);
          return result2;
        }
        function reverse(array) {
          return array == null ? array : nativeReverse.call(array);
        }
        function slice(array, start, end) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          if (end && typeof end != "number" && isIterateeCall(array, start, end)) {
            start = 0;
            end = length;
          } else {
            start = start == null ? 0 : toInteger(start);
            end = end === undefined$1 ? length : toInteger(end);
          }
          return baseSlice(array, start, end);
        }
        function sortedIndex(array, value) {
          return baseSortedIndex(array, value);
        }
        function sortedIndexBy(array, value, iteratee2) {
          return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2));
        }
        function sortedIndexOf(array, value) {
          var length = array == null ? 0 : array.length;
          if (length) {
            var index = baseSortedIndex(array, value);
            if (index < length && eq(array[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function sortedLastIndex(array, value) {
          return baseSortedIndex(array, value, true);
        }
        function sortedLastIndexBy(array, value, iteratee2) {
          return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2), true);
        }
        function sortedLastIndexOf(array, value) {
          var length = array == null ? 0 : array.length;
          if (length) {
            var index = baseSortedIndex(array, value, true) - 1;
            if (eq(array[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function sortedUniq(array) {
          return array && array.length ? baseSortedUniq(array) : [];
        }
        function sortedUniqBy(array, iteratee2) {
          return array && array.length ? baseSortedUniq(array, getIteratee(iteratee2, 2)) : [];
        }
        function tail(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseSlice(array, 1, length) : [];
        }
        function take(array, n, guard) {
          if (!(array && array.length)) {
            return [];
          }
          n = guard || n === undefined$1 ? 1 : toInteger(n);
          return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        function takeRight(array, n, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined$1 ? 1 : toInteger(n);
          n = length - n;
          return baseSlice(array, n < 0 ? 0 : n, length);
        }
        function takeRightWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
        }
        function takeWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
        }
        var union = baseRest(function(arrays) {
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
        });
        var unionBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined$1;
          }
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2));
        });
        var unionWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == "function" ? comparator : undefined$1;
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined$1, comparator);
        });
        function uniq(array) {
          return array && array.length ? baseUniq(array) : [];
        }
        function uniqBy(array, iteratee2) {
          return array && array.length ? baseUniq(array, getIteratee(iteratee2, 2)) : [];
        }
        function uniqWith(array, comparator) {
          comparator = typeof comparator == "function" ? comparator : undefined$1;
          return array && array.length ? baseUniq(array, undefined$1, comparator) : [];
        }
        function unzip(array) {
          if (!(array && array.length)) {
            return [];
          }
          var length = 0;
          array = arrayFilter(array, function(group) {
            if (isArrayLikeObject(group)) {
              length = nativeMax(group.length, length);
              return true;
            }
          });
          return baseTimes(length, function(index) {
            return arrayMap(array, baseProperty(index));
          });
        }
        function unzipWith(array, iteratee2) {
          if (!(array && array.length)) {
            return [];
          }
          var result2 = unzip(array);
          if (iteratee2 == null) {
            return result2;
          }
          return arrayMap(result2, function(group) {
            return apply(iteratee2, undefined$1, group);
          });
        }
        var without = baseRest(function(array, values2) {
          return isArrayLikeObject(array) ? baseDifference(array, values2) : [];
        });
        var xor = baseRest(function(arrays) {
          return baseXor(arrayFilter(arrays, isArrayLikeObject));
        });
        var xorBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined$1;
          }
          return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee2, 2));
        });
        var xorWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator == "function" ? comparator : undefined$1;
          return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined$1, comparator);
        });
        var zip = baseRest(unzip);
        function zipObject(props, values2) {
          return baseZipObject(props || [], values2 || [], assignValue);
        }
        function zipObjectDeep(props, values2) {
          return baseZipObject(props || [], values2 || [], baseSet);
        }
        var zipWith = baseRest(function(arrays) {
          var length = arrays.length, iteratee2 = length > 1 ? arrays[length - 1] : undefined$1;
          iteratee2 = typeof iteratee2 == "function" ? (arrays.pop(), iteratee2) : undefined$1;
          return unzipWith(arrays, iteratee2);
        });
        function chain(value) {
          var result2 = lodash2(value);
          result2.__chain__ = true;
          return result2;
        }
        function tap(value, interceptor) {
          interceptor(value);
          return value;
        }
        function thru(value, interceptor) {
          return interceptor(value);
        }
        var wrapperAt = flatRest(function(paths) {
          var length = paths.length, start = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function(object) {
            return baseAt(object, paths);
          };
          if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
            return this.thru(interceptor);
          }
          value = value.slice(start, +start + (length ? 1 : 0));
          value.__actions__.push({
            "func": thru,
            "args": [interceptor],
            "thisArg": undefined$1
          });
          return new LodashWrapper(value, this.__chain__).thru(function(array) {
            if (length && !array.length) {
              array.push(undefined$1);
            }
            return array;
          });
        });
        function wrapperChain() {
          return chain(this);
        }
        function wrapperCommit() {
          return new LodashWrapper(this.value(), this.__chain__);
        }
        function wrapperNext() {
          if (this.__values__ === undefined$1) {
            this.__values__ = toArray(this.value());
          }
          var done = this.__index__ >= this.__values__.length, value = done ? undefined$1 : this.__values__[this.__index__++];
          return { "done": done, "value": value };
        }
        function wrapperToIterator() {
          return this;
        }
        function wrapperPlant(value) {
          var result2, parent2 = this;
          while (parent2 instanceof baseLodash) {
            var clone2 = wrapperClone(parent2);
            clone2.__index__ = 0;
            clone2.__values__ = undefined$1;
            if (result2) {
              previous.__wrapped__ = clone2;
            } else {
              result2 = clone2;
            }
            var previous = clone2;
            parent2 = parent2.__wrapped__;
          }
          previous.__wrapped__ = value;
          return result2;
        }
        function wrapperReverse() {
          var value = this.__wrapped__;
          if (value instanceof LazyWrapper) {
            var wrapped = value;
            if (this.__actions__.length) {
              wrapped = new LazyWrapper(this);
            }
            wrapped = wrapped.reverse();
            wrapped.__actions__.push({
              "func": thru,
              "args": [reverse],
              "thisArg": undefined$1
            });
            return new LodashWrapper(wrapped, this.__chain__);
          }
          return this.thru(reverse);
        }
        function wrapperValue() {
          return baseWrapperValue(this.__wrapped__, this.__actions__);
        }
        var countBy = createAggregator(function(result2, value, key) {
          if (hasOwnProperty.call(result2, key)) {
            ++result2[key];
          } else {
            baseAssignValue(result2, key, 1);
          }
        });
        function every(collection, predicate, guard) {
          var func = isArray2(collection) ? arrayEvery : baseEvery;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined$1;
          }
          return func(collection, getIteratee(predicate, 3));
        }
        function filter(collection, predicate) {
          var func = isArray2(collection) ? arrayFilter : baseFilter;
          return func(collection, getIteratee(predicate, 3));
        }
        var find = createFind(findIndex);
        var findLast = createFind(findLastIndex);
        function flatMap(collection, iteratee2) {
          return baseFlatten(map(collection, iteratee2), 1);
        }
        function flatMapDeep(collection, iteratee2) {
          return baseFlatten(map(collection, iteratee2), INFINITY);
        }
        function flatMapDepth(collection, iteratee2, depth) {
          depth = depth === undefined$1 ? 1 : toInteger(depth);
          return baseFlatten(map(collection, iteratee2), depth);
        }
        function forEach(collection, iteratee2) {
          var func = isArray2(collection) ? arrayEach : baseEach;
          return func(collection, getIteratee(iteratee2, 3));
        }
        function forEachRight(collection, iteratee2) {
          var func = isArray2(collection) ? arrayEachRight : baseEachRight;
          return func(collection, getIteratee(iteratee2, 3));
        }
        var groupBy = createAggregator(function(result2, value, key) {
          if (hasOwnProperty.call(result2, key)) {
            result2[key].push(value);
          } else {
            baseAssignValue(result2, key, [value]);
          }
        });
        function includes(collection, value, fromIndex, guard) {
          collection = isArrayLike(collection) ? collection : values(collection);
          fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
          var length = collection.length;
          if (fromIndex < 0) {
            fromIndex = nativeMax(length + fromIndex, 0);
          }
          return isString2(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
        }
        var invokeMap = baseRest(function(collection, path, args) {
          var index = -1, isFunc = typeof path == "function", result2 = isArrayLike(collection) ? Array2(collection.length) : [];
          baseEach(collection, function(value) {
            result2[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
          });
          return result2;
        });
        var keyBy = createAggregator(function(result2, value, key) {
          baseAssignValue(result2, key, value);
        });
        function map(collection, iteratee2) {
          var func = isArray2(collection) ? arrayMap : baseMap;
          return func(collection, getIteratee(iteratee2, 3));
        }
        function orderBy(collection, iteratees, orders, guard) {
          if (collection == null) {
            return [];
          }
          if (!isArray2(iteratees)) {
            iteratees = iteratees == null ? [] : [iteratees];
          }
          orders = guard ? undefined$1 : orders;
          if (!isArray2(orders)) {
            orders = orders == null ? [] : [orders];
          }
          return baseOrderBy(collection, iteratees, orders);
        }
        var partition = createAggregator(function(result2, value, key) {
          result2[key ? 0 : 1].push(value);
        }, function() {
          return [[], []];
        });
        function reduce(collection, iteratee2, accumulator) {
          var func = isArray2(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
          return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEach);
        }
        function reduceRight(collection, iteratee2, accumulator) {
          var func = isArray2(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
          return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEachRight);
        }
        function reject(collection, predicate) {
          var func = isArray2(collection) ? arrayFilter : baseFilter;
          return func(collection, negate(getIteratee(predicate, 3)));
        }
        function sample(collection) {
          var func = isArray2(collection) ? arraySample : baseSample;
          return func(collection);
        }
        function sampleSize(collection, n, guard) {
          if (guard ? isIterateeCall(collection, n, guard) : n === undefined$1) {
            n = 1;
          } else {
            n = toInteger(n);
          }
          var func = isArray2(collection) ? arraySampleSize : baseSampleSize;
          return func(collection, n);
        }
        function shuffle(collection) {
          var func = isArray2(collection) ? arrayShuffle : baseShuffle;
          return func(collection);
        }
        function size(collection) {
          if (collection == null) {
            return 0;
          }
          if (isArrayLike(collection)) {
            return isString2(collection) ? stringSize(collection) : collection.length;
          }
          var tag2 = getTag(collection);
          if (tag2 == mapTag || tag2 == setTag) {
            return collection.size;
          }
          return baseKeys(collection).length;
        }
        function some(collection, predicate, guard) {
          var func = isArray2(collection) ? arraySome : baseSome;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined$1;
          }
          return func(collection, getIteratee(predicate, 3));
        }
        var sortBy = baseRest(function(collection, iteratees) {
          if (collection == null) {
            return [];
          }
          var length = iteratees.length;
          if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
            iteratees = [];
          } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
            iteratees = [iteratees[0]];
          }
          return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
        });
        var now = ctxNow || function() {
          return root.Date.now();
        };
        function after(n, func) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          n = toInteger(n);
          return function() {
            if (--n < 1) {
              return func.apply(this, arguments);
            }
          };
        }
        function ary(func, n, guard) {
          n = guard ? undefined$1 : n;
          n = func && n == null ? func.length : n;
          return createWrap(func, WRAP_ARY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, n);
        }
        function before(n, func) {
          var result2;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          n = toInteger(n);
          return function() {
            if (--n > 0) {
              result2 = func.apply(this, arguments);
            }
            if (n <= 1) {
              func = undefined$1;
            }
            return result2;
          };
        }
        var bind = baseRest(function(func, thisArg, partials) {
          var bitmask = WRAP_BIND_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bind));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(func, bitmask, thisArg, partials, holders);
        });
        var bindKey = baseRest(function(object, key, partials) {
          var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bindKey));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(key, bitmask, object, partials, holders);
        });
        function curry(func, arity, guard) {
          arity = guard ? undefined$1 : arity;
          var result2 = createWrap(func, WRAP_CURRY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
          result2.placeholder = curry.placeholder;
          return result2;
        }
        function curryRight(func, arity, guard) {
          arity = guard ? undefined$1 : arity;
          var result2 = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
          result2.placeholder = curryRight.placeholder;
          return result2;
        }
        function debounce2(func, wait, options) {
          var lastArgs, lastThis, maxWait, result2, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          wait = toNumber(wait) || 0;
          if (isObject(options)) {
            leading = !!options.leading;
            maxing = "maxWait" in options;
            maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
            trailing = "trailing" in options ? !!options.trailing : trailing;
          }
          function invokeFunc(time) {
            var args = lastArgs, thisArg = lastThis;
            lastArgs = lastThis = undefined$1;
            lastInvokeTime = time;
            result2 = func.apply(thisArg, args);
            return result2;
          }
          function leadingEdge(time) {
            lastInvokeTime = time;
            timerId = setTimeout2(timerExpired, wait);
            return leading ? invokeFunc(time) : result2;
          }
          function remainingWait(time) {
            var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
            return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
          }
          function shouldInvoke(time) {
            var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
            return lastCallTime === undefined$1 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
          }
          function timerExpired() {
            var time = now();
            if (shouldInvoke(time)) {
              return trailingEdge(time);
            }
            timerId = setTimeout2(timerExpired, remainingWait(time));
          }
          function trailingEdge(time) {
            timerId = undefined$1;
            if (trailing && lastArgs) {
              return invokeFunc(time);
            }
            lastArgs = lastThis = undefined$1;
            return result2;
          }
          function cancel() {
            if (timerId !== undefined$1) {
              clearTimeout2(timerId);
            }
            lastInvokeTime = 0;
            lastArgs = lastCallTime = lastThis = timerId = undefined$1;
          }
          function flush() {
            return timerId === undefined$1 ? result2 : trailingEdge(now());
          }
          function debounced() {
            var time = now(), isInvoking = shouldInvoke(time);
            lastArgs = arguments;
            lastThis = this;
            lastCallTime = time;
            if (isInvoking) {
              if (timerId === undefined$1) {
                return leadingEdge(lastCallTime);
              }
              if (maxing) {
                clearTimeout2(timerId);
                timerId = setTimeout2(timerExpired, wait);
                return invokeFunc(lastCallTime);
              }
            }
            if (timerId === undefined$1) {
              timerId = setTimeout2(timerExpired, wait);
            }
            return result2;
          }
          debounced.cancel = cancel;
          debounced.flush = flush;
          return debounced;
        }
        var defer = baseRest(function(func, args) {
          return baseDelay(func, 1, args);
        });
        var delay = baseRest(function(func, wait, args) {
          return baseDelay(func, toNumber(wait) || 0, args);
        });
        function flip(func) {
          return createWrap(func, WRAP_FLIP_FLAG);
        }
        function memoize(func, resolver) {
          if (typeof func != "function" || resolver != null && typeof resolver != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          var memoized = function() {
            var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
            if (cache.has(key)) {
              return cache.get(key);
            }
            var result2 = func.apply(this, args);
            memoized.cache = cache.set(key, result2) || cache;
            return result2;
          };
          memoized.cache = new (memoize.Cache || MapCache)();
          return memoized;
        }
        memoize.Cache = MapCache;
        function negate(predicate) {
          if (typeof predicate != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0:
                return !predicate.call(this);
              case 1:
                return !predicate.call(this, args[0]);
              case 2:
                return !predicate.call(this, args[0], args[1]);
              case 3:
                return !predicate.call(this, args[0], args[1], args[2]);
            }
            return !predicate.apply(this, args);
          };
        }
        function once(func) {
          return before(2, func);
        }
        var overArgs = castRest(function(func, transforms) {
          transforms = transforms.length == 1 && isArray2(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
          var funcsLength = transforms.length;
          return baseRest(function(args) {
            var index = -1, length = nativeMin(args.length, funcsLength);
            while (++index < length) {
              args[index] = transforms[index].call(this, args[index]);
            }
            return apply(func, this, args);
          });
        });
        var partial = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partial));
          return createWrap(func, WRAP_PARTIAL_FLAG, undefined$1, partials, holders);
        });
        var partialRight = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partialRight));
          return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined$1, partials, holders);
        });
        var rearg = flatRest(function(func, indexes) {
          return createWrap(func, WRAP_REARG_FLAG, undefined$1, undefined$1, undefined$1, indexes);
        });
        function rest(func, start) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          start = start === undefined$1 ? start : toInteger(start);
          return baseRest(func, start);
        }
        function spread(func, start) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          start = start == null ? 0 : nativeMax(toInteger(start), 0);
          return baseRest(function(args) {
            var array = args[start], otherArgs = castSlice(args, 0, start);
            if (array) {
              arrayPush(otherArgs, array);
            }
            return apply(func, this, otherArgs);
          });
        }
        function throttle(func, wait, options) {
          var leading = true, trailing = true;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          if (isObject(options)) {
            leading = "leading" in options ? !!options.leading : leading;
            trailing = "trailing" in options ? !!options.trailing : trailing;
          }
          return debounce2(func, wait, {
            "leading": leading,
            "maxWait": wait,
            "trailing": trailing
          });
        }
        function unary(func) {
          return ary(func, 1);
        }
        function wrap(value, wrapper) {
          return partial(castFunction(wrapper), value);
        }
        function castArray() {
          if (!arguments.length) {
            return [];
          }
          var value = arguments[0];
          return isArray2(value) ? value : [value];
        }
        function clone(value) {
          return baseClone(value, CLONE_SYMBOLS_FLAG);
        }
        function cloneWith(value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined$1;
          return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
        }
        function cloneDeep(value) {
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
        }
        function cloneDeepWith(value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined$1;
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
        }
        function conformsTo(object, source) {
          return source == null || baseConformsTo(object, source, keys(source));
        }
        function eq(value, other2) {
          return value === other2 || value !== value && other2 !== other2;
        }
        var gt = createRelationalOperation(baseGt);
        var gte = createRelationalOperation(function(value, other2) {
          return value >= other2;
        });
        var isArguments = baseIsArguments(/* @__PURE__ */ function() {
          return arguments;
        }()) ? baseIsArguments : function(value) {
          return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
        };
        var isArray2 = Array2.isArray;
        var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
        function isArrayLike(value) {
          return value != null && isLength(value.length) && !isFunction2(value);
        }
        function isArrayLikeObject(value) {
          return isObjectLike(value) && isArrayLike(value);
        }
        function isBoolean(value) {
          return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
        }
        var isBuffer = nativeIsBuffer || stubFalse;
        var isDate2 = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
        function isElement(value) {
          return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
        }
        function isEmpty(value) {
          if (value == null) {
            return true;
          }
          if (isArrayLike(value) && (isArray2(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
            return !value.length;
          }
          var tag2 = getTag(value);
          if (tag2 == mapTag || tag2 == setTag) {
            return !value.size;
          }
          if (isPrototype(value)) {
            return !baseKeys(value).length;
          }
          for (var key in value) {
            if (hasOwnProperty.call(value, key)) {
              return false;
            }
          }
          return true;
        }
        function isEqual2(value, other2) {
          return baseIsEqual(value, other2);
        }
        function isEqualWith(value, other2, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined$1;
          var result2 = customizer ? customizer(value, other2) : undefined$1;
          return result2 === undefined$1 ? baseIsEqual(value, other2, undefined$1, customizer) : !!result2;
        }
        function isError(value) {
          if (!isObjectLike(value)) {
            return false;
          }
          var tag2 = baseGetTag(value);
          return tag2 == errorTag || tag2 == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject(value);
        }
        function isFinite(value) {
          return typeof value == "number" && nativeIsFinite(value);
        }
        function isFunction2(value) {
          if (!isObject(value)) {
            return false;
          }
          var tag2 = baseGetTag(value);
          return tag2 == funcTag || tag2 == genTag || tag2 == asyncTag || tag2 == proxyTag;
        }
        function isInteger(value) {
          return typeof value == "number" && value == toInteger(value);
        }
        function isLength(value) {
          return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }
        function isObject(value) {
          var type = typeof value;
          return value != null && (type == "object" || type == "function");
        }
        function isObjectLike(value) {
          return value != null && typeof value == "object";
        }
        var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
        function isMatch(object, source) {
          return object === source || baseIsMatch(object, source, getMatchData(source));
        }
        function isMatchWith(object, source, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined$1;
          return baseIsMatch(object, source, getMatchData(source), customizer);
        }
        function isNaN(value) {
          return isNumber2(value) && value != +value;
        }
        function isNative(value) {
          if (isMaskable(value)) {
            throw new Error2(CORE_ERROR_TEXT);
          }
          return baseIsNative(value);
        }
        function isNull(value) {
          return value === null;
        }
        function isNil(value) {
          return value == null;
        }
        function isNumber2(value) {
          return typeof value == "number" || isObjectLike(value) && baseGetTag(value) == numberTag;
        }
        function isPlainObject(value) {
          if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
            return false;
          }
          var proto = getPrototype(value);
          if (proto === null) {
            return true;
          }
          var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
          return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
        }
        var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
        function isSafeInteger(value) {
          return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
        }
        var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
        function isString2(value) {
          return typeof value == "string" || !isArray2(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
        }
        function isSymbol(value) {
          return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
        }
        var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
        function isUndefined2(value) {
          return value === undefined$1;
        }
        function isWeakMap(value) {
          return isObjectLike(value) && getTag(value) == weakMapTag;
        }
        function isWeakSet(value) {
          return isObjectLike(value) && baseGetTag(value) == weakSetTag;
        }
        var lt = createRelationalOperation(baseLt);
        var lte = createRelationalOperation(function(value, other2) {
          return value <= other2;
        });
        function toArray(value) {
          if (!value) {
            return [];
          }
          if (isArrayLike(value)) {
            return isString2(value) ? stringToArray(value) : copyArray(value);
          }
          if (symIterator && value[symIterator]) {
            return iteratorToArray(value[symIterator]());
          }
          var tag2 = getTag(value), func = tag2 == mapTag ? mapToArray : tag2 == setTag ? setToArray : values;
          return func(value);
        }
        function toFinite(value) {
          if (!value) {
            return value === 0 ? value : 0;
          }
          value = toNumber(value);
          if (value === INFINITY || value === -INFINITY) {
            var sign = value < 0 ? -1 : 1;
            return sign * MAX_INTEGER;
          }
          return value === value ? value : 0;
        }
        function toInteger(value) {
          var result2 = toFinite(value), remainder = result2 % 1;
          return result2 === result2 ? remainder ? result2 - remainder : result2 : 0;
        }
        function toLength(value) {
          return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
        }
        function toNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol(value)) {
            return NAN;
          }
          if (isObject(value)) {
            var other2 = typeof value.valueOf == "function" ? value.valueOf() : value;
            value = isObject(other2) ? other2 + "" : other2;
          }
          if (typeof value != "string") {
            return value === 0 ? value : +value;
          }
          value = baseTrim(value);
          var isBinary = reIsBinary.test(value);
          return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
        }
        function toPlainObject(value) {
          return copyObject(value, keysIn(value));
        }
        function toSafeInteger(value) {
          return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
        }
        function toString(value) {
          return value == null ? "" : baseToString(value);
        }
        var assign = createAssigner(function(object, source) {
          if (isPrototype(source) || isArrayLike(source)) {
            copyObject(source, keys(source), object);
            return;
          }
          for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
              assignValue(object, key, source[key]);
            }
          }
        });
        var assignIn = createAssigner(function(object, source) {
          copyObject(source, keysIn(source), object);
        });
        var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
          copyObject(source, keysIn(source), object, customizer);
        });
        var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
          copyObject(source, keys(source), object, customizer);
        });
        var at = flatRest(baseAt);
        function create(prototype, properties) {
          var result2 = baseCreate(prototype);
          return properties == null ? result2 : baseAssign(result2, properties);
        }
        var defaults = baseRest(function(object, sources) {
          object = Object2(object);
          var index = -1;
          var length = sources.length;
          var guard = length > 2 ? sources[2] : undefined$1;
          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            length = 1;
          }
          while (++index < length) {
            var source = sources[index];
            var props = keysIn(source);
            var propsIndex = -1;
            var propsLength = props.length;
            while (++propsIndex < propsLength) {
              var key = props[propsIndex];
              var value = object[key];
              if (value === undefined$1 || eq(value, objectProto[key]) && !hasOwnProperty.call(object, key)) {
                object[key] = source[key];
              }
            }
          }
          return object;
        });
        var defaultsDeep = baseRest(function(args) {
          args.push(undefined$1, customDefaultsMerge);
          return apply(mergeWith, undefined$1, args);
        });
        function findKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
        }
        function findLastKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
        }
        function forIn(object, iteratee2) {
          return object == null ? object : baseFor(object, getIteratee(iteratee2, 3), keysIn);
        }
        function forInRight(object, iteratee2) {
          return object == null ? object : baseForRight(object, getIteratee(iteratee2, 3), keysIn);
        }
        function forOwn(object, iteratee2) {
          return object && baseForOwn(object, getIteratee(iteratee2, 3));
        }
        function forOwnRight(object, iteratee2) {
          return object && baseForOwnRight(object, getIteratee(iteratee2, 3));
        }
        function functions(object) {
          return object == null ? [] : baseFunctions(object, keys(object));
        }
        function functionsIn(object) {
          return object == null ? [] : baseFunctions(object, keysIn(object));
        }
        function get(object, path, defaultValue) {
          var result2 = object == null ? undefined$1 : baseGet(object, path);
          return result2 === undefined$1 ? defaultValue : result2;
        }
        function has(object, path) {
          return object != null && hasPath(object, path, baseHas);
        }
        function hasIn(object, path) {
          return object != null && hasPath(object, path, baseHasIn);
        }
        var invert = createInverter(function(result2, value, key) {
          if (value != null && typeof value.toString != "function") {
            value = nativeObjectToString.call(value);
          }
          result2[value] = key;
        }, constant(identity));
        var invertBy = createInverter(function(result2, value, key) {
          if (value != null && typeof value.toString != "function") {
            value = nativeObjectToString.call(value);
          }
          if (hasOwnProperty.call(result2, value)) {
            result2[value].push(key);
          } else {
            result2[value] = [key];
          }
        }, getIteratee);
        var invoke = baseRest(baseInvoke);
        function keys(object) {
          return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
        }
        function keysIn(object) {
          return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
        }
        function mapKeys(object, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object, function(value, key, object2) {
            baseAssignValue(result2, iteratee2(value, key, object2), value);
          });
          return result2;
        }
        function mapValues(object, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object, function(value, key, object2) {
            baseAssignValue(result2, key, iteratee2(value, key, object2));
          });
          return result2;
        }
        var merge = createAssigner(function(object, source, srcIndex) {
          baseMerge(object, source, srcIndex);
        });
        var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
          baseMerge(object, source, srcIndex, customizer);
        });
        var omit = flatRest(function(object, paths) {
          var result2 = {};
          if (object == null) {
            return result2;
          }
          var isDeep = false;
          paths = arrayMap(paths, function(path) {
            path = castPath(path, object);
            isDeep || (isDeep = path.length > 1);
            return path;
          });
          copyObject(object, getAllKeysIn(object), result2);
          if (isDeep) {
            result2 = baseClone(result2, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
          }
          var length = paths.length;
          while (length--) {
            baseUnset(result2, paths[length]);
          }
          return result2;
        });
        function omitBy2(object, predicate) {
          return pickBy(object, negate(getIteratee(predicate)));
        }
        var pick = flatRest(function(object, paths) {
          return object == null ? {} : basePick(object, paths);
        });
        function pickBy(object, predicate) {
          if (object == null) {
            return {};
          }
          var props = arrayMap(getAllKeysIn(object), function(prop) {
            return [prop];
          });
          predicate = getIteratee(predicate);
          return basePickBy(object, props, function(value, path) {
            return predicate(value, path[0]);
          });
        }
        function result(object, path, defaultValue) {
          path = castPath(path, object);
          var index = -1, length = path.length;
          if (!length) {
            length = 1;
            object = undefined$1;
          }
          while (++index < length) {
            var value = object == null ? undefined$1 : object[toKey(path[index])];
            if (value === undefined$1) {
              index = length;
              value = defaultValue;
            }
            object = isFunction2(value) ? value.call(object) : value;
          }
          return object;
        }
        function set(object, path, value) {
          return object == null ? object : baseSet(object, path, value);
        }
        function setWith(object, path, value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined$1;
          return object == null ? object : baseSet(object, path, value, customizer);
        }
        var toPairs = createToPairs(keys);
        var toPairsIn = createToPairs(keysIn);
        function transform(object, iteratee2, accumulator) {
          var isArr = isArray2(object), isArrLike = isArr || isBuffer(object) || isTypedArray(object);
          iteratee2 = getIteratee(iteratee2, 4);
          if (accumulator == null) {
            var Ctor = object && object.constructor;
            if (isArrLike) {
              accumulator = isArr ? new Ctor() : [];
            } else if (isObject(object)) {
              accumulator = isFunction2(Ctor) ? baseCreate(getPrototype(object)) : {};
            } else {
              accumulator = {};
            }
          }
          (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object2) {
            return iteratee2(accumulator, value, index, object2);
          });
          return accumulator;
        }
        function unset(object, path) {
          return object == null ? true : baseUnset(object, path);
        }
        function update(object, path, updater) {
          return object == null ? object : baseUpdate(object, path, castFunction(updater));
        }
        function updateWith(object, path, updater, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined$1;
          return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
        }
        function values(object) {
          return object == null ? [] : baseValues(object, keys(object));
        }
        function valuesIn(object) {
          return object == null ? [] : baseValues(object, keysIn(object));
        }
        function clamp(number, lower, upper) {
          if (upper === undefined$1) {
            upper = lower;
            lower = undefined$1;
          }
          if (upper !== undefined$1) {
            upper = toNumber(upper);
            upper = upper === upper ? upper : 0;
          }
          if (lower !== undefined$1) {
            lower = toNumber(lower);
            lower = lower === lower ? lower : 0;
          }
          return baseClamp(toNumber(number), lower, upper);
        }
        function inRange(number, start, end) {
          start = toFinite(start);
          if (end === undefined$1) {
            end = start;
            start = 0;
          } else {
            end = toFinite(end);
          }
          number = toNumber(number);
          return baseInRange(number, start, end);
        }
        function random(lower, upper, floating) {
          if (floating && typeof floating != "boolean" && isIterateeCall(lower, upper, floating)) {
            upper = floating = undefined$1;
          }
          if (floating === undefined$1) {
            if (typeof upper == "boolean") {
              floating = upper;
              upper = undefined$1;
            } else if (typeof lower == "boolean") {
              floating = lower;
              lower = undefined$1;
            }
          }
          if (lower === undefined$1 && upper === undefined$1) {
            lower = 0;
            upper = 1;
          } else {
            lower = toFinite(lower);
            if (upper === undefined$1) {
              upper = lower;
              lower = 0;
            } else {
              upper = toFinite(upper);
            }
          }
          if (lower > upper) {
            var temp = lower;
            lower = upper;
            upper = temp;
          }
          if (floating || lower % 1 || upper % 1) {
            var rand = nativeRandom();
            return nativeMin(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
          }
          return baseRandom(lower, upper);
        }
        var camelCase2 = createCompounder(function(result2, word, index) {
          word = word.toLowerCase();
          return result2 + (index ? capitalize(word) : word);
        });
        function capitalize(string) {
          return upperFirst(toString(string).toLowerCase());
        }
        function deburr(string) {
          string = toString(string);
          return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
        }
        function endsWith(string, target, position) {
          string = toString(string);
          target = baseToString(target);
          var length = string.length;
          position = position === undefined$1 ? length : baseClamp(toInteger(position), 0, length);
          var end = position;
          position -= target.length;
          return position >= 0 && string.slice(position, end) == target;
        }
        function escape2(string) {
          string = toString(string);
          return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
        }
        function escapeRegExp(string) {
          string = toString(string);
          return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, "\\$&") : string;
        }
        var kebabCase2 = createCompounder(function(result2, word, index) {
          return result2 + (index ? "-" : "") + word.toLowerCase();
        });
        var lowerCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + word.toLowerCase();
        });
        var lowerFirst = createCaseFirst("toLowerCase");
        function pad(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          if (!length || strLength >= length) {
            return string;
          }
          var mid = (length - strLength) / 2;
          return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
        }
        function padEnd(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
        }
        function padStart(string, length, chars) {
          string = toString(string);
          length = toInteger(length);
          var strLength = length ? stringSize(string) : 0;
          return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
        }
        function parseInt2(string, radix, guard) {
          if (guard || radix == null) {
            radix = 0;
          } else if (radix) {
            radix = +radix;
          }
          return nativeParseInt(toString(string).replace(reTrimStart, ""), radix || 0);
        }
        function repeat(string, n, guard) {
          if (guard ? isIterateeCall(string, n, guard) : n === undefined$1) {
            n = 1;
          } else {
            n = toInteger(n);
          }
          return baseRepeat(toString(string), n);
        }
        function replace() {
          var args = arguments, string = toString(args[0]);
          return args.length < 3 ? string : string.replace(args[1], args[2]);
        }
        var snakeCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? "_" : "") + word.toLowerCase();
        });
        function split(string, separator, limit) {
          if (limit && typeof limit != "number" && isIterateeCall(string, separator, limit)) {
            separator = limit = undefined$1;
          }
          limit = limit === undefined$1 ? MAX_ARRAY_LENGTH : limit >>> 0;
          if (!limit) {
            return [];
          }
          string = toString(string);
          if (string && (typeof separator == "string" || separator != null && !isRegExp(separator))) {
            separator = baseToString(separator);
            if (!separator && hasUnicode(string)) {
              return castSlice(stringToArray(string), 0, limit);
            }
          }
          return string.split(separator, limit);
        }
        var startCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + upperFirst(word);
        });
        function startsWith(string, target, position) {
          string = toString(string);
          position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);
          target = baseToString(target);
          return string.slice(position, position + target.length) == target;
        }
        function template(string, options, guard) {
          var settings = lodash2.templateSettings;
          if (guard && isIterateeCall(string, options, guard)) {
            options = undefined$1;
          }
          string = toString(string);
          options = assignInWith({}, options, settings, customDefaultsAssignIn);
          var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys(imports), importsValues = baseValues(imports, importsKeys);
          var isEscaping, isEvaluating, index = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
          var reDelimiters = RegExp2(
            (options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$",
            "g"
          );
          var sourceURL = "//# sourceURL=" + (hasOwnProperty.call(options, "sourceURL") ? (options.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
          string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
            interpolateValue || (interpolateValue = esTemplateValue);
            source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);
            if (escapeValue) {
              isEscaping = true;
              source += "' +\n__e(" + escapeValue + ") +\n'";
            }
            if (evaluateValue) {
              isEvaluating = true;
              source += "';\n" + evaluateValue + ";\n__p += '";
            }
            if (interpolateValue) {
              source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
            }
            index = offset + match.length;
            return match;
          });
          source += "';\n";
          var variable = hasOwnProperty.call(options, "variable") && options.variable;
          if (!variable) {
            source = "with (obj) {\n" + source + "\n}\n";
          } else if (reForbiddenIdentifierChars.test(variable)) {
            throw new Error2(INVALID_TEMPL_VAR_ERROR_TEXT);
          }
          source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
          source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
          var result2 = attempt(function() {
            return Function2(importsKeys, sourceURL + "return " + source).apply(undefined$1, importsValues);
          });
          result2.source = source;
          if (isError(result2)) {
            throw result2;
          }
          return result2;
        }
        function toLower(value) {
          return toString(value).toLowerCase();
        }
        function toUpper(value) {
          return toString(value).toUpperCase();
        }
        function trim(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined$1)) {
            return baseTrim(string);
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
          return castSlice(strSymbols, start, end).join("");
        }
        function trimEnd(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined$1)) {
            return string.slice(0, trimmedEndIndex(string) + 1);
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
          return castSlice(strSymbols, 0, end).join("");
        }
        function trimStart(string, chars, guard) {
          string = toString(string);
          if (string && (guard || chars === undefined$1)) {
            return string.replace(reTrimStart, "");
          }
          if (!string || !(chars = baseToString(chars))) {
            return string;
          }
          var strSymbols = stringToArray(string), start = charsStartIndex(strSymbols, stringToArray(chars));
          return castSlice(strSymbols, start).join("");
        }
        function truncate(string, options) {
          var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
          if (isObject(options)) {
            var separator = "separator" in options ? options.separator : separator;
            length = "length" in options ? toInteger(options.length) : length;
            omission = "omission" in options ? baseToString(options.omission) : omission;
          }
          string = toString(string);
          var strLength = string.length;
          if (hasUnicode(string)) {
            var strSymbols = stringToArray(string);
            strLength = strSymbols.length;
          }
          if (length >= strLength) {
            return string;
          }
          var end = length - stringSize(omission);
          if (end < 1) {
            return omission;
          }
          var result2 = strSymbols ? castSlice(strSymbols, 0, end).join("") : string.slice(0, end);
          if (separator === undefined$1) {
            return result2 + omission;
          }
          if (strSymbols) {
            end += result2.length - end;
          }
          if (isRegExp(separator)) {
            if (string.slice(end).search(separator)) {
              var match, substring = result2;
              if (!separator.global) {
                separator = RegExp2(separator.source, toString(reFlags.exec(separator)) + "g");
              }
              separator.lastIndex = 0;
              while (match = separator.exec(substring)) {
                var newEnd = match.index;
              }
              result2 = result2.slice(0, newEnd === undefined$1 ? end : newEnd);
            }
          } else if (string.indexOf(baseToString(separator), end) != end) {
            var index = result2.lastIndexOf(separator);
            if (index > -1) {
              result2 = result2.slice(0, index);
            }
          }
          return result2 + omission;
        }
        function unescape2(string) {
          string = toString(string);
          return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
        }
        var upperCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + word.toUpperCase();
        });
        var upperFirst = createCaseFirst("toUpperCase");
        function words(string, pattern, guard) {
          string = toString(string);
          pattern = guard ? undefined$1 : pattern;
          if (pattern === undefined$1) {
            return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
          }
          return string.match(pattern) || [];
        }
        var attempt = baseRest(function(func, args) {
          try {
            return apply(func, undefined$1, args);
          } catch (e) {
            return isError(e) ? e : new Error2(e);
          }
        });
        var bindAll = flatRest(function(object, methodNames) {
          arrayEach(methodNames, function(key) {
            key = toKey(key);
            baseAssignValue(object, key, bind(object[key], object));
          });
          return object;
        });
        function cond(pairs) {
          var length = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
          pairs = !length ? [] : arrayMap(pairs, function(pair) {
            if (typeof pair[1] != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            return [toIteratee(pair[0]), pair[1]];
          });
          return baseRest(function(args) {
            var index = -1;
            while (++index < length) {
              var pair = pairs[index];
              if (apply(pair[0], this, args)) {
                return apply(pair[1], this, args);
              }
            }
          });
        }
        function conforms(source) {
          return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
        }
        function constant(value) {
          return function() {
            return value;
          };
        }
        function defaultTo(value, defaultValue) {
          return value == null || value !== value ? defaultValue : value;
        }
        var flow = createFlow();
        var flowRight = createFlow(true);
        function identity(value) {
          return value;
        }
        function iteratee(func) {
          return baseIteratee(typeof func == "function" ? func : baseClone(func, CLONE_DEEP_FLAG));
        }
        function matches(source) {
          return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
        }
        function matchesProperty(path, srcValue) {
          return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
        }
        var method = baseRest(function(path, args) {
          return function(object) {
            return baseInvoke(object, path, args);
          };
        });
        var methodOf = baseRest(function(object, args) {
          return function(path) {
            return baseInvoke(object, path, args);
          };
        });
        function mixin(object, source, options) {
          var props = keys(source), methodNames = baseFunctions(source, props);
          if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
            options = source;
            source = object;
            object = this;
            methodNames = baseFunctions(source, keys(source));
          }
          var chain2 = !(isObject(options) && "chain" in options) || !!options.chain, isFunc = isFunction2(object);
          arrayEach(methodNames, function(methodName) {
            var func = source[methodName];
            object[methodName] = func;
            if (isFunc) {
              object.prototype[methodName] = function() {
                var chainAll = this.__chain__;
                if (chain2 || chainAll) {
                  var result2 = object(this.__wrapped__), actions = result2.__actions__ = copyArray(this.__actions__);
                  actions.push({ "func": func, "args": arguments, "thisArg": object });
                  result2.__chain__ = chainAll;
                  return result2;
                }
                return func.apply(object, arrayPush([this.value()], arguments));
              };
            }
          });
          return object;
        }
        function noConflict() {
          if (root._ === this) {
            root._ = oldDash;
          }
          return this;
        }
        function noop() {
        }
        function nthArg(n) {
          n = toInteger(n);
          return baseRest(function(args) {
            return baseNth(args, n);
          });
        }
        var over = createOver(arrayMap);
        var overEvery = createOver(arrayEvery);
        var overSome = createOver(arraySome);
        function property(path) {
          return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
        }
        function propertyOf(object) {
          return function(path) {
            return object == null ? undefined$1 : baseGet(object, path);
          };
        }
        var range2 = createRange();
        var rangeRight = createRange(true);
        function stubArray() {
          return [];
        }
        function stubFalse() {
          return false;
        }
        function stubObject() {
          return {};
        }
        function stubString() {
          return "";
        }
        function stubTrue() {
          return true;
        }
        function times(n, iteratee2) {
          n = toInteger(n);
          if (n < 1 || n > MAX_SAFE_INTEGER) {
            return [];
          }
          var index = MAX_ARRAY_LENGTH, length = nativeMin(n, MAX_ARRAY_LENGTH);
          iteratee2 = getIteratee(iteratee2);
          n -= MAX_ARRAY_LENGTH;
          var result2 = baseTimes(length, iteratee2);
          while (++index < n) {
            iteratee2(index);
          }
          return result2;
        }
        function toPath(value) {
          if (isArray2(value)) {
            return arrayMap(value, toKey);
          }
          return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
        }
        function uniqueId(prefix) {
          var id = ++idCounter;
          return toString(prefix) + id;
        }
        var add = createMathOperation(function(augend, addend) {
          return augend + addend;
        }, 0);
        var ceil = createRound("ceil");
        var divide = createMathOperation(function(dividend, divisor) {
          return dividend / divisor;
        }, 1);
        var floor = createRound("floor");
        function max(array) {
          return array && array.length ? baseExtremum(array, identity, baseGt) : undefined$1;
        }
        function maxBy(array, iteratee2) {
          return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseGt) : undefined$1;
        }
        function mean(array) {
          return baseMean(array, identity);
        }
        function meanBy(array, iteratee2) {
          return baseMean(array, getIteratee(iteratee2, 2));
        }
        function min(array) {
          return array && array.length ? baseExtremum(array, identity, baseLt) : undefined$1;
        }
        function minBy(array, iteratee2) {
          return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseLt) : undefined$1;
        }
        var multiply = createMathOperation(function(multiplier, multiplicand) {
          return multiplier * multiplicand;
        }, 1);
        var round = createRound("round");
        var subtract = createMathOperation(function(minuend, subtrahend) {
          return minuend - subtrahend;
        }, 0);
        function sum(array) {
          return array && array.length ? baseSum(array, identity) : 0;
        }
        function sumBy(array, iteratee2) {
          return array && array.length ? baseSum(array, getIteratee(iteratee2, 2)) : 0;
        }
        lodash2.after = after;
        lodash2.ary = ary;
        lodash2.assign = assign;
        lodash2.assignIn = assignIn;
        lodash2.assignInWith = assignInWith;
        lodash2.assignWith = assignWith;
        lodash2.at = at;
        lodash2.before = before;
        lodash2.bind = bind;
        lodash2.bindAll = bindAll;
        lodash2.bindKey = bindKey;
        lodash2.castArray = castArray;
        lodash2.chain = chain;
        lodash2.chunk = chunk;
        lodash2.compact = compact;
        lodash2.concat = concat;
        lodash2.cond = cond;
        lodash2.conforms = conforms;
        lodash2.constant = constant;
        lodash2.countBy = countBy;
        lodash2.create = create;
        lodash2.curry = curry;
        lodash2.curryRight = curryRight;
        lodash2.debounce = debounce2;
        lodash2.defaults = defaults;
        lodash2.defaultsDeep = defaultsDeep;
        lodash2.defer = defer;
        lodash2.delay = delay;
        lodash2.difference = difference;
        lodash2.differenceBy = differenceBy;
        lodash2.differenceWith = differenceWith;
        lodash2.drop = drop;
        lodash2.dropRight = dropRight;
        lodash2.dropRightWhile = dropRightWhile;
        lodash2.dropWhile = dropWhile;
        lodash2.fill = fill;
        lodash2.filter = filter;
        lodash2.flatMap = flatMap;
        lodash2.flatMapDeep = flatMapDeep;
        lodash2.flatMapDepth = flatMapDepth;
        lodash2.flatten = flatten;
        lodash2.flattenDeep = flattenDeep;
        lodash2.flattenDepth = flattenDepth;
        lodash2.flip = flip;
        lodash2.flow = flow;
        lodash2.flowRight = flowRight;
        lodash2.fromPairs = fromPairs;
        lodash2.functions = functions;
        lodash2.functionsIn = functionsIn;
        lodash2.groupBy = groupBy;
        lodash2.initial = initial;
        lodash2.intersection = intersection;
        lodash2.intersectionBy = intersectionBy;
        lodash2.intersectionWith = intersectionWith;
        lodash2.invert = invert;
        lodash2.invertBy = invertBy;
        lodash2.invokeMap = invokeMap;
        lodash2.iteratee = iteratee;
        lodash2.keyBy = keyBy;
        lodash2.keys = keys;
        lodash2.keysIn = keysIn;
        lodash2.map = map;
        lodash2.mapKeys = mapKeys;
        lodash2.mapValues = mapValues;
        lodash2.matches = matches;
        lodash2.matchesProperty = matchesProperty;
        lodash2.memoize = memoize;
        lodash2.merge = merge;
        lodash2.mergeWith = mergeWith;
        lodash2.method = method;
        lodash2.methodOf = methodOf;
        lodash2.mixin = mixin;
        lodash2.negate = negate;
        lodash2.nthArg = nthArg;
        lodash2.omit = omit;
        lodash2.omitBy = omitBy2;
        lodash2.once = once;
        lodash2.orderBy = orderBy;
        lodash2.over = over;
        lodash2.overArgs = overArgs;
        lodash2.overEvery = overEvery;
        lodash2.overSome = overSome;
        lodash2.partial = partial;
        lodash2.partialRight = partialRight;
        lodash2.partition = partition;
        lodash2.pick = pick;
        lodash2.pickBy = pickBy;
        lodash2.property = property;
        lodash2.propertyOf = propertyOf;
        lodash2.pull = pull;
        lodash2.pullAll = pullAll;
        lodash2.pullAllBy = pullAllBy;
        lodash2.pullAllWith = pullAllWith;
        lodash2.pullAt = pullAt;
        lodash2.range = range2;
        lodash2.rangeRight = rangeRight;
        lodash2.rearg = rearg;
        lodash2.reject = reject;
        lodash2.remove = remove;
        lodash2.rest = rest;
        lodash2.reverse = reverse;
        lodash2.sampleSize = sampleSize;
        lodash2.set = set;
        lodash2.setWith = setWith;
        lodash2.shuffle = shuffle;
        lodash2.slice = slice;
        lodash2.sortBy = sortBy;
        lodash2.sortedUniq = sortedUniq;
        lodash2.sortedUniqBy = sortedUniqBy;
        lodash2.split = split;
        lodash2.spread = spread;
        lodash2.tail = tail;
        lodash2.take = take;
        lodash2.takeRight = takeRight;
        lodash2.takeRightWhile = takeRightWhile;
        lodash2.takeWhile = takeWhile;
        lodash2.tap = tap;
        lodash2.throttle = throttle;
        lodash2.thru = thru;
        lodash2.toArray = toArray;
        lodash2.toPairs = toPairs;
        lodash2.toPairsIn = toPairsIn;
        lodash2.toPath = toPath;
        lodash2.toPlainObject = toPlainObject;
        lodash2.transform = transform;
        lodash2.unary = unary;
        lodash2.union = union;
        lodash2.unionBy = unionBy;
        lodash2.unionWith = unionWith;
        lodash2.uniq = uniq;
        lodash2.uniqBy = uniqBy;
        lodash2.uniqWith = uniqWith;
        lodash2.unset = unset;
        lodash2.unzip = unzip;
        lodash2.unzipWith = unzipWith;
        lodash2.update = update;
        lodash2.updateWith = updateWith;
        lodash2.values = values;
        lodash2.valuesIn = valuesIn;
        lodash2.without = without;
        lodash2.words = words;
        lodash2.wrap = wrap;
        lodash2.xor = xor;
        lodash2.xorBy = xorBy;
        lodash2.xorWith = xorWith;
        lodash2.zip = zip;
        lodash2.zipObject = zipObject;
        lodash2.zipObjectDeep = zipObjectDeep;
        lodash2.zipWith = zipWith;
        lodash2.entries = toPairs;
        lodash2.entriesIn = toPairsIn;
        lodash2.extend = assignIn;
        lodash2.extendWith = assignInWith;
        mixin(lodash2, lodash2);
        lodash2.add = add;
        lodash2.attempt = attempt;
        lodash2.camelCase = camelCase2;
        lodash2.capitalize = capitalize;
        lodash2.ceil = ceil;
        lodash2.clamp = clamp;
        lodash2.clone = clone;
        lodash2.cloneDeep = cloneDeep;
        lodash2.cloneDeepWith = cloneDeepWith;
        lodash2.cloneWith = cloneWith;
        lodash2.conformsTo = conformsTo;
        lodash2.deburr = deburr;
        lodash2.defaultTo = defaultTo;
        lodash2.divide = divide;
        lodash2.endsWith = endsWith;
        lodash2.eq = eq;
        lodash2.escape = escape2;
        lodash2.escapeRegExp = escapeRegExp;
        lodash2.every = every;
        lodash2.find = find;
        lodash2.findIndex = findIndex;
        lodash2.findKey = findKey;
        lodash2.findLast = findLast;
        lodash2.findLastIndex = findLastIndex;
        lodash2.findLastKey = findLastKey;
        lodash2.floor = floor;
        lodash2.forEach = forEach;
        lodash2.forEachRight = forEachRight;
        lodash2.forIn = forIn;
        lodash2.forInRight = forInRight;
        lodash2.forOwn = forOwn;
        lodash2.forOwnRight = forOwnRight;
        lodash2.get = get;
        lodash2.gt = gt;
        lodash2.gte = gte;
        lodash2.has = has;
        lodash2.hasIn = hasIn;
        lodash2.head = head;
        lodash2.identity = identity;
        lodash2.includes = includes;
        lodash2.indexOf = indexOf;
        lodash2.inRange = inRange;
        lodash2.invoke = invoke;
        lodash2.isArguments = isArguments;
        lodash2.isArray = isArray2;
        lodash2.isArrayBuffer = isArrayBuffer;
        lodash2.isArrayLike = isArrayLike;
        lodash2.isArrayLikeObject = isArrayLikeObject;
        lodash2.isBoolean = isBoolean;
        lodash2.isBuffer = isBuffer;
        lodash2.isDate = isDate2;
        lodash2.isElement = isElement;
        lodash2.isEmpty = isEmpty;
        lodash2.isEqual = isEqual2;
        lodash2.isEqualWith = isEqualWith;
        lodash2.isError = isError;
        lodash2.isFinite = isFinite;
        lodash2.isFunction = isFunction2;
        lodash2.isInteger = isInteger;
        lodash2.isLength = isLength;
        lodash2.isMap = isMap;
        lodash2.isMatch = isMatch;
        lodash2.isMatchWith = isMatchWith;
        lodash2.isNaN = isNaN;
        lodash2.isNative = isNative;
        lodash2.isNil = isNil;
        lodash2.isNull = isNull;
        lodash2.isNumber = isNumber2;
        lodash2.isObject = isObject;
        lodash2.isObjectLike = isObjectLike;
        lodash2.isPlainObject = isPlainObject;
        lodash2.isRegExp = isRegExp;
        lodash2.isSafeInteger = isSafeInteger;
        lodash2.isSet = isSet;
        lodash2.isString = isString2;
        lodash2.isSymbol = isSymbol;
        lodash2.isTypedArray = isTypedArray;
        lodash2.isUndefined = isUndefined2;
        lodash2.isWeakMap = isWeakMap;
        lodash2.isWeakSet = isWeakSet;
        lodash2.join = join;
        lodash2.kebabCase = kebabCase2;
        lodash2.last = last;
        lodash2.lastIndexOf = lastIndexOf;
        lodash2.lowerCase = lowerCase;
        lodash2.lowerFirst = lowerFirst;
        lodash2.lt = lt;
        lodash2.lte = lte;
        lodash2.max = max;
        lodash2.maxBy = maxBy;
        lodash2.mean = mean;
        lodash2.meanBy = meanBy;
        lodash2.min = min;
        lodash2.minBy = minBy;
        lodash2.stubArray = stubArray;
        lodash2.stubFalse = stubFalse;
        lodash2.stubObject = stubObject;
        lodash2.stubString = stubString;
        lodash2.stubTrue = stubTrue;
        lodash2.multiply = multiply;
        lodash2.nth = nth;
        lodash2.noConflict = noConflict;
        lodash2.noop = noop;
        lodash2.now = now;
        lodash2.pad = pad;
        lodash2.padEnd = padEnd;
        lodash2.padStart = padStart;
        lodash2.parseInt = parseInt2;
        lodash2.random = random;
        lodash2.reduce = reduce;
        lodash2.reduceRight = reduceRight;
        lodash2.repeat = repeat;
        lodash2.replace = replace;
        lodash2.result = result;
        lodash2.round = round;
        lodash2.runInContext = runInContext2;
        lodash2.sample = sample;
        lodash2.size = size;
        lodash2.snakeCase = snakeCase;
        lodash2.some = some;
        lodash2.sortedIndex = sortedIndex;
        lodash2.sortedIndexBy = sortedIndexBy;
        lodash2.sortedIndexOf = sortedIndexOf;
        lodash2.sortedLastIndex = sortedLastIndex;
        lodash2.sortedLastIndexBy = sortedLastIndexBy;
        lodash2.sortedLastIndexOf = sortedLastIndexOf;
        lodash2.startCase = startCase;
        lodash2.startsWith = startsWith;
        lodash2.subtract = subtract;
        lodash2.sum = sum;
        lodash2.sumBy = sumBy;
        lodash2.template = template;
        lodash2.times = times;
        lodash2.toFinite = toFinite;
        lodash2.toInteger = toInteger;
        lodash2.toLength = toLength;
        lodash2.toLower = toLower;
        lodash2.toNumber = toNumber;
        lodash2.toSafeInteger = toSafeInteger;
        lodash2.toString = toString;
        lodash2.toUpper = toUpper;
        lodash2.trim = trim;
        lodash2.trimEnd = trimEnd;
        lodash2.trimStart = trimStart;
        lodash2.truncate = truncate;
        lodash2.unescape = unescape2;
        lodash2.uniqueId = uniqueId;
        lodash2.upperCase = upperCase;
        lodash2.upperFirst = upperFirst;
        lodash2.each = forEach;
        lodash2.eachRight = forEachRight;
        lodash2.first = head;
        mixin(lodash2, function() {
          var source = {};
          baseForOwn(lodash2, function(func, methodName) {
            if (!hasOwnProperty.call(lodash2.prototype, methodName)) {
              source[methodName] = func;
            }
          });
          return source;
        }(), { "chain": false });
        lodash2.VERSION = VERSION;
        arrayEach(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(methodName) {
          lodash2[methodName].placeholder = lodash2;
        });
        arrayEach(["drop", "take"], function(methodName, index) {
          LazyWrapper.prototype[methodName] = function(n) {
            n = n === undefined$1 ? 1 : nativeMax(toInteger(n), 0);
            var result2 = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();
            if (result2.__filtered__) {
              result2.__takeCount__ = nativeMin(n, result2.__takeCount__);
            } else {
              result2.__views__.push({
                "size": nativeMin(n, MAX_ARRAY_LENGTH),
                "type": methodName + (result2.__dir__ < 0 ? "Right" : "")
              });
            }
            return result2;
          };
          LazyWrapper.prototype[methodName + "Right"] = function(n) {
            return this.reverse()[methodName](n).reverse();
          };
        });
        arrayEach(["filter", "map", "takeWhile"], function(methodName, index) {
          var type = index + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
          LazyWrapper.prototype[methodName] = function(iteratee2) {
            var result2 = this.clone();
            result2.__iteratees__.push({
              "iteratee": getIteratee(iteratee2, 3),
              "type": type
            });
            result2.__filtered__ = result2.__filtered__ || isFilter;
            return result2;
          };
        });
        arrayEach(["head", "last"], function(methodName, index) {
          var takeName = "take" + (index ? "Right" : "");
          LazyWrapper.prototype[methodName] = function() {
            return this[takeName](1).value()[0];
          };
        });
        arrayEach(["initial", "tail"], function(methodName, index) {
          var dropName = "drop" + (index ? "" : "Right");
          LazyWrapper.prototype[methodName] = function() {
            return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
          };
        });
        LazyWrapper.prototype.compact = function() {
          return this.filter(identity);
        };
        LazyWrapper.prototype.find = function(predicate) {
          return this.filter(predicate).head();
        };
        LazyWrapper.prototype.findLast = function(predicate) {
          return this.reverse().find(predicate);
        };
        LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
          if (typeof path == "function") {
            return new LazyWrapper(this);
          }
          return this.map(function(value) {
            return baseInvoke(value, path, args);
          });
        });
        LazyWrapper.prototype.reject = function(predicate) {
          return this.filter(negate(getIteratee(predicate)));
        };
        LazyWrapper.prototype.slice = function(start, end) {
          start = toInteger(start);
          var result2 = this;
          if (result2.__filtered__ && (start > 0 || end < 0)) {
            return new LazyWrapper(result2);
          }
          if (start < 0) {
            result2 = result2.takeRight(-start);
          } else if (start) {
            result2 = result2.drop(start);
          }
          if (end !== undefined$1) {
            end = toInteger(end);
            result2 = end < 0 ? result2.dropRight(-end) : result2.take(end - start);
          }
          return result2;
        };
        LazyWrapper.prototype.takeRightWhile = function(predicate) {
          return this.reverse().takeWhile(predicate).reverse();
        };
        LazyWrapper.prototype.toArray = function() {
          return this.take(MAX_ARRAY_LENGTH);
        };
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash2[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
          if (!lodashFunc) {
            return;
          }
          lodash2.prototype[methodName] = function() {
            var value = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value instanceof LazyWrapper, iteratee2 = args[0], useLazy = isLazy || isArray2(value);
            var interceptor = function(value2) {
              var result3 = lodashFunc.apply(lodash2, arrayPush([value2], args));
              return isTaker && chainAll ? result3[0] : result3;
            };
            if (useLazy && checkIteratee && typeof iteratee2 == "function" && iteratee2.length != 1) {
              isLazy = useLazy = false;
            }
            var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
            if (!retUnwrapped && useLazy) {
              value = onlyLazy ? value : new LazyWrapper(this);
              var result2 = func.apply(value, args);
              result2.__actions__.push({ "func": thru, "args": [interceptor], "thisArg": undefined$1 });
              return new LodashWrapper(result2, chainAll);
            }
            if (isUnwrapped && onlyLazy) {
              return func.apply(this, args);
            }
            result2 = this.thru(interceptor);
            return isUnwrapped ? isTaker ? result2.value()[0] : result2.value() : result2;
          };
        });
        arrayEach(["pop", "push", "shift", "sort", "splice", "unshift"], function(methodName) {
          var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
          lodash2.prototype[methodName] = function() {
            var args = arguments;
            if (retUnwrapped && !this.__chain__) {
              var value = this.value();
              return func.apply(isArray2(value) ? value : [], args);
            }
            return this[chainName](function(value2) {
              return func.apply(isArray2(value2) ? value2 : [], args);
            });
          };
        });
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var lodashFunc = lodash2[methodName];
          if (lodashFunc) {
            var key = lodashFunc.name + "";
            if (!hasOwnProperty.call(realNames, key)) {
              realNames[key] = [];
            }
            realNames[key].push({ "name": methodName, "func": lodashFunc });
          }
        });
        realNames[createHybrid(undefined$1, WRAP_BIND_KEY_FLAG).name] = [{
          "name": "wrapper",
          "func": undefined$1
        }];
        LazyWrapper.prototype.clone = lazyClone;
        LazyWrapper.prototype.reverse = lazyReverse;
        LazyWrapper.prototype.value = lazyValue;
        lodash2.prototype.at = wrapperAt;
        lodash2.prototype.chain = wrapperChain;
        lodash2.prototype.commit = wrapperCommit;
        lodash2.prototype.next = wrapperNext;
        lodash2.prototype.plant = wrapperPlant;
        lodash2.prototype.reverse = wrapperReverse;
        lodash2.prototype.toJSON = lodash2.prototype.valueOf = lodash2.prototype.value = wrapperValue;
        lodash2.prototype.first = lodash2.prototype.head;
        if (symIterator) {
          lodash2.prototype[symIterator] = wrapperToIterator;
        }
        return lodash2;
      };
      var _ = runInContext();
      if (freeModule) {
        (freeModule.exports = _)._ = _;
        freeExports._ = _;
      } else {
        root._ = _;
      }
    }).call(commonjsGlobal);
  })(lodash, lodash.exports);
  var lodashExports = lodash.exports;
  function deleteFile(data) {
    return request({
      url: `/api/upload/delete?url=${encodeURIComponent(data)}`,
      method: "POST"
    });
  }
  const _sfc_main$I = /* @__PURE__ */ vue.defineComponent({
    __name: "publishArticle",
    setup(__props, { expose: __expose }) {
      __expose();
      const toast = useToast();
      const fileList = vue.ref([]);
      const showActionSheet = vue.ref(false);
      const publishArticleParams = vue.ref({
        content: "",
        tags: [],
        images: []
      });
      const actions = vue.ref([]);
      const onClickLeft = () => {
        uni.navigateBack();
      };
      const getTags = () => {
        getArticleTags().then((res) => {
          actions.value = res.data.map((item) => ({ name: item }));
          formatAppLog("log", "at pages/publishArticle/publishArticle.vue:126", actions.value);
        });
      };
      const handleSelectedClose = (index) => {
        publishArticleParams.value.tags.splice(index, 1);
      };
      const showAction = () => {
        getTags();
        showActionSheet.value = !showActionSheet.value;
      };
      const selectAction = (item) => {
        formatAppLog("log", "at pages/publishArticle/publishArticle.vue:142", publishArticleParams.value.tags);
        publishArticleParams.value.tags.push(item.item.name);
      };
      const uploadSuccess = (res) => {
        formatAppLog("log", "at pages/publishArticle/publishArticle.vue:149", "上传成功res", res.file.response);
        const result = JSON.parse(res.file.response);
        formatAppLog("log", "at pages/publishArticle/publishArticle.vue:151", "上传成功result.data", result.data);
        publishArticleParams.value.images.push(...result.data);
        formatAppLog("log", "at pages/publishArticle/publishArticle.vue:154", publishArticleParams.value);
      };
      const handleChange = (file) => {
        formatAppLog("log", "at pages/publishArticle/publishArticle.vue:158", "files:", file);
        formatAppLog("log", "at pages/publishArticle/publishArticle.vue:159", fileList.value);
        fileList.value = file;
      };
      const beforeImageRemove = (res) => {
        const url2 = publishArticleParams.value.images[res.index];
        formatAppLog("log", "at pages/publishArticle/publishArticle.vue:166", "删除前置处理", url2);
        deleteFile(url2).then((response) => {
          if (response.code === 200) {
            formatAppLog("log", "at pages/publishArticle/publishArticle.vue:169", "删除成功", response);
            fileList.value.splice(res.index, 1);
            publishArticleParams.value.images.splice(res.index, 1);
            formatAppLog("log", "at pages/publishArticle/publishArticle.vue:173", "publishArticleParams>>>", publishArticleParams);
          } else {
            formatAppLog("log", "at pages/publishArticle/publishArticle.vue:175", "删除失败", response);
          }
        });
      };
      const setTime = () => {
        toast.show("暂不支持哦~");
      };
      const setVisibility = () => {
        toast.show("暂不支持哦~");
      };
      const publishArticle = lodashExports.debounce(async () => {
        uni.showLoading({
          title: "加载中",
          mask: true
        });
        formatAppLog("log", "at pages/publishArticle/publishArticle.vue:193", "发布文章参数：", publishArticleParams.value);
        const res = await addArticle(publishArticleParams.value);
        if (res.code == 200) {
          toast.show({
            msg: "发布成功，等待审核~",
            cover: true
          });
          setTimeout(() => {
            const pages = getCurrentPages();
            const indexPage = pages.find((page) => page.route === "pages/index/index");
            if (indexPage) {
              indexPage.$vm.setNeedRefresh();
            }
            uni.switchTab({
              url: "/pages/index/index"
            });
          }, 1500);
        } else {
          toast.error(res.message);
        }
      }, 500);
      onShareAppMessage((res) => {
        formatAppLog("log", "at pages/publishArticle/publishArticle.vue:220", res);
        return {
          title: "青春共享站",
          path: "/pages/index/index",
          imageUrl: "/static/logo.jpg"
          // 分享图片
        };
      });
      onShareTimeline(() => {
        return {
          title: "青春共享站",
          path: "/pages/index/index",
          imageUrl: "/static/logo.jpg"
          // 分享图片
        };
      });
      const __returned__ = { toast, fileList, showActionSheet, publishArticleParams, actions, onClickLeft, getTags, handleSelectedClose, showAction, selectAction, uploadSuccess, handleChange, beforeImageRemove, setTime, setVisibility, publishArticle };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$H(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_wd_navbar = resolveEasycom(vue.resolveDynamicComponent("wd-navbar"), __easycom_1$3);
    const _component_wd_notice_bar = resolveEasycom(vue.resolveDynamicComponent("wd-notice-bar"), __easycom_0$4);
    const _component_wd_textarea = resolveEasycom(vue.resolveDynamicComponent("wd-textarea"), __easycom_5$1);
    const _component_wd_upload = resolveEasycom(vue.resolveDynamicComponent("wd-upload"), __easycom_4);
    const _component_wd_tag = resolveEasycom(vue.resolveDynamicComponent("wd-tag"), __easycom_2$1);
    const _component_wd_icon = resolveEasycom(vue.resolveDynamicComponent("wd-icon"), __easycom_0$5);
    const _component_wd_cell = resolveEasycom(vue.resolveDynamicComponent("wd-cell"), __easycom_5$2);
    const _component_wd_cell_group = resolveEasycom(vue.resolveDynamicComponent("wd-cell-group"), __easycom_6$1);
    const _component_wd_gap = resolveEasycom(vue.resolveDynamicComponent("wd-gap"), __easycom_2);
    const _component_wd_button = resolveEasycom(vue.resolveDynamicComponent("wd-button"), __easycom_3);
    const _component_wd_action_sheet = resolveEasycom(vue.resolveDynamicComponent("wd-action-sheet"), wdActionSheet);
    const _component_wd_toast = resolveEasycom(vue.resolveDynamicComponent("wd-toast"), __easycom_2$2);
    return vue.openBlock(), vue.createElementBlock("view", { class: "publish-article" }, [
      vue.createCommentVNode(" 顶部导航栏 "),
      vue.createVNode(_component_wd_navbar, {
        title: "写说说",
        leftText: "取消",
        fixed: "",
        placeholder: "",
        safeAreaInsetTop: "",
        onClickLeft: $setup.onClickLeft
      }),
      vue.createVNode(_component_wd_notice_bar, {
        text: "帖子发布公告：帖子内容禁止有关任何政治立场、色情、暴力等一系列非法言论，如有发现将封禁发布功能",
        prefix: "check-outline",
        color: "#34D19D",
        "background-color": "#f0f9eb",
        "custom-class": "space"
      }),
      vue.createCommentVNode(" 主体内容区域 "),
      vue.createElementVNode("view", { class: "content" }, [
        vue.createElementVNode("view", { class: "upload-section" }, [
          vue.createCommentVNode(" 文本输入区域 "),
          vue.createVNode(_component_wd_textarea, {
            modelValue: $setup.publishArticleParams.content,
            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $setup.publishArticleParams.content = $event),
            maxlength: 2e3,
            "show-word-limit": "",
            placeholderStyle: "font-size:18px;",
            "show-count": "",
            clearable: "",
            placeholder: "分享新鲜事~",
            size: "large",
            rows: 5
          }, null, 8, ["modelValue"]),
          vue.createCommentVNode(" 图片上传区域 "),
          vue.createVNode(_component_wd_upload, {
            "file-list": $setup.fileList,
            "onUpdate:fileList": _cache[1] || (_cache[1] = ($event) => $setup.fileList = $event),
            ref: "uploadFile",
            limit: 9,
            multiple: "",
            accept: "image",
            action: "https://campus.fybreeze.cn/api/article/uploadImages",
            onChange: $setup.handleChange,
            "before-remove": $setup.beforeImageRemove,
            onSuccess: $setup.uploadSuccess
          }, null, 8, ["file-list"]),
          $setup.publishArticleParams.tags.length != 0 ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 0,
            class: "tags"
          }, [
            (vue.openBlock(true), vue.createElementBlock(
              vue.Fragment,
              null,
              vue.renderList($setup.publishArticleParams.tags, (item, index) => {
                return vue.openBlock(), vue.createBlock(_component_wd_tag, {
                  closable: "",
                  round: "",
                  type: "primary",
                  onClose: ($event) => $setup.handleSelectedClose(index)
                }, {
                  default: vue.withCtx(() => [
                    vue.createTextVNode(
                      vue.toDisplayString(item),
                      1
                      /* TEXT */
                    )
                  ]),
                  _: 2
                  /* DYNAMIC */
                }, 1032, ["onClose"]);
              }),
              256
              /* UNKEYED_FRAGMENT */
            ))
          ])) : vue.createCommentVNode("v-if", true),
          vue.createElementVNode("view", { class: "lable" }, [
            vue.createTextVNode("    "),
            vue.createVNode(_component_wd_tag, {
              round: "",
              "bg-color": "#eee"
            }, {
              default: vue.withCtx(() => [
                vue.createTextVNode("@ 好友")
              ]),
              _: 1
              /* STABLE */
            }),
            vue.createTextVNode("   "),
            vue.createVNode(_component_wd_tag, {
              "custom-class": "space",
              round: "",
              "use-icon-slot": "",
              "bg-color": "#eee",
              onClick: $setup.showAction
            }, {
              icon: vue.withCtx(() => [
                vue.createVNode(_component_wd_icon, { name: "discount" })
              ]),
              default: vue.withCtx(() => [
                vue.createElementVNode("text", null, "添加标签")
              ]),
              _: 1
              /* STABLE */
            }),
            vue.createTextVNode("   "),
            vue.createVNode(_component_wd_tag, {
              "custom-class": "space",
              round: "",
              "use-icon-slot": "",
              "bg-color": "#eee"
            }, {
              icon: vue.withCtx(() => [
                vue.createVNode(_component_wd_icon, { name: "location" })
              ]),
              default: vue.withCtx(() => [
                vue.createElementVNode("text", null, "添加地点")
              ]),
              _: 1
              /* STABLE */
            })
          ]),
          vue.createElementVNode("view")
        ]),
        vue.createCommentVNode(" 位置和可见范围设置 "),
        vue.createElementVNode("view", { class: "settings" }, [
          vue.createVNode(_component_wd_cell_group, null, {
            default: vue.withCtx(() => [
              vue.createVNode(_component_wd_cell, {
                title: "谁可以看",
                "is-link": "",
                icon: "view",
                value: "所有人可见",
                onClick: $setup.setVisibility
              }),
              vue.createVNode(_component_wd_cell, {
                title: "定时",
                "is-link": "",
                icon: "clock",
                onClick: $setup.setTime
              })
            ]),
            _: 1
            /* STABLE */
          })
        ])
      ]),
      vue.createVNode(_component_wd_gap, { height: "60px" }),
      vue.createCommentVNode(" 底部发布按钮 "),
      vue.createElementVNode("view", { class: "footer" }, [
        vue.createVNode(_component_wd_button, {
          block: "",
          type: "primary",
          onClickOnce: $setup.publishArticle
        }, {
          default: vue.withCtx(() => [
            vue.createTextVNode(" 发布笔记 ")
          ]),
          _: 1
          /* STABLE */
        }, 8, ["onClickOnce"])
      ]),
      vue.createCommentVNode(" 动作面板 "),
      vue.createVNode(_component_wd_action_sheet, {
        modelValue: $setup.showActionSheet,
        "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $setup.showActionSheet = $event),
        actions: $setup.actions,
        onSelect: $setup.selectAction,
        onClose: _cache[3] || (_cache[3] = ($event) => !$setup.showActionSheet),
        "cancel-text": "取消"
      }, null, 8, ["modelValue", "actions"]),
      vue.createVNode(_component_wd_toast)
    ]);
  }
  const PagesPublishArticlePublishArticle = /* @__PURE__ */ _export_sfc(_sfc_main$I, [["render", _sfc_render$H], ["__scopeId", "data-v-cfdfbfe7"], ["__file", "G:/Code/campus/miniProject/pages/publishArticle/publishArticle.vue"]]);
  function getUserVOById(id) {
    return request({
      url: `/api/user/get/vo${id ? `?id=${id}` : ""}`,
      method: "GET"
    });
  }
  function updateWxUser(data) {
    return request({
      url: "/api/user/update/wx",
      method: "POST",
      data
    });
  }
  function wxLogin(code) {
    return request({
      url: `/api/user/wx/login?code=${code}`,
      method: "POST"
    });
  }
  const _sfc_main$H = /* @__PURE__ */ vue.defineComponent({
    __name: "login",
    setup(__props, { expose: __expose }) {
      __expose();
      const toast = useToast();
      const login = async (e) => {
        if (!e.code) {
          toast.error("未授权手机号，请重试");
          return;
        }
        uni.showLoading({
          title: "登录中..."
        });
        try {
          const res = await wxLogin(e.code);
          if (res.code === 200) {
            formatAppLog("log", "at pages/login/login.vue:78", res.data);
            uni.setStorageSync("token", res.data.token);
            setUserInfo(res.data);
            toast.success("登录成功");
            setTimeout(() => {
              uni.switchTab({
                url: "/pages/index/index"
              });
            }, 1e3);
          } else {
            toast.error(res.message || "登录失败");
          }
        } catch (error) {
          formatAppLog("error", "at pages/login/login.vue:91", "登录错误:", error);
          toast.error("登录失败，请重试");
        } finally {
          uni.hideLoading();
        }
      };
      const handleCancel = () => {
        uni.switchTab({
          url: "/pages/index/index"
        });
      };
      const openUserAgreement = () => {
        uni.navigateTo({
          url: "/pages/agreement/user"
        });
      };
      const openPrivacyPolicy = () => {
        uni.navigateTo({
          url: "/pages/agreement/privacy"
        });
      };
      onLoad(() => {
        clearUserInfo();
      });
      const __returned__ = { toast, login, handleCancel, openUserAgreement, openPrivacyPolicy };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$G(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_wd_navbar = resolveEasycom(vue.resolveDynamicComponent("wd-navbar"), __easycom_1$3);
    const _component_wd_button = resolveEasycom(vue.resolveDynamicComponent("wd-button"), __easycom_3);
    const _component_wd_toast = resolveEasycom(vue.resolveDynamicComponent("wd-toast"), __easycom_2$2);
    return vue.openBlock(), vue.createElementBlock("view", { class: "viewport" }, [
      vue.createVNode(_component_wd_navbar, {
        "custom-class": "navbar",
        bordered: false,
        title: "登录",
        safeAreaInsetTop: ""
      }),
      vue.createCommentVNode(" 主要内容区 "),
      vue.createElementVNode("view", { class: "main-content" }, [
        vue.createElementVNode("view", { class: "logo-section" }, [
          vue.createElementVNode("image", {
            class: "logo-image",
            src: "https://minio.fybreeze.cn/campus/logo.webp"
          }),
          vue.createElementVNode("view", { class: "welcome-section" }, [
            vue.createElementVNode("text", { class: "welcome-title" }, "欢迎来到青春共享站"),
            vue.createElementVNode("text", { class: "welcome-subtitle" }, "让校园生活更精彩")
          ])
        ]),
        vue.createElementVNode("view", { class: "login-section" }, [
          vue.createCommentVNode(" 按钮组 "),
          vue.createElementVNode("view", { class: "button-group" }, [
            vue.createVNode(_component_wd_button, {
              icon: "wechat",
              type: "success",
              block: "",
              "open-type": "getPhoneNumber",
              onGetphonenumber: $setup.login,
              class: "login-btn"
            }, {
              default: vue.withCtx(() => [
                vue.createTextVNode(" 微信一键登录 ")
              ]),
              _: 1
              /* STABLE */
            }),
            vue.createVNode(_component_wd_button, {
              type: "info",
              block: "",
              plain: "",
              onClick: $setup.handleCancel,
              class: "cancel-btn"
            }, {
              default: vue.withCtx(() => [
                vue.createTextVNode(" 暂不登录 ")
              ]),
              _: 1
              /* STABLE */
            })
          ]),
          vue.createCommentVNode(" 协议区域 "),
          vue.createElementVNode("view", { class: "agreement" }, [
            vue.createElementVNode("text", { class: "agreement-text" }, "登录即表示同意"),
            vue.createElementVNode("text", {
              class: "link",
              onClick: $setup.openUserAgreement
            }, "《用户协议》"),
            vue.createElementVNode("text", { class: "agreement-text" }, "和"),
            vue.createElementVNode("text", {
              class: "link",
              onClick: $setup.openPrivacyPolicy
            }, "《隐私政策》")
          ])
        ])
      ]),
      vue.createVNode(_component_wd_toast)
    ]);
  }
  const PagesLoginLogin = /* @__PURE__ */ _export_sfc(_sfc_main$H, [["render", _sfc_render$G], ["__scopeId", "data-v-e4e4508d"], ["__file", "G:/Code/campus/miniProject/pages/login/login.vue"]]);
  const __default__$f = {
    name: "wd-form",
    options: {
      addGlobalClass: true,
      virtualHost: true,
      styleIsolation: "shared"
    }
  };
  const _sfc_main$G = /* @__PURE__ */ vue.defineComponent({
    ...__default__$f,
    props: formProps,
    setup(__props, { expose: __expose }) {
      const { show: showToast } = useToast("wd-form-toast");
      const props = __props;
      const { children, linkChildren } = useChildren(FORM_KEY);
      let errorMessages = vue.reactive({});
      linkChildren({ props, errorMessages });
      vue.watch(
        () => props.model,
        () => {
          if (props.resetOnChange) {
            clearMessage();
          }
        },
        { immediate: true, deep: true }
      );
      async function validate(prop) {
        const errors = [];
        let valid = true;
        const promises = [];
        const formRules = getMergeRules();
        const propsToValidate = isArray(prop) ? prop : isDef(prop) ? [prop] : [];
        const rulesToValidate = propsToValidate.length > 0 ? propsToValidate.reduce((acc, key) => {
          if (formRules[key]) {
            acc[key] = formRules[key];
          }
          return acc;
        }, {}) : formRules;
        for (const propName in rulesToValidate) {
          const rules = rulesToValidate[propName];
          const value = getPropByPath(props.model, propName);
          if (rules && rules.length > 0) {
            for (const rule of rules) {
              if (rule.required && (!isDef(value) || value === "")) {
                errors.push({
                  prop: propName,
                  message: rule.message
                });
                valid = false;
                break;
              }
              if (rule.pattern && !rule.pattern.test(value)) {
                errors.push({
                  prop: propName,
                  message: rule.message
                });
                valid = false;
                break;
              }
              const { validator, ...ruleWithoutValidator } = rule;
              if (validator) {
                const result = validator(value, ruleWithoutValidator);
                if (isPromise(result)) {
                  promises.push(
                    result.then((res) => {
                      if (typeof res === "string") {
                        errors.push({
                          prop: propName,
                          message: res
                        });
                        valid = false;
                      } else if (typeof res === "boolean" && !res) {
                        errors.push({
                          prop: propName,
                          message: rule.message
                        });
                        valid = false;
                      }
                    }).catch((error) => {
                      const message = isDef(error) ? isString(error) ? error : error.message || rule.message : rule.message;
                      errors.push({ prop: propName, message });
                      valid = false;
                    })
                  );
                } else {
                  if (!result) {
                    errors.push({
                      prop: propName,
                      message: rule.message
                    });
                    valid = false;
                  }
                }
              }
            }
          }
        }
        await Promise.all(promises);
        showMessage(errors);
        if (valid) {
          if (propsToValidate.length) {
            propsToValidate.forEach(clearMessage);
          } else {
            clearMessage();
          }
        }
        return {
          valid,
          errors
        };
      }
      function getMergeRules() {
        const mergedRules = deepClone(props.rules);
        const childrenProps = children.map((child) => child.prop);
        Object.keys(mergedRules).forEach((key) => {
          if (!childrenProps.includes(key)) {
            delete mergedRules[key];
          }
        });
        children.forEach((item) => {
          if (isDef(item.prop) && isDef(item.rules) && item.rules.length) {
            if (mergedRules[item.prop]) {
              mergedRules[item.prop] = [...mergedRules[item.prop], ...item.rules];
            } else {
              mergedRules[item.prop] = item.rules;
            }
          }
        });
        return mergedRules;
      }
      function showMessage(errors) {
        const childrenProps = children.map((e) => e.prop).filter(Boolean);
        const messages2 = errors.filter((error) => error.message && childrenProps.includes(error.prop));
        if (messages2.length) {
          messages2.sort((a, b) => {
            return childrenProps.indexOf(a.prop) - childrenProps.indexOf(b.prop);
          });
          if (props.errorType === "toast") {
            showToast(messages2[0].message);
          } else if (props.errorType === "message") {
            messages2.forEach((error) => {
              errorMessages[error.prop] = error.message;
            });
          }
        }
      }
      function clearMessage(prop) {
        if (prop) {
          errorMessages[prop] = "";
        } else {
          Object.keys(errorMessages).forEach((key) => {
            errorMessages[key] = "";
          });
        }
      }
      function reset() {
        clearMessage();
      }
      __expose({ validate, reset });
      const __returned__ = { showToast, props, children, linkChildren, get errorMessages() {
        return errorMessages;
      }, set errorMessages(v) {
        errorMessages = v;
      }, validate, getMergeRules, showMessage, clearMessage, reset, wdToast: __easycom_2$2 };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$F(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: vue.normalizeClass(`wd-form ${_ctx.customClass}`),
        style: vue.normalizeStyle(_ctx.customStyle)
      },
      [
        vue.renderSlot(_ctx.$slots, "default", {}, void 0, true),
        $setup.props.errorType === "toast" ? (vue.openBlock(), vue.createBlock($setup["wdToast"], {
          key: 0,
          selector: "wd-form-toast"
        })) : vue.createCommentVNode("v-if", true)
      ],
      6
      /* CLASS, STYLE */
    );
  }
  const __easycom_7 = /* @__PURE__ */ _export_sfc(_sfc_main$G, [["render", _sfc_render$F], ["__scopeId", "data-v-6504e7d0"], ["__file", "G:/Code/campus/miniProject/uni_modules/wot-design-uni/components/wd-form/wd-form.vue"]]);
  const _sfc_main$F = /* @__PURE__ */ vue.defineComponent({
    __name: "reportArticle",
    setup(__props, { expose: __expose }) {
      __expose();
      const { success: showSuccess } = useToast();
      const model = vue.reactive({
        userId: "",
        articleId: "",
        reason: "",
        images: []
      });
      const form = vue.ref();
      function handleSubmit() {
        form.value.validate().then(({ valid, errors }) => {
          if (valid) {
            showSuccess({
              msg: "校验通过"
            });
          }
        }).catch((error) => {
          formatAppLog("log", "at pages/reportArticle/reportArticle.vue:86", error, "error");
        });
      }
      onLoad((options) => {
        formatAppLog("log", "at pages/reportArticle/reportArticle.vue:91", "接收到的数据：", options);
        model.articleId = options.articleId;
        formatAppLog("log", "at pages/reportArticle/reportArticle.vue:93", "model.articleId：", model.articleId);
        const user = getUserInfo();
        model.userId = user == null ? void 0 : user.id;
      });
      const imageList = vue.ref([]);
      const handleUploadImage = (file) => {
        formatAppLog("log", "at pages/reportArticle/reportArticle.vue:101", "files:", file);
        imageList.value = file;
      };
      onShareAppMessage((res) => {
        formatAppLog("log", "at pages/reportArticle/reportArticle.vue:108", res);
        return {
          title: "青春共享站",
          path: "/pages/index/index",
          imageUrl: "/static/logo.jpg"
          // 分享图片
        };
      });
      onShareTimeline(() => {
        return {
          title: "青春共享站",
          path: "/pages/index/index",
          imageUrl: "/static/logo.jpg"
          // 分享图片
        };
      });
      const __returned__ = { showSuccess, model, form, handleSubmit, imageList, handleUploadImage };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$E(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_wd_notice_bar = resolveEasycom(vue.resolveDynamicComponent("wd-notice-bar"), __easycom_0$4);
    const _component_wd_input = resolveEasycom(vue.resolveDynamicComponent("wd-input"), __easycom_0$2);
    const _component_wd_textarea = resolveEasycom(vue.resolveDynamicComponent("wd-textarea"), __easycom_5$1);
    const _component_wd_upload = resolveEasycom(vue.resolveDynamicComponent("wd-upload"), __easycom_4);
    const _component_wd_cell = resolveEasycom(vue.resolveDynamicComponent("wd-cell"), __easycom_5$2);
    const _component_wd_cell_group = resolveEasycom(vue.resolveDynamicComponent("wd-cell-group"), __easycom_6$1);
    const _component_wd_button = resolveEasycom(vue.resolveDynamicComponent("wd-button"), __easycom_3);
    const _component_wd_form = resolveEasycom(vue.resolveDynamicComponent("wd-form"), __easycom_7);
    const _component_wd_toast = resolveEasycom(vue.resolveDynamicComponent("wd-toast"), __easycom_2$2);
    return vue.openBlock(), vue.createElementBlock("view", null, [
      vue.createVNode(_component_wd_notice_bar, {
        text: "请如实填写举报信息及相关材料。经管理员审核后，将给予答复。若发现用户恶意举报，将封禁该用户的举报功能。",
        prefix: "wifi-error",
        type: "danger"
      }),
      vue.createVNode(_component_wd_form, {
        ref: "form",
        model: $setup.model
      }, {
        default: vue.withCtx(() => [
          vue.createVNode(_component_wd_cell_group, { border: "" }, {
            default: vue.withCtx(() => [
              vue.createVNode(_component_wd_input, {
                label: "用户ID",
                "label-width": "100px",
                prop: "userId",
                disabled: "",
                modelValue: $setup.model.userId,
                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $setup.model.userId = $event)
              }, null, 8, ["modelValue"]),
              vue.createVNode(_component_wd_input, {
                label: "文章ID",
                "label-width": "100px",
                prop: "articleId",
                disabled: "",
                modelValue: $setup.model.articleId,
                "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $setup.model.articleId = $event)
              }, null, 8, ["modelValue"]),
              vue.createVNode(_component_wd_textarea, {
                "label-width": "100px",
                modelValue: $setup.model.reason,
                "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $setup.model.reason = $event),
                placeholder: "请输入原因...",
                label: "原因",
                required: "",
                maxlength: 240,
                clearable: "",
                "show-word-limit": ""
              }, null, 8, ["modelValue"]),
              vue.createVNode(_component_wd_cell, {
                title: "证明材料",
                "title-width": "100px",
                required: ""
              }, {
                default: vue.withCtx(() => [
                  vue.createVNode(_component_wd_upload, {
                    "file-list": $setup.imageList,
                    "onUpdate:fileList": _cache[3] || (_cache[3] = ($event) => $setup.imageList = $event),
                    accept: "image",
                    "image-mode": "aspectFill",
                    action: "http://localhost:8090/api/article/uploadImages",
                    onChange: $setup.handleUploadImage
                  }, null, 8, ["file-list"])
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }),
          vue.createElementVNode("view", { class: "footer" }, [
            vue.createVNode(_component_wd_button, {
              type: "primary",
              size: "large",
              onClick: $setup.handleSubmit,
              block: ""
            }, {
              default: vue.withCtx(() => [
                vue.createTextVNode("提交")
              ]),
              _: 1
              /* STABLE */
            })
          ])
        ]),
        _: 1
        /* STABLE */
      }, 8, ["model"]),
      vue.createVNode(_component_wd_toast)
    ]);
  }
  const PagesReportArticleReportArticle = /* @__PURE__ */ _export_sfc(_sfc_main$F, [["render", _sfc_render$E], ["__scopeId", "data-v-e79f0db3"], ["__file", "G:/Code/campus/miniProject/pages/reportArticle/reportArticle.vue"]]);
  const swiperNavprops = {
    ...baseProps,
    /**
     * 当前轮播在哪一项（下标）
     */
    current: makeNumberProp(0),
    /**
     * 轮播滑动方向，包括横向滑动和纵向滑动两个方向
     */
    direction: makeStringProp("horizontal"),
    /**
     * 小于这个数字不会显示导航器
     */
    minShowNum: makeNumberProp(2),
    /**
     * 指示器位置
     */
    indicatorPosition: makeStringProp("bottom"),
    /**
     * 是否显示两侧的控制按钮
     */
    showControls: makeBooleanProp(false),
    /**
     * 总共的项数
     */
    total: makeNumberProp(0),
    /**
     * 指示器类型，点状(dots)、点条状(dots-bar)、分式(fraction)等
     */
    type: makeStringProp("dots")
  };
  const _sfc_main$E = /* @__PURE__ */ vue.defineComponent({
    __name: "wd-swiper-nav",
    props: swiperNavprops,
    emits: ["change"],
    setup(__props, { expose: __expose, emit: __emit }) {
      __expose();
      const emit = __emit;
      function handleNav(dir) {
        const source = "nav";
        emit("change", { dir, source });
      }
      const __returned__ = { emit, handleNav };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$D(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      vue.Fragment,
      null,
      [
        _ctx.showControls ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "wd-swiper-nav__btn"
        }, [
          vue.createElementVNode("view", {
            class: "wd-swiper-nav__btn--prev",
            onClick: _cache[0] || (_cache[0] = ($event) => $setup.handleNav("prev"))
          }),
          vue.createElementVNode("view", {
            class: "wd-swiper-nav__btn--next",
            onClick: _cache[1] || (_cache[1] = ($event) => $setup.handleNav("next"))
          })
        ])) : vue.createCommentVNode("v-if", true),
        _ctx.total >= _ctx.minShowNum ? (vue.openBlock(), vue.createElementBlock(
          "view",
          {
            key: 1,
            style: vue.normalizeStyle(_ctx.customStyle),
            class: vue.normalizeClass(`wd-swiper-nav wd-swiper-nav--${_ctx.direction} wd-swiper-nav--${_ctx.type} wd-swiper-nav--${_ctx.indicatorPosition} ${_ctx.customClass}`)
          },
          [
            _ctx.type === "dots" || _ctx.type === "dots-bar" ? (vue.openBlock(true), vue.createElementBlock(
              vue.Fragment,
              { key: 0 },
              vue.renderList(_ctx.total, (_, index) => {
                return vue.openBlock(), vue.createElementBlock(
                  "view",
                  {
                    key: index,
                    class: vue.normalizeClass(`wd-swiper-nav__item--${_ctx.type} ${_ctx.current === index ? "is-active" : ""} is-${_ctx.direction}`)
                  },
                  null,
                  2
                  /* CLASS */
                );
              }),
              128
              /* KEYED_FRAGMENT */
            )) : vue.createCommentVNode("v-if", true),
            _ctx.type === "fraction" ? (vue.openBlock(), vue.createElementBlock(
              vue.Fragment,
              { key: 1 },
              [
                vue.createTextVNode(
                  vue.toDisplayString(_ctx.current + 1) + "/" + vue.toDisplayString(_ctx.total),
                  1
                  /* TEXT */
                )
              ],
              64
              /* STABLE_FRAGMENT */
            )) : vue.createCommentVNode("v-if", true)
          ],
          6
          /* CLASS, STYLE */
        )) : vue.createCommentVNode("v-if", true)
      ],
      64
      /* STABLE_FRAGMENT */
    );
  }
  const wdSwiperNav = /* @__PURE__ */ _export_sfc(_sfc_main$E, [["render", _sfc_render$D], ["__scopeId", "data-v-7a2b7438"], ["__file", "G:/Code/campus/miniProject/uni_modules/wot-design-uni/components/wd-swiper-nav/wd-swiper-nav.vue"]]);
  const swiperProps = {
    ...baseProps,
    /**
     * 是否自动播放轮播图
     * 类型：boolean
     * 默认值：true
     */
    autoplay: makeBooleanProp(true),
    /**
     * 当前轮播在哪一项（下标）
     * 类型：number
     * 默认值：0
     */
    current: makeNumberProp(0),
    /**
     * 轮播滑动方向，可选值：'horizontal'（水平）或'vertical'（垂直）
     * 类型：string
     * 默认值：'horizontal'
     */
    direction: makeStringProp("horizontal"),
    /**
     * 同时显示的滑块数量
     * 类型：number
     * 默认值：1
     */
    displayMultipleItems: makeNumberProp(1),
    /**
     * 滑动动画时长，单位为毫秒
     * 类型：number
     * 默认值：300
     */
    duration: makeNumberProp(300),
    /**
     * 指定 swiper 切换缓动动画类型
     * 类型：string
     * 默认值：'default'
     */
    easingFunction: makeStringProp("default"),
    /**
     * 轮播的高度
     * 类型：number 或 string（数字或可转换为数字的字符串）
     * 默认值：'192'
     */
    height: makeNumericProp("192"),
    /**
     * 轮播间隔时间，单位为毫秒
     * 类型：number
     * 默认值：5000
     */
    interval: makeNumberProp(5e3),
    /**
     * 图片列表，可以是一个图片对象数组或字符串数组
     * 类型：array
     * 默认值：空数组
     */
    list: {
      type: Array,
      default: () => []
    },
    /**
     * 是否循环播放轮播图
     * 类型：boolean
     * 默认值：true
     */
    loop: makeBooleanProp(true),
    /**
     * 视频是否循环播放
     * 类型：boolean
     * 默认值：true
     */
    videoLoop: makeBooleanProp(true),
    /**
     * 视频是否静音播放
     * 类型：boolean
     * 默认值：true
     */
    muted: makeBooleanProp(true),
    /**
     * 后边距
     * 类型：number 或 string（数字或可转换为数字的字符串）
     * 默认值：'0'
     */
    nextMargin: makeNumericProp("0"),
    /**
     * 页码信息展示位置，可选值：'left' | 'top-left' | 'top' | 'top-right' | 'bottom-left' | 'bottom' | 'bottom-right' | 'right'
     * 类型：string
     * 默认值：'bottom'
     */
    indicatorPosition: makeStringProp("bottom"),
    /**
     * 前边距
     * 类型：number 或 string（数字或可转换为数字的字符串）
     * 默认值：'0'
     */
    previousMargin: makeNumericProp("0"),
    /**
     * 是否应用边距到第一个、最后一个元素
     * 类型：boolean
     * 默认值：false
     */
    snapToEdge: makeBooleanProp(false),
    /**
     * 指示器全部配置，可以是布尔值或指示器配置对象
     * 类型：boolean 或 object
     * 默认值：true
     */
    indicator: {
      type: [Boolean, Object],
      default: true
    },
    /**
     * 图片裁剪、缩放的模式
     * 类型：string
     * 默认值：'aspectFill'
     */
    imageMode: makeStringProp("aspectFill"),
    /**
     * 选项对象中，value 对应的 key
     */
    valueKey: makeStringProp("value"),
    /**
     * 选项对象中，标题 text 对应的 key
     */
    textKey: makeStringProp("text"),
    /**
     * 视频是否自动播放
     * 类型：boolean
     * 默认值：true
     */
    autoplayVideo: makeBooleanProp(true),
    /**
     * 切换轮播项时是否停止上一个视频的播放
     * 类型：boolean
     * 默认值：true
     */
    stopPreviousVideo: makeBooleanProp(true),
    /**
     * 视频播放时是否停止自动轮播
     * 类型：boolean
     * 默认值：false
     */
    stopAutoplayWhenVideoPlay: makeBooleanProp(false),
    /**
     * 自动以指定滑块的高度为整个容器的高度。当 vertical 为 true 时，默认不调整
     * 仅支付宝小程序支持
     * 类型：'first' | 'current' | 'highest' | 'none'
     * 默认值：false
     */
    adjustHeight: makeStringProp("highest"),
    /**
     * vertical 为 true 时强制使 adjust-height 生效。
     * 仅支付宝小程序支持
     * 类型：boolean
     * 默认值：false
     */
    adjustVerticalHeight: makeBooleanProp(false),
    /**
     * 自定义指示器类名
     * 类型：string
     */
    customIndicatorClass: makeStringProp(""),
    /**
     * 自定义图片类名
     * 类型：string
     */
    customImageClass: makeStringProp(""),
    /**
     * 自定义上一个图片类名
     * 类型：string
     */
    customPrevImageClass: makeStringProp(""),
    /**
     * 自定义下一个图片类名
     * 类型：string
     */
    customNextImageClass: makeStringProp(""),
    /**
     * 自定义swiper子项类名
     * 类型：string
     */
    customItemClass: makeStringProp(""),
    /**
     * 自定义上一个子项类名
     * 类型：string
     */
    customPrevClass: makeStringProp(""),
    /**
     * 自定义下一个子项类名
     * 类型：string
     */
    customNextClass: makeStringProp(""),
    /**
     * 自定义文字标题类名
     * 类型：string
     */
    customTextClass: makeStringProp(""),
    /**
     * 自定义文字标题样式
     * 类型：string
     */
    customTextStyle: makeStringProp("")
  };
  const __default__$e = {
    name: "wd-swiper",
    options: {
      addGlobalClass: true,
      virtualHost: true,
      styleIsolation: "shared"
    }
  };
  const _sfc_main$D = /* @__PURE__ */ vue.defineComponent({
    ...__default__$e,
    props: swiperProps,
    emits: ["click", "change", "animationfinish", "update:current"],
    setup(__props, { expose: __expose, emit: __emit }) {
      __expose();
      const props = __props;
      const emit = __emit;
      const navCurrent = vue.ref(props.current);
      const currentValue = vue.ref(props.current);
      const updateCurrent = (current, force = false) => {
        currentValue.value = current;
        if (force) {
          navCurrent.value = current;
        }
        emit("update:current", current);
      };
      const videoPlaying = vue.ref(false);
      const { proxy } = vue.getCurrentInstance();
      const uid = vue.ref(uuid());
      vue.watch(
        () => props.current,
        (val) => {
          if (val < 0) {
            props.loop ? goToEnd() : goToStart();
          } else if (val >= props.list.length) {
            props.loop ? goToStart() : goToEnd();
          } else {
            navTo(val);
          }
        }
      );
      const swiperIndicator = vue.computed(() => {
        const { list: list2, direction, indicatorPosition, indicator } = props;
        const swiperIndicator2 = {
          current: currentValue.value || 0,
          total: list2.length || 0,
          direction: direction || "horizontal",
          indicatorPosition: indicatorPosition || "bottom"
        };
        if (isObj(indicator)) {
          swiperIndicator2.type = indicator.type || "dots";
          swiperIndicator2.minShowNum = indicator.minShowNum || 2;
          swiperIndicator2.showControls = indicator.showControls || false;
        }
        return swiperIndicator2;
      });
      const getMediaType = (item, type) => {
        const checkType = (url2) => type === "video" ? isVideoUrl(url2) : isImageUrl(url2);
        if (isObj(item)) {
          return item.type && ["video", "image"].includes(item.type) ? item.type === type : checkType(item[props.valueKey]);
        } else {
          return checkType(item);
        }
      };
      const isVideo = (item) => {
        return getMediaType(item, "video");
      };
      const isImage = (item) => {
        return getMediaType(item, "image");
      };
      function navTo(index) {
        if (index === currentValue.value)
          return;
        updateCurrent(index, true);
      }
      function goToStart() {
        navTo(0);
      }
      function goToEnd() {
        navTo(props.list.length - 1);
      }
      function handleVideoPaly() {
        props.stopAutoplayWhenVideoPlay && (videoPlaying.value = true);
      }
      function handleVideoPause() {
        videoPlaying.value = false;
      }
      function isPrev(current, index, list2) {
        return (current - 1 + list2.length) % list2.length === index;
      }
      function isNext(current, index, list2) {
        return (current + 1 + list2.length) % list2.length === index;
      }
      function getCustomItemClass(current, index, list2) {
        let customItemClass = "";
        if (isPrev(current, index, list2)) {
          customItemClass = props.customPrevClass || props.customPrevImageClass;
        }
        if (isNext(current, index, list2)) {
          customItemClass = props.customNextClass || props.customNextImageClass;
        }
        return customItemClass;
      }
      function handleChange(e) {
        const { current, source } = e.detail;
        const previous = currentValue.value;
        emit("change", { current, source });
        if (current !== currentValue.value) {
          const forceUpdate = source === "autoplay" || source === "touch";
          updateCurrent(current, forceUpdate);
        }
        handleVideoChange(previous, current);
      }
      function handleVideoChange(previous, current) {
        handleStopVideoPaly(previous);
        handleStartVideoPaly(current);
      }
      function handleStartVideoPaly(index) {
        if (props.autoplayVideo) {
          const currentItem = props.list[index];
          if (isDef(currentItem) && isVideo(currentItem)) {
            const video = uni.createVideoContext(`video-${index}-${uid.value}`, proxy);
            video.play();
          }
        }
      }
      function handleStopVideoPaly(index) {
        if (props.stopPreviousVideo) {
          const previousItem = props.list[index];
          if (isDef(previousItem) && isVideo(previousItem)) {
            const video = uni.createVideoContext(`video-${index}-${uid.value}`, proxy);
            video.pause();
          }
        } else if (props.stopAutoplayWhenVideoPlay) {
          handleVideoPause();
        }
      }
      function handleAnimationfinish(e) {
        const { current, source } = e.detail;
        if (current !== currentValue.value) {
          const forceUpdate = source === "autoplay" || source === "touch";
          updateCurrent(current, forceUpdate);
        }
        emit("animationfinish", { current, source });
      }
      function handleClick(index, item) {
        emit("click", { index, item });
      }
      function handleIndicatorChange({ dir }) {
        const { list: list2, loop } = props;
        const total = list2.length;
        let nextPos = dir === "next" ? currentValue.value + 1 : currentValue.value - 1;
        if (loop) {
          nextPos = dir === "next" ? (currentValue.value + 1) % total : (currentValue.value - 1 + total) % total;
        } else {
          nextPos = nextPos < 0 || nextPos >= total ? currentValue.value : nextPos;
        }
        if (nextPos === currentValue.value)
          return;
        navTo(nextPos);
      }
      const __returned__ = { props, emit, navCurrent, currentValue, updateCurrent, videoPlaying, proxy, uid, swiperIndicator, getMediaType, isVideo, isImage, navTo, goToStart, goToEnd, handleVideoPaly, handleVideoPause, isPrev, isNext, getCustomItemClass, handleChange, handleVideoChange, handleStartVideoPaly, handleStopVideoPaly, handleAnimationfinish, handleClick, handleIndicatorChange, wdSwiperNav, get addUnit() {
        return addUnit;
      }, get isObj() {
        return isObj;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$C(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: vue.normalizeClass(`wd-swiper ${_ctx.customClass}`),
        style: vue.normalizeStyle(_ctx.customStyle)
      },
      [
        vue.createElementVNode("swiper", {
          "adjust-height": _ctx.adjustHeight,
          "adjust-vertical-height": _ctx.adjustVerticalHeight,
          class: "wd-swiper__track",
          autoplay: _ctx.autoplay && !$setup.videoPlaying,
          current: $setup.navCurrent,
          interval: _ctx.interval,
          duration: _ctx.duration,
          circular: _ctx.loop,
          vertical: _ctx.direction == "vertical",
          "easing-function": _ctx.easingFunction,
          "previous-margin": $setup.addUnit(_ctx.previousMargin),
          "next-margin": $setup.addUnit(_ctx.nextMargin),
          "snap-to-edge": _ctx.snapToEdge,
          "display-multiple-items": _ctx.displayMultipleItems,
          style: vue.normalizeStyle({ height: $setup.addUnit(_ctx.height) }),
          onChange: $setup.handleChange,
          onAnimationfinish: $setup.handleAnimationfinish
        }, [
          (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            null,
            vue.renderList(_ctx.list, (item, index) => {
              return vue.openBlock(), vue.createElementBlock("swiper-item", {
                key: index,
                class: "wd-swiper__item"
              }, [
                $setup.isVideo(item) ? (vue.openBlock(), vue.createElementBlock("video", {
                  key: 0,
                  id: `video-${index}-${$setup.uid}`,
                  style: vue.normalizeStyle({ height: $setup.addUnit(_ctx.height) }),
                  src: $setup.isObj(item) ? item[_ctx.valueKey] : item,
                  poster: $setup.isObj(item) ? item.poster : "",
                  class: vue.normalizeClass(`wd-swiper__video ${_ctx.customItemClass} ${$setup.getCustomItemClass($setup.currentValue, index, _ctx.list)}`),
                  onPlay: $setup.handleVideoPaly,
                  onPause: $setup.handleVideoPause,
                  "enable-progress-gesture": false,
                  loop: _ctx.videoLoop,
                  muted: _ctx.muted,
                  autoplay: _ctx.autoplayVideo,
                  objectFit: "cover",
                  onClick: ($event) => $setup.handleClick(index, item)
                }, null, 46, ["id", "src", "poster", "loop", "muted", "autoplay", "onClick"])) : (vue.openBlock(), vue.createElementBlock("image", {
                  key: 1,
                  src: $setup.isObj(item) ? item[_ctx.valueKey] : item,
                  class: vue.normalizeClass(`wd-swiper__image ${_ctx.customImageClass} ${_ctx.customItemClass} ${$setup.getCustomItemClass($setup.currentValue, index, _ctx.list)}`),
                  style: vue.normalizeStyle({ height: $setup.addUnit(_ctx.height) }),
                  mode: _ctx.imageMode,
                  onClick: ($event) => $setup.handleClick(index, item)
                }, null, 14, ["src", "mode", "onClick"])),
                $setup.isObj(item) && item[_ctx.textKey] ? (vue.openBlock(), vue.createElementBlock(
                  "text",
                  {
                    key: 2,
                    class: vue.normalizeClass(`wd-swiper__text ${_ctx.customTextClass}`),
                    style: vue.normalizeStyle(_ctx.customTextStyle)
                  },
                  vue.toDisplayString(item[_ctx.textKey]),
                  7
                  /* TEXT, CLASS, STYLE */
                )) : vue.createCommentVNode("v-if", true)
              ]);
            }),
            128
            /* KEYED_FRAGMENT */
          ))
        ], 44, ["adjust-height", "adjust-vertical-height", "autoplay", "current", "interval", "duration", "circular", "vertical", "easing-function", "previous-margin", "next-margin", "snap-to-edge", "display-multiple-items"]),
        _ctx.indicator ? (vue.openBlock(), vue.createElementBlock(
          vue.Fragment,
          { key: 0 },
          [
            vue.renderSlot(_ctx.$slots, "indicator", {
              current: $setup.currentValue,
              total: _ctx.list.length
            }, void 0, true),
            !_ctx.$slots.indicator ? (vue.openBlock(), vue.createBlock($setup["wdSwiperNav"], {
              key: 0,
              "custom-class": _ctx.customIndicatorClass,
              type: $setup.swiperIndicator.type,
              current: $setup.swiperIndicator.current,
              total: $setup.swiperIndicator.total,
              direction: $setup.swiperIndicator.direction,
              "indicator-position": $setup.swiperIndicator.indicatorPosition,
              "min-show-num": $setup.swiperIndicator.minShowNum,
              "show-controls": $setup.swiperIndicator.showControls,
              onChange: $setup.handleIndicatorChange
            }, null, 8, ["custom-class", "type", "current", "total", "direction", "indicator-position", "min-show-num", "show-controls"])) : vue.createCommentVNode("v-if", true)
          ],
          64
          /* STABLE_FRAGMENT */
        )) : vue.createCommentVNode("v-if", true)
      ],
      6
      /* CLASS, STYLE */
    );
  }
  const __easycom_1$2 = /* @__PURE__ */ _export_sfc(_sfc_main$D, [["render", _sfc_render$C], ["__scopeId", "data-v-f903ae98"], ["__file", "G:/Code/campus/miniProject/uni_modules/wot-design-uni/components/wd-swiper/wd-swiper.vue"]]);
  const _sfc_main$C = /* @__PURE__ */ vue.defineComponent({
    __name: "activity",
    setup(__props, { expose: __expose }) {
      __expose();
      const current = vue.ref(0);
      const swiperList = vue.ref([
        "https://pic1.imgdb.cn/item/67dac5f488c538a9b5c11481.webp",
        "https://pic1.imgdb.cn/item/67dac5f488c538a9b5c11482.webp",
        "https://pic1.imgdb.cn/item/67dac5f488c538a9b5c11484.webp",
        "https://pic1.imgdb.cn/item/67dac5f488c538a9b5c11483.webp"
      ]);
      const pagination = vue.reactive({
        current: 1,
        pageSize: 5,
        total: 0,
        userId: null,
        hasMore: true,
        // 新增刷新锁防止重复请求
        isRefreshing: false
      });
      const activityList = vue.ref([]);
      function handleClick(e) {
      }
      function onChange(e) {
      }
      const handleActivityClick = (index) => {
        formatAppLog("log", "at pages/activity/activity.vue:138", "点击活动详情");
        const str = JSON.stringify(activityList.value[index]);
        uni.navigateTo({
          url: "/pages/activityDetail/activityDetail?activityInfo=" + str
        });
      };
      const fetchActivityList = async () => {
        const res = await getActivityList(pagination);
        if (res.code == 200) {
          formatAppLog("log", "at pages/activity/activity.vue:149", res);
          activityList.value = res.data.records;
        } else {
          formatAppLog("log", "at pages/activity/activity.vue:152", "获取活动列表失败");
        }
      };
      onShow(() => {
        fetchActivityList();
      });
      onShareAppMessage((res) => {
        formatAppLog("log", "at pages/activity/activity.vue:161", res);
        return {
          title: "青春共享站",
          path: "/pages/index/index",
          imageUrl: "/static/logo.jpg"
          // 分享图片
        };
      });
      onShareTimeline(() => {
        return {
          title: "青春共享站",
          path: "/pages/index/index",
          imageUrl: "/static/logo.jpg"
          // 分享图片
        };
      });
      const __returned__ = { current, swiperList, pagination, activityList, handleClick, onChange, handleActivityClick, fetchActivityList, get getActivityStatus() {
        return getActivityStatus;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$B(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_wd_swiper = resolveEasycom(vue.resolveDynamicComponent("wd-swiper"), __easycom_1$2);
    const _component_wd_img = resolveEasycom(vue.resolveDynamicComponent("wd-img"), WdImg);
    const _component_wd_icon = resolveEasycom(vue.resolveDynamicComponent("wd-icon"), __easycom_0$5);
    return vue.openBlock(), vue.createElementBlock("view", { class: "clubPage" }, [
      vue.createElementVNode("view", { class: "banner" }, [
        vue.createElementVNode("view", { class: "card-swiper" }, [
          vue.createVNode(_component_wd_swiper, {
            list: $setup.swiperList,
            previousMargin: "24px",
            duration: 200,
            nextMargin: "24px",
            imageMode: "scaleToFill",
            indicatorPosition: "bottom",
            autoplay: "",
            current: $setup.current,
            "onUpdate:current": _cache[0] || (_cache[0] = ($event) => $setup.current = $event),
            indicator: { type: "dots-bar" },
            onClick: $setup.handleClick,
            onChange: $setup.onChange
          }, null, 8, ["list", "current"])
        ])
      ]),
      vue.createCommentVNode(" 圆形活动图标区 "),
      vue.createElementVNode("view", { class: "classlist" }, [
        vue.createElementVNode("view", { class: "cardLayout" }, [
          vue.createElementVNode("view", { class: "item" }, [
            vue.createVNode(_component_wd_img, {
              width: 65,
              height: 65,
              round: "",
              src: "https://pic1.imgdb.cn/item/67deadf888c538a9b5c35202.webp"
            }),
            vue.createElementVNode("view", { class: "text" }, " 文艺类 ")
          ]),
          vue.createElementVNode("view", { class: "item" }, [
            vue.createVNode(_component_wd_img, {
              width: 65,
              height: 65,
              round: "",
              src: "https://pic1.imgdb.cn/item/67deadf888c538a9b5c35201.webp"
            }),
            vue.createElementVNode("view", { class: "text" }, " 体育活动类 ")
          ]),
          vue.createElementVNode("view", { class: "item" }, [
            vue.createVNode(_component_wd_img, {
              width: 65,
              height: 65,
              round: "",
              src: "https://pic1.imgdb.cn/item/67deadf888c538a9b5c351ff.webp"
            }),
            vue.createElementVNode("view", { class: "text" }, " 学术思辨类 ")
          ]),
          vue.createElementVNode("view", { class: "item" }, [
            vue.createVNode(_component_wd_img, {
              width: 65,
              height: 65,
              round: "",
              src: "https://pic1.imgdb.cn/item/67deadf888c538a9b5c35200.webp"
            }),
            vue.createElementVNode("view", { class: "text" }, " 社会实践与公益类 ")
          ]),
          vue.createElementVNode("view", { class: "item" }, [
            vue.createVNode(_component_wd_img, {
              width: 65,
              height: 65,
              round: "",
              src: "https://pic1.imgdb.cn/item/67deadf888c538a9b5c351fe.webp"
            }),
            vue.createElementVNode("view", { class: "text" }, " 特定主题 ")
          ])
        ])
      ]),
      vue.createCommentVNode(" 活动表单 "),
      vue.createElementVNode("view", { class: "activecard" }, [
        vue.createElementVNode("view", { class: "title" }, [
          vue.createVNode(_component_wd_icon, {
            name: "heart-filled",
            size: "22px",
            color: "#22a6b3"
          }),
          vue.createElementVNode("view", { class: "text" }, "热门活动")
        ]),
        vue.createElementVNode("view", { class: "activelist" }, [
          vue.createCommentVNode("   活动表单行部分 "),
          (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            null,
            vue.renderList($setup.activityList, (item, index) => {
              return vue.openBlock(), vue.createElementBlock("view", {
                class: "row",
                key: index,
                onClick: ($event) => $setup.handleActivityClick(index)
              }, [
                vue.createElementVNode("view", { class: "left" }, [
                  vue.createElementVNode("view", { class: "Actimage" }, [
                    vue.createElementVNode("image", {
                      src: item.coverPicture,
                      mode: "aspectFill"
                    }, null, 8, ["src"]),
                    vue.createElementVNode("view", { class: "status-tag" }, [
                      vue.createElementVNode(
                        "view",
                        { class: "status-text" },
                        vue.toDisplayString($setup.getActivityStatus(item == null ? void 0 : item.status)),
                        1
                        /* TEXT */
                      ),
                      vue.createElementVNode("view", { class: "status-bg" })
                    ])
                  ])
                ]),
                vue.createElementVNode("view", { class: "right" }, [
                  vue.createElementVNode(
                    "view",
                    { class: "Acttitle" },
                    vue.toDisplayString(item.title),
                    1
                    /* TEXT */
                  ),
                  vue.createElementVNode("view", { class: "Acttime" }, [
                    vue.createVNode(_component_wd_icon, { name: "time" }),
                    vue.createElementVNode(
                      "view",
                      { class: "date" },
                      vue.toDisplayString(item.endTime),
                      1
                      /* TEXT */
                    )
                  ]),
                  vue.createElementVNode("view", { class: "address" }, [
                    vue.createVNode(_component_wd_icon, { name: "location" }),
                    vue.createTextVNode(
                      " " + vue.toDisplayString(item.position),
                      1
                      /* TEXT */
                    )
                  ])
                ])
              ], 8, ["onClick"]);
            }),
            128
            /* KEYED_FRAGMENT */
          ))
        ])
      ])
    ]);
  }
  const PagesActivityActivity = /* @__PURE__ */ _export_sfc(_sfc_main$C, [["render", _sfc_render$B], ["__scopeId", "data-v-da48f91d"], ["__file", "G:/Code/campus/miniProject/pages/activity/activity.vue"]]);
  function getClubList(data) {
    return request({
      url: "/api/club/clubList/page",
      method: "POST",
      data
    });
  }
  function getClubDetail(id) {
    return request({
      url: `/api/club/${id}`,
      method: "POST"
    });
  }
  const _sfc_main$B = /* @__PURE__ */ vue.defineComponent({
    __name: "club",
    setup(__props, { expose: __expose }) {
      __expose();
      const toast = useToast();
      const current = vue.ref(0);
      const swiperList = vue.ref([
        "https://pic1.imgdb.cn/item/67f61a7b88c538a9b5c7634d.webp"
      ]);
      const loading = vue.ref(false);
      const clubList = vue.ref([]);
      const fetchClubList = async () => {
        try {
          loading.value = true;
          const params = {
            current: 1,
            pageSize: 6
            // 显示6个精选社团
          };
          const res = await getClubList(params);
          if (res.code == 200) {
            clubList.value = res.data.records;
          } else {
            toast.error(res.message || "获取社团列表失败");
          }
        } catch (error) {
          formatAppLog("error", "at pages/club/club.vue:117", "获取社团列表错误:", error);
          toast.error("获取社团列表失败");
        } finally {
          loading.value = false;
        }
      };
      const handleClubClick = (club) => {
        uni.navigateTo({
          url: `/pages/clubDetail/clubDetail?id=${club.id}`
        });
      };
      function handleClick(e) {
      }
      function onChange(e) {
      }
      vue.onMounted(() => {
        fetchClubList();
      });
      onShareAppMessage((res) => {
        formatAppLog("log", "at pages/club/club.vue:148", res);
        return {
          title: "青春共享站",
          path: "/pages/index/index",
          imageUrl: "/static/logo.jpg"
          // 分享图片
        };
      });
      onShareTimeline(() => {
        return {
          title: "青春共享站",
          path: "/pages/index/index",
          imageUrl: "/static/logo.jpg"
          // 分享图片
        };
      });
      const __returned__ = { toast, current, swiperList, loading, clubList, fetchClubList, handleClubClick, handleClick, onChange };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$A(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_wd_swiper = resolveEasycom(vue.resolveDynamicComponent("wd-swiper"), __easycom_1$2);
    const _component_wd_img = resolveEasycom(vue.resolveDynamicComponent("wd-img"), WdImg);
    const _component_wd_icon = resolveEasycom(vue.resolveDynamicComponent("wd-icon"), __easycom_0$5);
    const _component_wd_loading = resolveEasycom(vue.resolveDynamicComponent("wd-loading"), __easycom_0$3);
    const _component_wd_toast = resolveEasycom(vue.resolveDynamicComponent("wd-toast"), __easycom_2$2);
    return vue.openBlock(), vue.createElementBlock("view", { class: "clubPage" }, [
      vue.createCommentVNode(" 顶部轮播图 "),
      vue.createElementVNode("view", { class: "banner" }, [
        vue.createElementVNode("view", { class: "card-swiper" }, [
          vue.createVNode(_component_wd_swiper, {
            list: $setup.swiperList,
            direction: "vertical",
            imageMode: "scaleToFill",
            indicatorPosition: "right",
            autoplay: "",
            current: $setup.current,
            "onUpdate:current": _cache[0] || (_cache[0] = ($event) => $setup.current = $event),
            indicator: { type: "dots-bar" },
            onClick: $setup.handleClick,
            onChange: $setup.onChange
          }, null, 8, ["list", "current"])
        ])
      ]),
      vue.createCommentVNode(" 圆形社团图标区 "),
      vue.createElementVNode("view", { class: "classlist" }, [
        vue.createElementVNode("view", { class: "cardLayout" }, [
          vue.createElementVNode("view", { class: "item" }, [
            vue.createVNode(_component_wd_img, {
              width: 65,
              height: 65,
              round: "",
              src: "https://pic1.imgdb.cn/item/67ea951d0ba3d5a1d7e83fd7.png"
            }),
            vue.createElementVNode("view", { class: "text" }, " 体育类社团 ")
          ]),
          vue.createElementVNode("view", { class: "item" }, [
            vue.createVNode(_component_wd_img, {
              width: 65,
              height: 65,
              round: "",
              src: "https://pic1.imgdb.cn/item/67ea951d0ba3d5a1d7e83fda.png"
            }),
            vue.createElementVNode("view", { class: "text" }, " 服务类社团 ")
          ]),
          vue.createElementVNode("view", { class: "item" }, [
            vue.createVNode(_component_wd_img, {
              width: 65,
              height: 65,
              round: "",
              src: "https://pic1.imgdb.cn/item/67ea951d0ba3d5a1d7e83fd8.png"
            }),
            vue.createElementVNode("view", { class: "text" }, " 学术类社团 ")
          ]),
          vue.createElementVNode("view", { class: "item" }, [
            vue.createVNode(_component_wd_img, {
              width: 65,
              height: 65,
              round: "",
              src: "https://pic1.imgdb.cn/item/67ea951d0ba3d5a1d7e83fd9.png"
            }),
            vue.createElementVNode("view", { class: "text" }, " 艺术类社团 ")
          ])
        ])
      ]),
      vue.createCommentVNode(" 社团宣传图部分 "),
      vue.createElementVNode("view", { class: "orgcard" }, [
        vue.createCommentVNode(" 精选社团标题 "),
        vue.createElementVNode("view", { class: "title" }, [
          vue.createVNode(_component_wd_icon, {
            name: "star-on",
            size: "22px",
            color: "#22a6b3"
          }),
          vue.createElementVNode("view", { class: "text" }, "精选社团")
        ]),
        vue.createCommentVNode(" 社团宣传图卡片区 "),
        vue.createElementVNode("view", { class: "orgcardlayout" }, [
          (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            null,
            vue.renderList($setup.clubList, (club) => {
              return vue.openBlock(), vue.createElementBlock("view", {
                class: "orgcarditem",
                key: club.id,
                onClick: ($event) => $setup.handleClubClick(club)
              }, [
                vue.createElementVNode("view", { class: "club-card" }, [
                  club.cover ? (vue.openBlock(), vue.createElementBlock("image", {
                    key: 0,
                    src: club.cover,
                    mode: "aspectFill",
                    class: "club-image"
                  }, null, 8, ["src"])) : vue.createCommentVNode("v-if", true),
                  vue.createElementVNode("view", { class: "club-info" }, [
                    vue.createElementVNode(
                      "view",
                      { class: "club-name" },
                      vue.toDisplayString(club.name),
                      1
                      /* TEXT */
                    ),
                    vue.createElementVNode(
                      "view",
                      { class: "club-profile" },
                      vue.toDisplayString(club.profile),
                      1
                      /* TEXT */
                    )
                  ])
                ])
              ], 8, ["onClick"]);
            }),
            128
            /* KEYED_FRAGMENT */
          ))
        ])
      ]),
      vue.createCommentVNode(" 添加加载状态 "),
      $setup.loading ? (vue.openBlock(), vue.createBlock(_component_wd_loading, { key: 0 })) : vue.createCommentVNode("v-if", true),
      vue.createCommentVNode(" 添加提示组件 "),
      vue.createVNode(_component_wd_toast)
    ]);
  }
  const PagesClubClub = /* @__PURE__ */ _export_sfc(_sfc_main$B, [["render", _sfc_render$A], ["__scopeId", "data-v-3556ad49"], ["__file", "G:/Code/campus/miniProject/pages/club/club.vue"]]);
  const TABS_KEY = Symbol("wd-tabs");
  const tabsProps = {
    ...baseProps,
    /**
     * 绑定值
     */
    modelValue: makeNumericProp(0),
    /**
     * 标签数超过阈值可滑动
     */
    slidableNum: makeNumberProp(6),
    /**
     * 标签数超过阈值显示导航地图
     */
    mapNum: makeNumberProp(10),
    /**
     * 导航地图的标题
     */
    mapTitle: String,
    /**
     * 粘性布局
     */
    sticky: makeBooleanProp(false),
    /**
     * 粘性布局吸顶位置
     */
    offsetTop: makeNumberProp(0),
    /**
     * 开启手势滑动
     */
    swipeable: makeBooleanProp(false),
    /**
     * 自动调整底部条宽度，设置了 lineWidth 后无效
     */
    autoLineWidth: makeBooleanProp(false),
    /**
     * 底部条宽度，单位像素
     */
    lineWidth: numericProp,
    /**
     * 底部条高度，单位像素
     */
    lineHeight: numericProp,
    /**
     * 颜色
     */
    color: makeStringProp(""),
    /**
     * 非活动状态颜色
     */
    inactiveColor: makeStringProp(""),
    /**
     * 是否开启切换标签内容时的过渡动画
     */
    animated: makeBooleanProp(false),
    /**
     * 切换动画过渡时间，单位毫秒
     */
    duration: makeNumberProp(300),
    /**
     * 是否开启滚动导航
     * 可选值：'auto' | 'always'
     * @default auto
     */
    slidable: makeStringProp("auto")
  };
  const tabProps = {
    ...baseProps,
    /**
     * 唯一标识符
     */
    name: numericProp,
    /**
     * tab的标题
     */
    title: String,
    /**
     *  是否禁用，无法点击
     */
    disabled: makeBooleanProp(false),
    /**
     * 是否懒加载，切换到该tab时才加载内容
     * @default true
     */
    lazy: makeBooleanProp(true),
    /**
     * 徽标属性，透传给 Badge 组件
     */
    badgeProps: Object
  };
  const __default__$d = {
    name: "wd-tab",
    options: {
      addGlobalClass: true,
      virtualHost: true,
      styleIsolation: "shared"
    }
  };
  const _sfc_main$A = /* @__PURE__ */ vue.defineComponent({
    ...__default__$d,
    props: tabProps,
    setup(__props, { expose: __expose }) {
      __expose();
      const props = __props;
      const { proxy } = vue.getCurrentInstance();
      const { parent: tabs, index } = useParent(TABS_KEY);
      const active = vue.computed(() => {
        return isDef(tabs) ? tabs.state.activeIndex === index.value : false;
      });
      const painted = vue.ref(active.value);
      const tabBodyStyle = vue.computed(() => {
        const style = {};
        if (!active.value && (!isDef(tabs) || !tabs.props.animated)) {
          style.display = "none";
        }
        return objToStyle(style);
      });
      const shouldBeRender = vue.computed(() => !props.lazy || painted.value || active.value);
      vue.watch(active, (val) => {
        if (val)
          painted.value = true;
      });
      vue.watch(
        () => props.name,
        (newValue) => {
          if (isDef(newValue) && !isNumber(newValue) && !isString(newValue)) {
            formatAppLog("error", "at uni_modules/wot-design-uni/components/wd-tab/wd-tab.vue:56", "[wot design] error(wd-tab): the type of name should be number or string");
            return;
          }
          if (tabs) {
            checkName(proxy);
          }
        },
        {
          deep: true,
          immediate: true
        }
      );
      function checkName(self2) {
        const { name: myName } = props;
        if (myName === void 0 || myName === null || myName === "") {
          return;
        }
        tabs && tabs.children.forEach((child) => {
          if (child.$.uid !== self2.$.uid && child.name === myName) {
            formatAppLog("error", "at uni_modules/wot-design-uni/components/wd-tab/wd-tab.vue:81", `The tab's bound value: ${myName} has been used`);
          }
        });
      }
      const __returned__ = { props, proxy, tabs, index, active, painted, tabBodyStyle, shouldBeRender, checkName };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$z(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: vue.normalizeClass(`wd-tab ${_ctx.customClass}`),
        style: vue.normalizeStyle(_ctx.customStyle)
      },
      [
        $setup.shouldBeRender ? (vue.openBlock(), vue.createElementBlock(
          "view",
          {
            key: 0,
            class: vue.normalizeClass(["wd-tab__body", { "wd-tab__body--inactive": !$setup.active }]),
            style: vue.normalizeStyle($setup.tabBodyStyle)
          },
          [
            vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
          ],
          6
          /* CLASS, STYLE */
        )) : vue.createCommentVNode("v-if", true)
      ],
      6
      /* CLASS, STYLE */
    );
  }
  const __easycom_0$1 = /* @__PURE__ */ _export_sfc(_sfc_main$A, [["render", _sfc_render$z], ["__scopeId", "data-v-0ac60957"], ["__file", "G:/Code/campus/miniProject/uni_modules/wot-design-uni/components/wd-tab/wd-tab.vue"]]);
  const badgeProps = {
    ...baseProps,
    /**
     * 显示值
     */
    modelValue: numericProp,
    /** 当数值为 0 时，是否展示徽标 */
    showZero: makeBooleanProp(false),
    bgColor: String,
    /**
     * 最大值，超过最大值会显示 '{max}+'，要求 value 是 Number 类型
     */
    max: Number,
    /**
     * 是否为红色点状标注
     */
    isDot: Boolean,
    /**
     * 是否隐藏 badge
     */
    hidden: Boolean,
    /**
     * badge类型，可选值primary / success / warning / danger / info
     */
    type: makeStringProp(void 0),
    /**
     * 为正时，角标向下偏移对应的像素
     */
    top: numericProp,
    /**
     * 为正时，角标向左偏移对应的像素
     */
    right: numericProp
  };
  const __default__$c = {
    name: "wd-badge",
    options: {
      addGlobalClass: true,
      virtualHost: true,
      styleIsolation: "shared"
    }
  };
  const _sfc_main$z = /* @__PURE__ */ vue.defineComponent({
    ...__default__$c,
    props: badgeProps,
    setup(__props, { expose: __expose }) {
      __expose();
      const props = __props;
      const content = vue.computed(() => {
        const { modelValue, max, isDot } = props;
        if (isDot)
          return "";
        let value = modelValue;
        if (value && max && isNumber(value) && !Number.isNaN(value) && !Number.isNaN(max)) {
          value = max < value ? `${max}+` : value;
        }
        return value;
      });
      const contentStyle = vue.computed(() => {
        const style = {};
        if (isDef(props.bgColor)) {
          style.backgroundColor = props.bgColor;
        }
        if (isDef(props.top)) {
          style.top = addUnit(props.top);
        }
        if (isDef(props.right)) {
          style.right = addUnit(props.right);
        }
        return objToStyle(style);
      });
      const shouldShowBadge = vue.computed(() => !props.hidden && (content.value || content.value === 0 && props.showZero || props.isDot));
      const __returned__ = { props, content, contentStyle, shouldShowBadge };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$y(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: vue.normalizeClass(["wd-badge", _ctx.customClass]),
        style: vue.normalizeStyle(_ctx.customStyle)
      },
      [
        vue.renderSlot(_ctx.$slots, "default", {}, void 0, true),
        $setup.shouldShowBadge ? (vue.openBlock(), vue.createElementBlock(
          "view",
          {
            key: 0,
            class: vue.normalizeClass(["wd-badge__content", "is-fixed", _ctx.type ? "wd-badge__content--" + _ctx.type : "", _ctx.isDot ? "is-dot" : ""]),
            style: vue.normalizeStyle($setup.contentStyle)
          },
          vue.toDisplayString($setup.content),
          7
          /* TEXT, CLASS, STYLE */
        )) : vue.createCommentVNode("v-if", true)
      ],
      6
      /* CLASS, STYLE */
    );
  }
  const __easycom_0 = /* @__PURE__ */ _export_sfc(_sfc_main$z, [["render", _sfc_render$y], ["__scopeId", "data-v-6ea9b0eb"], ["__file", "G:/Code/campus/miniProject/uni_modules/wot-design-uni/components/wd-badge/wd-badge.vue"]]);
  const resizeProps = {
    ...baseProps,
    customContainerClass: makeStringProp("")
  };
  const __default__$b = {
    name: "wd-resize",
    options: {
      virtualHost: true,
      addGlobalClass: true,
      styleIsolation: "shared"
    }
  };
  const _sfc_main$y = /* @__PURE__ */ vue.defineComponent({
    ...__default__$b,
    props: resizeProps,
    emits: ["resize"],
    setup(__props, { expose: __expose, emit: __emit }) {
      __expose();
      const props = __props;
      const emit = __emit;
      const expandScrollTop = vue.ref(0);
      const shrinkScrollTop = vue.ref(0);
      const expandScrollLeft = vue.ref(0);
      const shrinkScrollLeft = vue.ref(0);
      const height = vue.ref(0);
      const width = vue.ref(0);
      const scrollEventCount = vue.ref(0);
      const rootStyle = vue.computed(() => {
        const style = {
          width: addUnit(width.value),
          height: addUnit(height.value)
        };
        return `${objToStyle(style)};${props.customStyle}`;
      });
      let onScrollHandler = () => {
      };
      const { proxy } = vue.getCurrentInstance();
      const resizeId = vue.ref(`resize${uuid()}`);
      vue.onMounted(() => {
        const query = uni.createSelectorQuery().in(proxy).select(`#${resizeId.value}`).boundingClientRect();
        query.exec(([res]) => {
          let lastHeight = res.height;
          let lastWidth = res.width;
          height.value = lastHeight;
          width.value = lastWidth;
          onScrollHandler = () => {
            const query2 = uni.createSelectorQuery().in(proxy).select(`#${resizeId.value}`).boundingClientRect();
            query2.exec(([res2]) => {
              if (scrollEventCount.value++ === 0) {
                const result = {};
                ["bottom", "top", "left", "right", "height", "width"].forEach((propName) => {
                  result[propName] = res2[propName];
                });
                emit("resize", result);
              }
              if (scrollEventCount.value < 3)
                return;
              const newHeight = res2.height;
              const newWidth = res2.width;
              height.value = newHeight;
              width.value = newWidth;
              const emitStack = [];
              if (newHeight !== lastHeight) {
                lastHeight = newHeight;
                emitStack.push(1);
              }
              if (newWidth !== lastWidth) {
                lastWidth = newWidth;
                emitStack.push(1);
              }
              if (emitStack.length !== 0) {
                const result = {};
                ["bottom", "top", "left", "right", "height", "width"].forEach((propName) => {
                  result[propName] = res2[propName];
                });
                emit("resize", result);
              }
              scrollToBottom({
                lastWidth,
                lastHeight
              });
            });
          };
          scrollToBottom({
            lastWidth,
            lastHeight
          });
        });
      });
      function scrollToBottom({ lastWidth, lastHeight }) {
        expandScrollTop.value = 1e5 + lastHeight;
        shrinkScrollTop.value = 3 * height.value + lastHeight;
        expandScrollLeft.value = 1e5 + lastWidth;
        shrinkScrollLeft.value = 3 * width.value + lastWidth;
      }
      const __returned__ = { props, emit, expandScrollTop, shrinkScrollTop, expandScrollLeft, shrinkScrollLeft, height, width, scrollEventCount, rootStyle, get onScrollHandler() {
        return onScrollHandler;
      }, set onScrollHandler(v) {
        onScrollHandler = v;
      }, proxy, resizeId, scrollToBottom };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$x(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: vue.normalizeClass(`wd-resize ${_ctx.customClass}`),
        style: vue.normalizeStyle($setup.rootStyle)
      },
      [
        vue.createCommentVNode("插槽需要脱离父容器文档流，防止父容器固宽固高，进而导致插槽大小被被父容器限制"),
        vue.createElementVNode("view", {
          id: $setup.resizeId,
          class: vue.normalizeClass(`wd-resize__container ${_ctx.customContainerClass}`)
        }, [
          vue.createCommentVNode("被监听的插槽"),
          vue.renderSlot(_ctx.$slots, "default", {}, void 0, true),
          vue.createCommentVNode("监听插槽变大"),
          vue.createElementVNode("scroll-view", {
            class: "wd-resize__wrapper",
            "scroll-y": true,
            "scroll-top": $setup.expandScrollTop,
            "scroll-x": true,
            "scroll-left": $setup.expandScrollLeft,
            onScroll: _cache[0] || (_cache[0] = (...args) => $setup.onScrollHandler && $setup.onScrollHandler(...args))
          }, [
            vue.createElementVNode("view", {
              class: "wd-resize__wrapper--placeholder",
              style: { "height": "100000px", "width": "100000px" }
            })
          ], 40, ["scroll-top", "scroll-left"]),
          vue.createCommentVNode("监听插槽变小"),
          vue.createElementVNode("scroll-view", {
            class: "wd-resize__wrapper",
            "scroll-y": true,
            "scroll-top": $setup.shrinkScrollTop,
            "scroll-x": true,
            "scroll-left": $setup.shrinkScrollLeft,
            onScroll: _cache[1] || (_cache[1] = (...args) => $setup.onScrollHandler && $setup.onScrollHandler(...args))
          }, [
            vue.createElementVNode("view", {
              class: "wd-resize__wrapper--placeholder",
              style: { "height": "250%", "width": "250%" }
            })
          ], 40, ["scroll-top", "scroll-left"])
        ], 10, ["id"])
      ],
      6
      /* CLASS, STYLE */
    );
  }
  const wdResize = /* @__PURE__ */ _export_sfc(_sfc_main$y, [["render", _sfc_render$x], ["__scopeId", "data-v-3d3c1eae"], ["__file", "G:/Code/campus/miniProject/uni_modules/wot-design-uni/components/wd-resize/wd-resize.vue"]]);
  const stickyProps = {
    ...baseProps,
    /**
     * 层级
     */
    zIndex: makeNumberProp(1),
    /**
     * 吸顶距离
     */
    offsetTop: makeNumberProp(0)
  };
  const STICKY_BOX_KEY = Symbol("wd-sticky-box");
  const __default__$a = {
    name: "wd-sticky",
    options: {
      addGlobalClass: true,
      virtualHost: true,
      styleIsolation: "shared"
    }
  };
  const _sfc_main$x = /* @__PURE__ */ vue.defineComponent({
    ...__default__$a,
    props: stickyProps,
    setup(__props, { expose: __expose }) {
      const props = __props;
      const styckyId = vue.ref(`wd-sticky${uuid()}`);
      const observerList = vue.ref([]);
      const stickyState = vue.reactive({
        position: "absolute",
        boxLeaved: false,
        top: 0,
        height: 0,
        width: 0,
        state: ""
      });
      const { parent: stickyBox } = useParent(STICKY_BOX_KEY);
      const { proxy } = vue.getCurrentInstance();
      const rootStyle = vue.computed(() => {
        const style = {
          "z-index": props.zIndex,
          height: addUnit(stickyState.height),
          width: addUnit(stickyState.width)
        };
        if (!stickyState.boxLeaved) {
          style["position"] = "relative";
        }
        return `${objToStyle(style)};${props.customStyle}`;
      });
      const stickyStyle = vue.computed(() => {
        const style = {
          "z-index": props.zIndex,
          height: addUnit(stickyState.height),
          width: addUnit(stickyState.width)
        };
        if (!stickyState.boxLeaved) {
          style["position"] = "relative";
        }
        return `${objToStyle(style)};`;
      });
      const containerStyle = vue.computed(() => {
        const style = {
          position: stickyState.position,
          top: addUnit(stickyState.top)
        };
        return objToStyle(style);
      });
      const innerOffsetTop = vue.computed(() => {
        let top = 0;
        return top + props.offsetTop;
      });
      function clearObserver() {
        while (observerList.value.length !== 0) {
          observerList.value.pop().disconnect();
        }
      }
      function createObserver() {
        const observer = uni.createIntersectionObserver(proxy, { thresholds: [0, 0.5] });
        observerList.value.push(observer);
        return observer;
      }
      async function handleResize(detail) {
        stickyState.width = detail.width;
        stickyState.height = detail.height;
        await pause();
        observerContentScroll();
        if (!stickyBox || !stickyBox.observerForChild)
          return;
        stickyBox.observerForChild(proxy);
      }
      function observerContentScroll() {
        if (stickyState.height === 0 && stickyState.width === 0)
          return;
        const offset = innerOffsetTop.value + stickyState.height;
        clearObserver();
        createObserver().relativeToViewport({
          top: -offset
        }).observe(`#${styckyId.value}`, (result) => {
          handleRelativeTo(result);
        });
        getRect(`#${styckyId.value}`, false, proxy).then((res) => {
          if (Number(res.bottom) <= offset)
            handleRelativeTo({ boundingClientRect: res });
        });
      }
      function handleRelativeTo({ boundingClientRect }) {
        if (stickyBox && stickyState.height >= stickyBox.boxStyle.height) {
          stickyState.position = "absolute";
          stickyState.top = 0;
          return;
        }
        let isStycky = boundingClientRect.top <= innerOffsetTop.value;
        isStycky = boundingClientRect.top < innerOffsetTop.value;
        if (isStycky) {
          stickyState.state = "sticky";
          stickyState.boxLeaved = false;
          stickyState.position = "fixed";
          stickyState.top = innerOffsetTop.value;
        } else {
          stickyState.state = "normal";
          stickyState.boxLeaved = false;
          stickyState.position = "absolute";
          stickyState.top = 0;
        }
      }
      function setPosition(boxLeaved, position, top) {
        stickyState.boxLeaved = boxLeaved;
        stickyState.position = position;
        stickyState.top = top;
      }
      __expose({
        setPosition,
        stickyState,
        offsetTop: props.offsetTop
      });
      const __returned__ = { props, styckyId, observerList, stickyState, stickyBox, proxy, rootStyle, stickyStyle, containerStyle, innerOffsetTop, clearObserver, createObserver, handleResize, observerContentScroll, handleRelativeTo, setPosition, wdResize };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$w(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        style: vue.normalizeStyle(`${$setup.rootStyle};display: inline-block;`)
      },
      [
        vue.createElementVNode("view", {
          class: vue.normalizeClass(`wd-sticky ${_ctx.customClass}`),
          style: vue.normalizeStyle($setup.stickyStyle),
          id: $setup.styckyId
        }, [
          vue.createElementVNode(
            "view",
            {
              class: "wd-sticky__container",
              style: vue.normalizeStyle($setup.containerStyle)
            },
            [
              vue.createVNode($setup["wdResize"], {
                onResize: $setup.handleResize,
                "custom-style": "display: inline-block;"
              }, {
                default: vue.withCtx(() => [
                  vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
                ]),
                _: 3
                /* FORWARDED */
              })
            ],
            4
            /* STYLE */
          )
        ], 14, ["id"])
      ],
      4
      /* STYLE */
    );
  }
  const wdSticky = /* @__PURE__ */ _export_sfc(_sfc_main$x, [["render", _sfc_render$w], ["__scopeId", "data-v-2722b5fd"], ["__file", "G:/Code/campus/miniProject/uni_modules/wot-design-uni/components/wd-sticky/wd-sticky.vue"]]);
  const __default__$9 = {
    name: "wd-sticky-box",
    options: {
      addGlobalClass: true,
      // virtualHost: true,
      styleIsolation: "shared"
    }
  };
  const _sfc_main$w = /* @__PURE__ */ vue.defineComponent({
    ...__default__$9,
    props: baseProps,
    setup(__props, { expose: __expose }) {
      __expose();
      const props = __props;
      const styckyBoxId = vue.ref(`wd-sticky-box${uuid()}`);
      const observerMap = vue.ref(/* @__PURE__ */ new Map());
      const boxStyle = vue.reactive({
        height: 0,
        width: 0
      });
      const { proxy } = vue.getCurrentInstance();
      const { children: stickyList, linkChildren } = useChildren(STICKY_BOX_KEY);
      linkChildren({
        boxStyle,
        observerForChild
      });
      vue.onBeforeMount(() => {
        observerMap.value = /* @__PURE__ */ new Map();
      });
      function handleResize(detail) {
        boxStyle.width = detail.width;
        boxStyle.height = detail.height;
        const temp = observerMap.value;
        observerMap.value = /* @__PURE__ */ new Map();
        for (const [uid] of temp) {
          const child = stickyList.find((sticky) => {
            return sticky.$.uid === uid;
          });
          observerForChild(child);
        }
        temp.forEach((observer) => {
          observer.disconnect();
        });
        temp.clear();
      }
      function deleteObserver(child) {
        const observer = observerMap.value.get(child.$.uid);
        if (!observer)
          return;
        observer.disconnect();
        observerMap.value.delete(child.$.uid);
      }
      function createObserver(child) {
        const observer = uni.createIntersectionObserver(proxy, { thresholds: [0, 0.5] });
        observerMap.value.set(child.$.uid, observer);
        return observer;
      }
      function observerForChild(child) {
        deleteObserver(child);
        const observer = createObserver(child);
        const exposed = child.$.exposed;
        let offset = exposed.stickyState.height + exposed.offsetTop;
        if (boxStyle.height <= exposed.stickyState.height) {
          exposed.setPosition(false, "absolute", 0);
        }
        observer.relativeToViewport({ top: -offset }).observe(`#${styckyBoxId.value}`, (result) => {
          handleRelativeTo(exposed, result);
        });
        getRect(`#${styckyBoxId.value}`, false, proxy).then((res) => {
          if (Number(res.bottom) <= offset)
            handleRelativeTo(exposed, { boundingClientRect: res });
        }).catch((res) => {
          formatAppLog("log", "at uni_modules/wot-design-uni/components/wd-sticky-box/wd-sticky-box.vue:125", res);
        });
      }
      function handleRelativeTo(exposed, { boundingClientRect }) {
        let childOffsetTop = exposed.offsetTop;
        const offset = exposed.stickyState.height + childOffsetTop;
        let isAbsolute = boundingClientRect.bottom <= offset;
        isAbsolute = boundingClientRect.bottom < offset;
        if (isAbsolute) {
          exposed.setPosition(true, "absolute", boundingClientRect.height - exposed.stickyState.height);
        } else if (boundingClientRect.top <= offset && !isAbsolute) {
          if (exposed.stickyState.state === "normal")
            return;
          exposed.setPosition(false, "fixed", childOffsetTop);
        }
      }
      const __returned__ = { props, styckyBoxId, observerMap, boxStyle, proxy, stickyList, linkChildren, handleResize, deleteObserver, createObserver, observerForChild, handleRelativeTo, wdResize };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$v(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { style: { "position": "relative" } }, [
      vue.createElementVNode("view", {
        class: vue.normalizeClass(`wd-sticky-box ${$setup.props.customClass}`),
        style: vue.normalizeStyle(_ctx.customStyle),
        id: $setup.styckyBoxId
      }, [
        vue.createVNode($setup["wdResize"], { onResize: $setup.handleResize }, {
          default: vue.withCtx(() => [
            vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
          ]),
          _: 3
          /* FORWARDED */
        })
      ], 14, ["id"])
    ]);
  }
  const wdStickyBox = /* @__PURE__ */ _export_sfc(_sfc_main$w, [["render", _sfc_render$v], ["__scopeId", "data-v-0667b36f"], ["__file", "G:/Code/campus/miniProject/uni_modules/wot-design-uni/components/wd-sticky-box/wd-sticky-box.vue"]]);
  function useTouch() {
    const direction = vue.ref("");
    const deltaX = vue.ref(0);
    const deltaY = vue.ref(0);
    const offsetX = vue.ref(0);
    const offsetY = vue.ref(0);
    const startX = vue.ref(0);
    const startY = vue.ref(0);
    function touchStart(event) {
      const touch = event.touches[0];
      direction.value = "";
      deltaX.value = 0;
      deltaY.value = 0;
      offsetX.value = 0;
      offsetY.value = 0;
      startX.value = touch.clientX;
      startY.value = touch.clientY;
    }
    function touchMove(event) {
      const touch = event.touches[0];
      deltaX.value = touch.clientX - startX.value;
      deltaY.value = touch.clientY - startY.value;
      offsetX.value = Math.abs(deltaX.value);
      offsetY.value = Math.abs(deltaY.value);
      direction.value = offsetX.value > offsetY.value ? "horizontal" : offsetX.value < offsetY.value ? "vertical" : "";
    }
    return {
      touchStart,
      touchMove,
      direction,
      deltaX,
      deltaY,
      offsetX,
      offsetY,
      startX,
      startY
    };
  }
  const __default__$8 = {
    name: "wd-tabs",
    options: {
      addGlobalClass: true,
      virtualHost: true,
      styleIsolation: "shared"
    }
  };
  const _sfc_main$v = /* @__PURE__ */ vue.defineComponent({
    ...__default__$8,
    props: tabsProps,
    emits: ["change", "disabled", "click", "update:modelValue"],
    setup(__props, { expose: __expose, emit: __emit }) {
      const $item = ".wd-tabs__nav-item";
      const $itemText = ".wd-tabs__nav-item-text";
      const $container = ".wd-tabs__nav-container";
      const props = __props;
      const emit = __emit;
      const { translate } = useTranslate("tabs");
      const state = vue.reactive({
        activeIndex: 0,
        // 选中值的索引，默认第一个
        lineStyle: "display:none;",
        // 激活项边框线样式
        useInnerLine: false,
        // 是否使用内部激活项边框线，当外部激活下划线未成功渲染时显示内部定位的
        inited: false,
        // 是否初始化
        animating: false,
        // 是否动画中
        mapShow: false,
        // map的开关
        scrollLeft: 0
        // scroll-view偏移量
      });
      const { children, linkChildren } = useChildren(TABS_KEY);
      linkChildren({ state, props });
      const { proxy } = vue.getCurrentInstance();
      const touch = useTouch();
      const innerSlidable = vue.computed(() => {
        return props.slidable === "always" || children.length > props.slidableNum;
      });
      const bodyStyle = vue.computed(() => {
        if (!props.animated) {
          return "";
        }
        return objToStyle({
          left: -100 * state.activeIndex + "%",
          "transition-duration": props.duration + "ms",
          "-webkit-transition-duration": props.duration + "ms"
        });
      });
      const getTabName = (tab, index) => {
        return isDef(tab.name) ? tab.name : index;
      };
      const updateActive = (value = 0, init = false, setScroll = true) => {
        if (children.length === 0)
          return;
        value = getActiveIndex(value);
        if (children[value].disabled)
          return;
        state.activeIndex = value;
        if (setScroll) {
          updateLineStyle(init === false);
          scrollIntoView();
        }
        setActiveTab();
      };
      const setActive = debounce(updateActive, 100, { leading: true });
      vue.watch(
        () => props.modelValue,
        (newValue) => {
          if (!isNumber(newValue) && !isString(newValue)) {
            formatAppLog("error", "at uni_modules/wot-design-uni/components/wd-tabs/wd-tabs.vue:228", "[wot design] error(wd-tabs): the type of value should be number or string");
          }
          if (newValue === "" || !isDef(newValue)) {
            formatAppLog("error", "at uni_modules/wot-design-uni/components/wd-tabs/wd-tabs.vue:233", "[wot design] error(wd-tabs): tabs's value cannot be '' null or undefined");
          }
          if (typeof newValue === "number" && newValue < 0) {
            formatAppLog("error", "at uni_modules/wot-design-uni/components/wd-tabs/wd-tabs.vue:237", "[wot design] error(wd-tabs): tabs's value cannot be less than zero");
          }
        },
        {
          immediate: true,
          deep: true
        }
      );
      vue.watch(
        () => props.modelValue,
        (newValue) => {
          const index = getActiveIndex(newValue);
          setActive(newValue, false, index !== state.activeIndex);
        },
        {
          immediate: false,
          deep: true
        }
      );
      vue.watch(
        () => children.length,
        () => {
          if (state.inited) {
            vue.nextTick(() => {
              setActive(props.modelValue);
            });
          }
        }
      );
      vue.watch(
        () => props.slidableNum,
        (newValue) => {
          checkNumRange(newValue, "slidableNum");
        }
      );
      vue.watch(
        () => props.mapNum,
        (newValue) => {
          checkNumRange(newValue, "mapNum");
        }
      );
      vue.onMounted(() => {
        state.inited = true;
        vue.nextTick(() => {
          updateActive(props.modelValue, true);
          state.useInnerLine = true;
        });
      });
      function toggleMap() {
        if (state.mapShow) {
          state.animating = false;
          setTimeout(() => {
            state.mapShow = false;
          }, 300);
        } else {
          state.mapShow = true;
          setTimeout(() => {
            state.animating = true;
          }, 100);
        }
      }
      async function updateLineStyle(animation = true) {
        if (!state.inited)
          return;
        const { autoLineWidth, lineWidth, lineHeight } = props;
        try {
          const lineStyle = {};
          if (isDef(lineWidth)) {
            lineStyle.width = addUnit(lineWidth);
          } else {
            if (autoLineWidth) {
              const textRects = await getRect($itemText, true, proxy);
              const textWidth = Number(textRects[state.activeIndex].width);
              lineStyle.width = addUnit(textWidth);
            }
          }
          if (isDef(lineHeight)) {
            lineStyle.height = addUnit(lineHeight);
            lineStyle.borderRadius = `calc(${addUnit(lineHeight)} / 2)`;
          }
          const rects = await getRect($item, true, proxy);
          const rect = rects[state.activeIndex];
          let left = rects.slice(0, state.activeIndex).reduce((prev, curr) => prev + Number(curr.width), 0) + Number(rect.width) / 2;
          if (left) {
            lineStyle.transform = `translateX(${left}px) translateX(-50%)`;
            if (animation) {
              lineStyle.transition = "width 0.3s cubic-bezier(0.4, 0, 0.2, 1), transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);";
            }
            state.useInnerLine = false;
            state.lineStyle = objToStyle(lineStyle);
          }
        } catch (error) {
          formatAppLog("error", "at uni_modules/wot-design-uni/components/wd-tabs/wd-tabs.vue:339", "[wot design] error(wd-tabs): update line style failed", error);
        }
      }
      function setActiveTab() {
        if (!state.inited)
          return;
        const name = getTabName(children[state.activeIndex], state.activeIndex);
        if (name !== props.modelValue) {
          emit("change", {
            index: state.activeIndex,
            name
          });
          emit("update:modelValue", name);
        }
      }
      function scrollIntoView() {
        if (!state.inited)
          return;
        Promise.all([getRect($item, true, proxy), getRect($container, false, proxy)]).then(([navItemsRects, navRect]) => {
          const selectItem = navItemsRects[state.activeIndex];
          const offsetLeft = navItemsRects.slice(0, state.activeIndex).reduce((prev, curr) => prev + curr.width, 0);
          const left = offsetLeft - (navRect.width - Number(selectItem.width)) / 2;
          if (left === state.scrollLeft) {
            state.scrollLeft = left + Math.random() / 1e4;
          } else {
            state.scrollLeft = left;
          }
        });
      }
      function handleSelect(index) {
        if (index === void 0)
          return;
        const { disabled } = children[index];
        const name = getTabName(children[index], index);
        if (disabled) {
          emit("disabled", {
            index,
            name
          });
          return;
        }
        state.mapShow && toggleMap();
        setActive(index);
        emit("click", {
          index,
          name
        });
      }
      function onTouchStart(event) {
        if (!props.swipeable)
          return;
        touch.touchStart(event);
      }
      function onTouchMove(event) {
        if (!props.swipeable)
          return;
        touch.touchMove(event);
      }
      function onTouchEnd() {
        if (!props.swipeable)
          return;
        const { direction, deltaX, offsetX } = touch;
        const minSwipeDistance = 50;
        if (direction.value === "horizontal" && offsetX.value >= minSwipeDistance) {
          if (deltaX.value > 0 && state.activeIndex !== 0) {
            setActive(state.activeIndex - 1);
          } else if (deltaX.value < 0 && state.activeIndex !== children.length - 1) {
            setActive(state.activeIndex + 1);
          }
        }
      }
      function getActiveIndex(value) {
        if (isNumber(value) && value >= children.length) {
          formatAppLog("error", "at uni_modules/wot-design-uni/components/wd-tabs/wd-tabs.vue:419", "[wot design] warning(wd-tabs): the type of tabs' value is Number shouldn't be less than its children");
          value = 0;
        }
        if (isString(value)) {
          const index = children.findIndex((item) => item.name === value);
          value = index === -1 ? 0 : index;
        }
        return value;
      }
      __expose({
        setActive,
        scrollIntoView,
        updateLineStyle
      });
      const __returned__ = { $item, $itemText, $container, props, emit, translate, state, children, linkChildren, proxy, touch, innerSlidable, bodyStyle, getTabName, updateActive, setActive, toggleMap, updateLineStyle, setActiveTab, scrollIntoView, handleSelect, onTouchStart, onTouchMove, onTouchEnd, getActiveIndex, wdIcon: __easycom_0$5, wdSticky, wdStickyBox };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$u(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_wd_badge = resolveEasycom(vue.resolveDynamicComponent("wd-badge"), __easycom_0);
    return _ctx.sticky ? (vue.openBlock(), vue.createBlock($setup["wdStickyBox"], { key: 0 }, {
      default: vue.withCtx(() => [
        vue.createElementVNode(
          "view",
          {
            class: vue.normalizeClass(`wd-tabs ${_ctx.customClass} ${$setup.innerSlidable ? "is-slide" : ""} ${_ctx.mapNum < $setup.children.length && _ctx.mapNum !== 0 ? "is-map" : ""}`),
            style: vue.normalizeStyle(_ctx.customStyle)
          },
          [
            vue.createVNode($setup["wdSticky"], { "offset-top": _ctx.offsetTop }, {
              default: vue.withCtx(() => [
                vue.createElementVNode("view", { class: "wd-tabs__nav wd-tabs__nav--sticky" }, [
                  vue.createElementVNode("view", { class: "wd-tabs__nav--wrap" }, [
                    vue.createElementVNode("scroll-view", {
                      "scroll-x": $setup.innerSlidable,
                      "scroll-with-animation": "",
                      "scroll-left": $setup.state.scrollLeft
                    }, [
                      vue.createElementVNode("view", { class: "wd-tabs__nav-container" }, [
                        (vue.openBlock(true), vue.createElementBlock(
                          vue.Fragment,
                          null,
                          vue.renderList($setup.children, (item, index) => {
                            return vue.openBlock(), vue.createElementBlock("view", {
                              onClick: ($event) => $setup.handleSelect(index),
                              key: index,
                              class: vue.normalizeClass(`wd-tabs__nav-item  ${$setup.state.activeIndex === index ? "is-active" : ""} ${item.disabled ? "is-disabled" : ""}`),
                              style: vue.normalizeStyle($setup.state.activeIndex === index ? _ctx.color ? "color:" + _ctx.color : "" : _ctx.inactiveColor ? "color:" + _ctx.inactiveColor : "")
                            }, [
                              item.badgeProps ? (vue.openBlock(), vue.createBlock(
                                _component_wd_badge,
                                vue.normalizeProps(vue.mergeProps({ key: 0 }, item.badgeProps)),
                                {
                                  default: vue.withCtx(() => [
                                    vue.createElementVNode(
                                      "text",
                                      { class: "wd-tabs__nav-item-text" },
                                      vue.toDisplayString(item.title),
                                      1
                                      /* TEXT */
                                    )
                                  ]),
                                  _: 2
                                  /* DYNAMIC */
                                },
                                1040
                                /* FULL_PROPS, DYNAMIC_SLOTS */
                              )) : (vue.openBlock(), vue.createElementBlock(
                                "text",
                                {
                                  key: 1,
                                  class: "wd-tabs__nav-item-text"
                                },
                                vue.toDisplayString(item.title),
                                1
                                /* TEXT */
                              )),
                              $setup.state.activeIndex === index && $setup.state.useInnerLine ? (vue.openBlock(), vue.createElementBlock("view", {
                                key: 2,
                                class: "wd-tabs__line wd-tabs__line--inner"
                              })) : vue.createCommentVNode("v-if", true)
                            ], 14, ["onClick"]);
                          }),
                          128
                          /* KEYED_FRAGMENT */
                        )),
                        vue.createElementVNode(
                          "view",
                          {
                            class: "wd-tabs__line",
                            style: vue.normalizeStyle($setup.state.lineStyle)
                          },
                          null,
                          4
                          /* STYLE */
                        )
                      ])
                    ], 8, ["scroll-x", "scroll-left"])
                  ]),
                  _ctx.mapNum < $setup.children.length && _ctx.mapNum !== 0 ? (vue.openBlock(), vue.createElementBlock("view", {
                    key: 0,
                    class: "wd-tabs__map"
                  }, [
                    vue.createElementVNode(
                      "view",
                      {
                        class: vue.normalizeClass(`wd-tabs__map-btn  ${$setup.state.animating ? "is-open" : ""}`),
                        onClick: $setup.toggleMap
                      },
                      [
                        vue.createElementVNode(
                          "view",
                          {
                            class: vue.normalizeClass(`wd-tabs__map-arrow  ${$setup.state.animating ? "is-open" : ""}`)
                          },
                          [
                            vue.createVNode($setup["wdIcon"], { name: "arrow-down" })
                          ],
                          2
                          /* CLASS */
                        )
                      ],
                      2
                      /* CLASS */
                    ),
                    vue.createElementVNode(
                      "view",
                      {
                        class: "wd-tabs__map-header",
                        style: vue.normalizeStyle(`${$setup.state.mapShow ? "" : "display:none;"}  ${$setup.state.animating ? "opacity:1;" : ""}`)
                      },
                      vue.toDisplayString(_ctx.mapTitle || $setup.translate("all")),
                      5
                      /* TEXT, STYLE */
                    ),
                    vue.createElementVNode(
                      "view",
                      {
                        class: vue.normalizeClass(`wd-tabs__map-body  ${$setup.state.animating ? "is-open" : ""}`),
                        style: vue.normalizeStyle($setup.state.mapShow ? "" : "display:none")
                      },
                      [
                        (vue.openBlock(true), vue.createElementBlock(
                          vue.Fragment,
                          null,
                          vue.renderList($setup.children, (item, index) => {
                            return vue.openBlock(), vue.createElementBlock("view", {
                              class: "wd-tabs__map-nav-item",
                              key: index,
                              onClick: ($event) => $setup.handleSelect(index)
                            }, [
                              vue.createElementVNode(
                                "view",
                                {
                                  class: vue.normalizeClass(`wd-tabs__map-nav-btn ${$setup.state.activeIndex === index ? "is-active" : ""}  ${item.disabled ? "is-disabled" : ""}`),
                                  style: vue.normalizeStyle(
                                    $setup.state.activeIndex === index ? _ctx.color ? "color:" + _ctx.color + ";border-color:" + _ctx.color : "" : _ctx.inactiveColor ? "color:" + _ctx.inactiveColor : ""
                                  )
                                },
                                vue.toDisplayString(item.title),
                                7
                                /* TEXT, CLASS, STYLE */
                              )
                            ], 8, ["onClick"]);
                          }),
                          128
                          /* KEYED_FRAGMENT */
                        ))
                      ],
                      6
                      /* CLASS, STYLE */
                    )
                  ])) : vue.createCommentVNode("v-if", true)
                ])
              ]),
              _: 1
              /* STABLE */
            }, 8, ["offset-top"]),
            vue.createElementVNode(
              "view",
              {
                class: "wd-tabs__container",
                onTouchstart: $setup.onTouchStart,
                onTouchmove: $setup.onTouchMove,
                onTouchend: $setup.onTouchEnd,
                onTouchcancel: $setup.onTouchEnd
              },
              [
                vue.createElementVNode(
                  "view",
                  {
                    class: vue.normalizeClass(["wd-tabs__body", _ctx.animated ? "is-animated" : ""]),
                    style: vue.normalizeStyle($setup.bodyStyle)
                  },
                  [
                    vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
                  ],
                  6
                  /* CLASS, STYLE */
                )
              ],
              32
              /* NEED_HYDRATION */
            ),
            vue.createElementVNode(
              "view",
              {
                class: "wd-tabs__mask",
                style: vue.normalizeStyle(`${$setup.state.mapShow ? "" : "display:none;"} ${$setup.state.animating ? "opacity:1;" : ""}`),
                onClick: $setup.toggleMap
              },
              null,
              4
              /* STYLE */
            )
          ],
          6
          /* CLASS, STYLE */
        )
      ]),
      _: 3
      /* FORWARDED */
    })) : (vue.openBlock(), vue.createElementBlock(
      "view",
      {
        key: 1,
        class: vue.normalizeClass(`wd-tabs ${_ctx.customClass} ${$setup.innerSlidable ? "is-slide" : ""} ${_ctx.mapNum < $setup.children.length && _ctx.mapNum !== 0 ? "is-map" : ""}`)
      },
      [
        vue.createElementVNode("view", { class: "wd-tabs__nav" }, [
          vue.createElementVNode("view", { class: "wd-tabs__nav--wrap" }, [
            vue.createElementVNode("scroll-view", {
              "scroll-x": $setup.innerSlidable,
              "scroll-with-animation": "",
              "scroll-left": $setup.state.scrollLeft
            }, [
              vue.createElementVNode("view", { class: "wd-tabs__nav-container" }, [
                (vue.openBlock(true), vue.createElementBlock(
                  vue.Fragment,
                  null,
                  vue.renderList($setup.children, (item, index) => {
                    return vue.openBlock(), vue.createElementBlock("view", {
                      onClick: ($event) => $setup.handleSelect(index),
                      key: index,
                      class: vue.normalizeClass(`wd-tabs__nav-item ${$setup.state.activeIndex === index ? "is-active" : ""} ${item.disabled ? "is-disabled" : ""}`),
                      style: vue.normalizeStyle($setup.state.activeIndex === index ? _ctx.color ? "color:" + _ctx.color : "" : _ctx.inactiveColor ? "color:" + _ctx.inactiveColor : "")
                    }, [
                      item.badgeProps ? (vue.openBlock(), vue.createBlock(
                        _component_wd_badge,
                        vue.mergeProps({
                          key: 0,
                          "custom-class": "wd-tabs__nav-item-badge"
                        }, item.badgeProps),
                        {
                          default: vue.withCtx(() => [
                            vue.createElementVNode(
                              "text",
                              { class: "wd-tabs__nav-item-text" },
                              vue.toDisplayString(item.title),
                              1
                              /* TEXT */
                            )
                          ]),
                          _: 2
                          /* DYNAMIC */
                        },
                        1040
                        /* FULL_PROPS, DYNAMIC_SLOTS */
                      )) : (vue.openBlock(), vue.createElementBlock(
                        "text",
                        {
                          key: 1,
                          class: "wd-tabs__nav-item-text"
                        },
                        vue.toDisplayString(item.title),
                        1
                        /* TEXT */
                      )),
                      $setup.state.activeIndex === index && $setup.state.useInnerLine ? (vue.openBlock(), vue.createElementBlock("view", {
                        key: 2,
                        class: "wd-tabs__line wd-tabs__line--inner"
                      })) : vue.createCommentVNode("v-if", true)
                    ], 14, ["onClick"]);
                  }),
                  128
                  /* KEYED_FRAGMENT */
                )),
                vue.createElementVNode(
                  "view",
                  {
                    class: "wd-tabs__line",
                    style: vue.normalizeStyle($setup.state.lineStyle)
                  },
                  null,
                  4
                  /* STYLE */
                )
              ])
            ], 8, ["scroll-x", "scroll-left"])
          ]),
          _ctx.mapNum < $setup.children.length && _ctx.mapNum !== 0 ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 0,
            class: "wd-tabs__map"
          }, [
            vue.createElementVNode("view", {
              class: "wd-tabs__map-btn",
              onClick: $setup.toggleMap
            }, [
              vue.createElementVNode(
                "view",
                {
                  class: vue.normalizeClass(`wd-tabs__map-arrow ${$setup.state.animating ? "is-open" : ""}`)
                },
                [
                  vue.createVNode($setup["wdIcon"], { name: "arrow-down" })
                ],
                2
                /* CLASS */
              )
            ]),
            vue.createElementVNode(
              "view",
              {
                class: "wd-tabs__map-header",
                style: vue.normalizeStyle(`${$setup.state.mapShow ? "" : "display:none;"}  ${$setup.state.animating ? "opacity:1;" : ""}`)
              },
              vue.toDisplayString(_ctx.mapTitle || $setup.translate("all")),
              5
              /* TEXT, STYLE */
            ),
            vue.createElementVNode(
              "view",
              {
                class: vue.normalizeClass(`wd-tabs__map-body ${$setup.state.animating ? "is-open" : ""}`),
                style: vue.normalizeStyle($setup.state.mapShow ? "" : "display:none")
              },
              [
                (vue.openBlock(true), vue.createElementBlock(
                  vue.Fragment,
                  null,
                  vue.renderList($setup.children, (item, index) => {
                    return vue.openBlock(), vue.createElementBlock("view", {
                      class: "wd-tabs__map-nav-item",
                      key: index,
                      onClick: ($event) => $setup.handleSelect(index)
                    }, [
                      vue.createElementVNode(
                        "view",
                        {
                          class: vue.normalizeClass(`wd-tabs__map-nav-btn ${$setup.state.activeIndex === index ? "is-active" : ""}  ${item.disabled ? "is-disabled" : ""}`)
                        },
                        vue.toDisplayString(item.title),
                        3
                        /* TEXT, CLASS */
                      )
                    ], 8, ["onClick"]);
                  }),
                  128
                  /* KEYED_FRAGMENT */
                ))
              ],
              6
              /* CLASS, STYLE */
            )
          ])) : vue.createCommentVNode("v-if", true)
        ]),
        vue.createElementVNode(
          "view",
          {
            class: "wd-tabs__container",
            onTouchstart: $setup.onTouchStart,
            onTouchmove: $setup.onTouchMove,
            onTouchend: $setup.onTouchEnd,
            onTouchcancel: $setup.onTouchEnd
          },
          [
            vue.createElementVNode(
              "view",
              {
                class: vue.normalizeClass(["wd-tabs__body", _ctx.animated ? "is-animated" : ""]),
                style: vue.normalizeStyle($setup.bodyStyle)
              },
              [
                vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
              ],
              6
              /* CLASS, STYLE */
            )
          ],
          32
          /* NEED_HYDRATION */
        ),
        vue.createElementVNode(
          "view",
          {
            class: "wd-tabs__mask",
            style: vue.normalizeStyle(`${$setup.state.mapShow ? "" : "display:none;"}  ${$setup.state.animating ? "opacity:1" : ""}`),
            onClick: $setup.toggleMap
          },
          null,
          4
          /* STYLE */
        )
      ],
      2
      /* CLASS */
    ));
  }
  const __easycom_1$1 = /* @__PURE__ */ _export_sfc(_sfc_main$v, [["render", _sfc_render$u], ["__scopeId", "data-v-4388d15d"], ["__file", "G:/Code/campus/miniProject/uni_modules/wot-design-uni/components/wd-tabs/wd-tabs.vue"]]);
  const _sfc_main$u = /* @__PURE__ */ vue.defineComponent({
    __name: "study",
    setup(__props, { expose: __expose }) {
      __expose();
      const leftActive = vue.ref(0);
      const rightActive = vue.ref(0);
      const leftTabs = [
        {
          title: "就业",
          list: [
            {
              id: 1,
              title: "互联网大厂面试指南",
              author: "真欣同学",
              url: "https://www.bilibili.com/video/BV18S4y1C7fS/?spm_id_from=333.337.search-card.all.click",
              date: "03-01"
            },
            {
              id: 2,
              title: "简历制作黄金法则",
              author: "取景框看世界",
              url: "https://www.bilibili.com/video/BV1NL4y1878J/?spm_id_from=333.337.search-card.all.click",
              date: "03-02"
            },
            {
              id: 3,
              title: "薪资谈判技巧",
              author: "HR大婷讲求职",
              url: "https://www.bilibili.com/video/BV1N14y1r7tJ/?spm_id_from=333.337.search-card.all.click&vd_source=8f5eaf78f6121694f4dd471819f3772b",
              date: "03-03"
            }
          ]
        },
        {
          title: "考公",
          list: [
            {
              id: 4,
              title: "行测系统课",
              author: "刘文超Vin",
              url: "https://www.bilibili.com/video/BV12t4115735/?spm_id_from=333.337.search-card.all.click",
              date: "03-04"
            },
            {
              id: 5,
              title: "申论系统课",
              author: "公考小马哥",
              url: "https://www.bilibili.com/video/BV1P34y167K4/?spm_id_from=333.337.search-card.all.click&vd_source=8f5eaf78f6121694f4dd471819f3772b",
              date: "03-05"
            },
            {
              id: 6,
              title: "面试技巧",
              author: "心竺公考",
              url: "https://www.bilibili.com/video/BV1uJ411H7w4/?spm_id_from=333.337.search-card.all.click",
              date: "03-06"
            }
          ]
        },
        {
          title: "考研",
          list: [
            {
              id: 7,
              title: "考研时间规划表",
              author: "取景框看世界",
              url: "https://www.bilibili.com/video/BV1qwzdY4EqG/?spm_id_from=333.337.search-card.all.click",
              date: "03-07"
            },
            {
              id: 8,
              title: "考研英语长难句",
              author: "颉斌斌老师",
              url: "https://space.bilibili.com/271970833?spm_id_from=333.337.search-card.all.click",
              date: "03-08"
            },
            {
              id: 9,
              title: "政治背诵手册",
              author: "肖秀荣",
              url: "https://www.bilibili.com/video/BV1KH4y1d7YB/?spm_id_from=333.1387.homepage.video_card.click",
              date: "03-09"
            }
          ]
        }
      ];
      const rightTabs = [
        {
          title: "期末",
          list: [
            {
              id: 10,
              title: "高数期末复习重点",
              author: "框框老师课堂",
              url: "https://www.bilibili.com/video/BV1mN411r7VM/?spm_id_from=333.337.search-card.all.click",
              date: "03-10"
            },
            {
              id: 11,
              title: "英语四级阅读",
              author: "我是瑞斯拜",
              url: "https://www.bilibili.com/video/BV1Ea411i7Da/?spm_id_from=333.337.search-card.all.click",
              date: "03-11"
            },
            {
              id: 12,
              title: "专业课考试技巧",
              author: "清华学姐小琳",
              url: "https://b23.tv/sHOmbvo",
              date: "03-12"
            }
          ]
        },
        {
          title: "实验",
          list: [
            {
              id: 13,
              title: "物理实验注意事项",
              author: "五味666",
              url: "https://b23.tv/5f7xAyF",
              date: "03-13"
            },
            {
              id: 14,
              title: "化学实验安全指南",
              author: "鹰少学姐",
              url: "https://b23.tv/kj5UuzZ",
              date: "03-14"
            },
            {
              id: 15,
              title: "生物实验操作要领",
              author: "生物研零生",
              url: "https://b23.tv/prbT81x",
              date: "03-15"
            }
          ]
        },
        {
          title: "作业",
          list: [
            {
              id: 16,
              title: "作业规范指导",
              author: "眠羊八困",
              url: "https://www.bilibili.com/video/BV1mb4y1x7W1/?spm_id_from=333.337.search-card.all.click",
              date: "03-16"
            },
            {
              id: 17,
              title: "论文写作技巧",
              author: "SCI论文写作",
              url: "https://b23.tv/72e2ldd",
              date: "03-17"
            },
            {
              id: 18,
              title: "实验报告模板",
              author: "奋斗的习习",
              url: "https://www.bilibili.com/video/BV1nU4y1T7tE/?spm_id_from=333.337.search-card.all.click&vd_source=8f5eaf78f6121694f4dd471819f3772b",
              date: "03-18"
            }
          ]
        }
      ];
      const navigateToGraduateDetail = (tabIndex, item) => {
        const routes = [
          "/pages/graduateExperience/graduateExperience?param=",
          "/pages/graduateExperience/graduateExperience?param=",
          "/pages/graduateExperience/graduateExperience?param="
        ];
        uni.navigateTo({
          url: `${routes[tabIndex]}${item.url}`
        });
      };
      const navigateToStudentDetail = (tabIndex, item) => {
        const routes = [
          "/pages/studentExperience/studentExperience?param=",
          "/pages/studentExperience/studentExperience?param=",
          "/pages/studentExperience/studentExperience?param="
        ];
        uni.navigateTo({
          url: `${routes[tabIndex]}${item.url}`
        });
      };
      const __returned__ = { leftActive, rightActive, leftTabs, rightTabs, navigateToGraduateDetail, navigateToStudentDetail };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$t(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_wd_tab = resolveEasycom(vue.resolveDynamicComponent("wd-tab"), __easycom_0$1);
    const _component_wd_tabs = resolveEasycom(vue.resolveDynamicComponent("wd-tabs"), __easycom_1$1);
    const _component_wd_icon = resolveEasycom(vue.resolveDynamicComponent("wd-icon"), __easycom_0$5);
    return vue.openBlock(), vue.createElementBlock("view", { class: "container" }, [
      vue.createCommentVNode(" 内容分类区域 "),
      vue.createElementVNode("view", { class: "content-section" }, [
        vue.createCommentVNode(" 毕业生板块 "),
        vue.createElementVNode("view", { class: "category-card graduate-section" }, [
          vue.createElementVNode("view", { class: "section-header" }, [
            vue.createElementVNode("text", { class: "section-title" }, "毕业生经验分享"),
            vue.createElementVNode("text", { class: "section-subtitle" }, "来自优秀毕业生的宝贵经验")
          ]),
          vue.createVNode(_component_wd_tabs, {
            modelValue: $setup.leftActive,
            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $setup.leftActive = $event),
            animated: "",
            sticky: ""
          }, {
            default: vue.withCtx(() => [
              vue.createVNode(_component_wd_tab, { title: "就业" }),
              vue.createVNode(_component_wd_tab, { title: "考公" }),
              vue.createVNode(_component_wd_tab, { title: "考研" })
            ]),
            _: 1
            /* STABLE */
          }, 8, ["modelValue"]),
          vue.createCommentVNode(" 不同tab内容 "),
          vue.createElementVNode("view", { class: "card-list" }, [
            (vue.openBlock(), vue.createElementBlock(
              vue.Fragment,
              null,
              vue.renderList($setup.leftTabs, (tab, tabIndex) => {
                return vue.withDirectives(vue.createElementVNode(
                  "scroll-view",
                  {
                    key: tabIndex,
                    class: "scroll-content",
                    "scroll-y": "",
                    "enable-flex": ""
                  },
                  [
                    (vue.openBlock(true), vue.createElementBlock(
                      vue.Fragment,
                      null,
                      vue.renderList(tab.list, (item) => {
                        return vue.openBlock(), vue.createElementBlock("view", {
                          class: "doc-card",
                          key: item.id,
                          onClick: ($event) => $setup.navigateToGraduateDetail($setup.leftActive, item)
                        }, [
                          vue.createElementVNode("view", { class: "doc-content" }, [
                            vue.createElementVNode(
                              "view",
                              { class: "doc-title" },
                              vue.toDisplayString(item.title),
                              1
                              /* TEXT */
                            ),
                            vue.createElementVNode("view", { class: "doc-meta" }, [
                              vue.createElementVNode("view", { class: "meta-left" }, [
                                vue.createElementVNode("image", {
                                  class: "avatar",
                                  src: item.avatar || "/static/default-avatar.png",
                                  mode: "aspectFill"
                                }, null, 8, ["src"]),
                                vue.createElementVNode(
                                  "text",
                                  { class: "author" },
                                  vue.toDisplayString(item.author),
                                  1
                                  /* TEXT */
                                )
                              ]),
                              vue.createElementVNode("view", { class: "meta-right" }, [
                                vue.createElementVNode(
                                  "text",
                                  { class: "date" },
                                  vue.toDisplayString(item.date),
                                  1
                                  /* TEXT */
                                ),
                                vue.createVNode(_component_wd_icon, {
                                  name: "read",
                                  size: "14px",
                                  class: "read-icon"
                                })
                              ])
                            ])
                          ])
                        ], 8, ["onClick"]);
                      }),
                      128
                      /* KEYED_FRAGMENT */
                    ))
                  ],
                  512
                  /* NEED_PATCH */
                ), [
                  [vue.vShow, $setup.leftActive === tabIndex]
                ]);
              }),
              64
              /* STABLE_FRAGMENT */
            ))
          ])
        ]),
        vue.createCommentVNode(" 在校生板块 "),
        vue.createElementVNode("view", { class: "category-card student-section" }, [
          vue.createElementVNode("view", { class: "section-header" }, [
            vue.createElementVNode("text", { class: "section-title" }, "在校生经验分享"),
            vue.createElementVNode("text", { class: "section-subtitle" }, "学长学姐的学习心得")
          ]),
          vue.createVNode(_component_wd_tabs, {
            modelValue: $setup.rightActive,
            "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $setup.rightActive = $event),
            animated: "",
            sticky: ""
          }, {
            default: vue.withCtx(() => [
              vue.createVNode(_component_wd_tab, { title: "期末" }),
              vue.createVNode(_component_wd_tab, { title: "实验" }),
              vue.createVNode(_component_wd_tab, { title: "作业" })
            ]),
            _: 1
            /* STABLE */
          }, 8, ["modelValue"]),
          vue.createCommentVNode(" 不同tab内容 "),
          vue.createElementVNode("view", { class: "card-list" }, [
            (vue.openBlock(), vue.createElementBlock(
              vue.Fragment,
              null,
              vue.renderList($setup.rightTabs, (tab, tabIndex) => {
                return vue.withDirectives(vue.createElementVNode(
                  "scroll-view",
                  {
                    key: tabIndex,
                    class: "scroll-content",
                    "scroll-y": "",
                    "enable-flex": ""
                  },
                  [
                    (vue.openBlock(true), vue.createElementBlock(
                      vue.Fragment,
                      null,
                      vue.renderList(tab.list, (item) => {
                        return vue.openBlock(), vue.createElementBlock("view", {
                          class: "doc-card",
                          key: item.id,
                          onClick: ($event) => $setup.navigateToStudentDetail($setup.rightActive, item)
                        }, [
                          vue.createElementVNode("view", { class: "doc-content" }, [
                            vue.createElementVNode(
                              "view",
                              { class: "doc-title" },
                              vue.toDisplayString(item.title),
                              1
                              /* TEXT */
                            ),
                            vue.createElementVNode("view", { class: "doc-meta" }, [
                              vue.createElementVNode("view", { class: "meta-left" }, [
                                vue.createElementVNode("image", {
                                  class: "avatar",
                                  src: item.avatar || "/static/default-avatar.png",
                                  mode: "aspectFill"
                                }, null, 8, ["src"]),
                                vue.createElementVNode(
                                  "text",
                                  { class: "author" },
                                  vue.toDisplayString(item.author),
                                  1
                                  /* TEXT */
                                )
                              ]),
                              vue.createElementVNode("view", { class: "meta-right" }, [
                                vue.createElementVNode(
                                  "text",
                                  { class: "date" },
                                  vue.toDisplayString(item.date),
                                  1
                                  /* TEXT */
                                ),
                                vue.createVNode(_component_wd_icon, {
                                  name: "read",
                                  size: "14px",
                                  class: "read-icon"
                                })
                              ])
                            ])
                          ])
                        ], 8, ["onClick"]);
                      }),
                      128
                      /* KEYED_FRAGMENT */
                    ))
                  ],
                  512
                  /* NEED_PATCH */
                ), [
                  [vue.vShow, $setup.rightActive === tabIndex]
                ]);
              }),
              64
              /* STABLE_FRAGMENT */
            ))
          ])
        ])
      ])
    ]);
  }
  const PagesStudyStudy = /* @__PURE__ */ _export_sfc(_sfc_main$u, [["render", _sfc_render$t], ["__scopeId", "data-v-3f273c1e"], ["__file", "G:/Code/campus/miniProject/pages/study/study.vue"]]);
  function getItemsById(id) {
    return request({
      url: `/api/items/items/${id}`,
      // 使用模板字符串处理路径参数
      method: "GET"
    });
  }
  function addMatchRecords(data) {
    return request({
      url: "/api/items/matchRecords",
      method: "POST",
      data
      // 通过请求体传递JSON参数
    });
  }
  function addItems(data) {
    return request({
      url: "/api/items/publish",
      method: "POST",
      data
      // 通过请求体传递JSON参数
    });
  }
  function getItemsList(data) {
    return request({
      url: "/api/items/itemsList/page",
      method: "POST",
      data
    });
  }
  var ItemType = /* @__PURE__ */ ((ItemType2) => {
    ItemType2[ItemType2["LOST"] = 1] = "LOST";
    ItemType2[ItemType2["FOUND"] = 2] = "FOUND";
    return ItemType2;
  })(ItemType || {});
  const _sfc_main$t = /* @__PURE__ */ vue.defineComponent({
    __name: "lostFound",
    setup(__props, { expose: __expose }) {
      const toast = useToast();
      const activeTab = vue.ref("lost");
      const loading = vue.ref(false);
      const itemsList = vue.ref([]);
      const pageParams = vue.ref({
        current: 1,
        size: 10,
        itemType: ItemType.LOST
      });
      const needRefresh = vue.ref(false);
      const getList = async () => {
        try {
          loading.value = true;
          const res = await getItemsList(pageParams.value);
          if (res.code === 200) {
            itemsList.value = res.data.records;
          } else {
            toast.error(res.message || "获取数据失败");
          }
        } catch (error) {
          formatAppLog("error", "at pages/lostFound/lostFound.vue:115", "获取列表错误:", error);
          toast.error("获取数据失败");
        } finally {
          loading.value = false;
        }
      };
      const handleTabChange = (tab) => {
        pageParams.value = {
          ...pageParams.value,
          current: 1,
          itemType: tab === "lost" ? ItemType.LOST : ItemType.FOUND
        };
      };
      vue.watch(() => activeTab.value, (newTab) => {
        handleTabChange(newTab);
        getList();
      });
      vue.onMounted(() => {
        getList();
      });
      const goToDetail = (id) => {
        formatAppLog("log", "at pages/lostFound/lostFound.vue:144", id);
        uni.navigateTo({
          url: `/pages/lostFoundDetail/lostFoundDetail?id=${id}`
        });
      };
      const handlePublish = (type = 1) => {
        formatAppLog("log", "at pages/lostFound/lostFound.vue:151", "发布类型:", type);
        uni.navigateTo({
          url: `/pages/lostFoundPublish/lostFoundPublish?type=${type}`
        });
      };
      const setNeedRefresh = () => {
        formatAppLog("log", "at pages/lostFound/lostFound.vue:159", "设置刷新标记");
        needRefresh.value = true;
      };
      onShow(() => {
        formatAppLog("log", "at pages/lostFound/lostFound.vue:165", "onShow triggered, needRefresh:", needRefresh.value);
        if (needRefresh.value) {
          pageParams.value = {
            ...pageParams.value,
            current: 1
          };
          itemsList.value = [];
          getList();
          needRefresh.value = false;
        }
      });
      __expose({
        setNeedRefresh
      });
      onShareAppMessage((res) => {
        formatAppLog("log", "at pages/lostFound/lostFound.vue:186", res);
        return {
          title: "青春共享站",
          path: "/pages/index/index",
          imageUrl: "/static/logo.jpg"
          // 分享图片
        };
      });
      onShareTimeline(() => {
        return {
          title: "青春共享站",
          path: "/pages/index/index",
          imageUrl: "/static/logo.jpg"
          // 分享图片
        };
      });
      const __returned__ = { toast, activeTab, loading, itemsList, pageParams, needRefresh, getList, handleTabChange, goToDetail, handlePublish, setNeedRefresh };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$s(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_wd_search = resolveEasycom(vue.resolveDynamicComponent("wd-search"), __easycom_1$5);
    const _component_wd_tag = resolveEasycom(vue.resolveDynamicComponent("wd-tag"), __easycom_2$1);
    const _component_wd_tab = resolveEasycom(vue.resolveDynamicComponent("wd-tab"), __easycom_0$1);
    const _component_wd_tabs = resolveEasycom(vue.resolveDynamicComponent("wd-tabs"), __easycom_1$1);
    const _component_wd_icon = resolveEasycom(vue.resolveDynamicComponent("wd-icon"), __easycom_0$5);
    const _component_wd_toast = resolveEasycom(vue.resolveDynamicComponent("wd-toast"), __easycom_2$2);
    const _component_wd_loading = resolveEasycom(vue.resolveDynamicComponent("wd-loading"), __easycom_0$3);
    return vue.openBlock(), vue.createElementBlock("view", { class: "Lflayout" }, [
      vue.createCommentVNode("  顶部轮播图 "),
      vue.createElementVNode("image", {
        class: "imageBanner",
        src: "https://minio.fybreeze.cn/campus/peQe3j8x9Rq2a580f1a6fdf14fe354d78499f58d5b99.webp",
        mode: "aspectFit"
      }),
      vue.createCommentVNode(" 两张发布卡片 "),
      vue.createElementVNode("view", { class: "PostCard" }, [
        vue.createElementVNode("view", {
          class: "lostcard card",
          onClick: _cache[0] || (_cache[0] = ($event) => $setup.handlePublish(1))
        }, [
          vue.createElementVNode("image", {
            src: "https://minio.fybreeze.cn/campus/oZ9rS2BRDrp99c0629d190736e88799ee725f4eaf67b.webp",
            mode: "aspectFit"
          })
        ]),
        vue.createElementVNode("view", {
          class: "foundcard card",
          onClick: _cache[1] || (_cache[1] = ($event) => $setup.handlePublish(2))
        }, [
          vue.createElementVNode("image", {
            src: "https://minio.fybreeze.cn/campus/2025032521171231231259.webp",
            mode: "aspectFill"
          })
        ])
      ]),
      vue.createCommentVNode(" 搜索区域 "),
      vue.createElementVNode("view", { class: "serach-region" }, [
        vue.createElementVNode("view", { class: "serach" }, [
          vue.createVNode(_component_wd_search, {
            placeholder: "请输入物品名称",
            "placeholder-left": "",
            "cancel-txt": "搜索"
          })
        ]),
        vue.createElementVNode("view", { class: "label" }, [
          vue.createVNode(_component_wd_tag, {
            round: "",
            color: "#333",
            "bg-color": "#808080",
            plain: ""
          }, {
            default: vue.withCtx(() => [
              vue.createTextVNode("手机")
            ]),
            _: 1
            /* STABLE */
          }),
          vue.createVNode(_component_wd_tag, {
            round: "",
            color: "#333",
            "bg-color": "#808080",
            plain: ""
          }, {
            default: vue.withCtx(() => [
              vue.createTextVNode("衣服")
            ]),
            _: 1
            /* STABLE */
          }),
          vue.createVNode(_component_wd_tag, {
            round: "",
            color: "#333",
            "bg-color": "#808080",
            plain: ""
          }, {
            default: vue.withCtx(() => [
              vue.createTextVNode("钱包")
            ]),
            _: 1
            /* STABLE */
          }),
          vue.createVNode(_component_wd_tag, {
            round: "",
            color: "#333",
            "bg-color": "#808080",
            plain: ""
          }, {
            default: vue.withCtx(() => [
              vue.createTextVNode("文件资料")
            ]),
            _: 1
            /* STABLE */
          }),
          vue.createVNode(_component_wd_tag, {
            round: "",
            color: "#333",
            "bg-color": "#808080",
            plain: ""
          }, {
            default: vue.withCtx(() => [
              vue.createTextVNode("贵重物品")
            ]),
            _: 1
            /* STABLE */
          }),
          vue.createVNode(_component_wd_tag, {
            round: "",
            color: "#333",
            "bg-color": "#808080",
            plain: ""
          }, {
            default: vue.withCtx(() => [
              vue.createTextVNode("雨伞")
            ]),
            _: 1
            /* STABLE */
          }),
          vue.createVNode(_component_wd_tag, {
            round: "",
            color: "#333",
            "bg-color": "#808080",
            plain: ""
          }, {
            default: vue.withCtx(() => [
              vue.createTextVNode("其他")
            ]),
            _: 1
            /* STABLE */
          })
        ])
      ]),
      vue.createCommentVNode("    底部分类栏 "),
      vue.createElementVNode("view", { class: "tap-page" }, [
        vue.createVNode(_component_wd_tabs, {
          modelValue: $setup.activeTab,
          "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $setup.activeTab = $event)
        }, {
          default: vue.withCtx(() => [
            vue.createVNode(_component_wd_tab, {
              title: "寻物启事",
              name: "lost"
            }),
            vue.createVNode(_component_wd_tab, {
              title: "招领启事",
              name: "found"
            })
          ]),
          _: 1
          /* STABLE */
        }, 8, ["modelValue"])
      ]),
      vue.createCommentVNode(" 列表展示 "),
      vue.createElementVNode("view", { class: "items-list" }, [
        (vue.openBlock(true), vue.createElementBlock(
          vue.Fragment,
          null,
          vue.renderList($setup.itemsList, (item) => {
            return vue.openBlock(), vue.createElementBlock("view", {
              key: item.id,
              class: "item-card",
              onClick: ($event) => $setup.goToDetail(item.id)
            }, [
              vue.createElementVNode("view", { class: "card-content" }, [
                vue.createElementVNode("view", { class: "title-row" }, [
                  vue.createElementVNode(
                    "text",
                    { class: "title" },
                    vue.toDisplayString(item.title),
                    1
                    /* TEXT */
                  ),
                  vue.createElementVNode(
                    "view",
                    {
                      class: vue.normalizeClass(["status-tag", item.status === 1 ? "resolved" : "pending"])
                    },
                    vue.toDisplayString(item.status === 1 ? "已解决" : "未解决"),
                    3
                    /* TEXT, CLASS */
                  )
                ]),
                vue.createElementVNode(
                  "view",
                  { class: "description" },
                  vue.toDisplayString(item.description),
                  1
                  /* TEXT */
                ),
                vue.createElementVNode("view", { class: "meta-info" }, [
                  vue.createElementVNode("view", { class: "info-item" }, [
                    vue.createVNode(_component_wd_icon, {
                      name: "location",
                      size: "28rpx"
                    }),
                    vue.createElementVNode(
                      "text",
                      null,
                      vue.toDisplayString(item.location),
                      1
                      /* TEXT */
                    )
                  ]),
                  vue.createElementVNode("view", { class: "info-item" }, [
                    vue.createVNode(_component_wd_icon, {
                      name: "time",
                      size: "28rpx"
                    }),
                    vue.createElementVNode(
                      "text",
                      null,
                      vue.toDisplayString(item.eventTime),
                      1
                      /* TEXT */
                    )
                  ]),
                  vue.createElementVNode("view", { class: "info-item" }, [
                    vue.createVNode(_component_wd_icon, {
                      name: "category",
                      size: "28rpx"
                    }),
                    vue.createElementVNode(
                      "text",
                      null,
                      vue.toDisplayString(item.category),
                      1
                      /* TEXT */
                    )
                  ])
                ])
              ])
            ], 8, ["onClick"]);
          }),
          128
          /* KEYED_FRAGMENT */
        ))
      ]),
      vue.createVNode(_component_wd_toast),
      vue.createCommentVNode(" 加载中状态 "),
      $setup.loading ? (vue.openBlock(), vue.createBlock(_component_wd_loading, { key: 0 })) : vue.createCommentVNode("v-if", true)
    ]);
  }
  const PagesLostFoundLostFound = /* @__PURE__ */ _export_sfc(_sfc_main$t, [["render", _sfc_render$s], ["__scopeId", "data-v-2be17064"], ["__file", "G:/Code/campus/miniProject/pages/lostFound/lostFound.vue"]]);
  const _imports_0$6 = "/static/message/attention.png";
  const _imports_1$1 = "/static/message/like.png";
  const _imports_2 = "/static/message/comment.png";
  const _imports_3 = "/static/message/empty.png";
  const _sfc_main$s = {
    __name: "message",
    setup(__props, { expose: __expose }) {
      __expose();
      const newAttentionCount = vue.ref(2);
      const newLikeCount = vue.ref(5);
      const newCommentCount = vue.ref(3);
      const messageList = vue.ref([
        {
          id: 1,
          type: "system",
          username: "校园助手",
          avatar: "/static/avatar.jpg",
          message: "欢迎使用校园助手，有什么可以帮您的吗？",
          time: "刚刚",
          isRead: false,
          online: true,
          unreadCount: 1
        },
        {
          id: 3,
          type: "activity",
          activityId: "act001",
          username: "社团活动",
          avatar: "/static/avatar.jpg",
          message: "本周末有趣味运动会活动，欢迎报名参加！",
          time: "30分钟前",
          isRead: false,
          unreadCount: 3
        }
      ]);
      const handleCardClick = (type) => {
        switch (type) {
          case "attention":
            newAttentionCount.value = 0;
            uni.navigateTo({
              url: "/pages/message/newFollowers/newFollowers"
            });
            break;
          case "like":
            newLikeCount.value = 0;
            uni.navigateTo({
              url: "/pages/message/likes/likes"
            });
            break;
          case "comment":
            newCommentCount.value = 0;
            uni.navigateTo({
              url: "/pages/message/comments/comments"
            });
            break;
        }
      };
      const handleMessageClick = (item) => {
        item.isRead = true;
        item.unreadCount = 0;
        switch (item.type) {
          case "system":
            uni.navigateTo({
              url: "/pages/message/systemMessage/systemMessage"
            });
            break;
          case "activity":
            uni.navigateTo({
              url: `/pages/message/activityMessage/activityMessage?id=${item.activityId}`
            });
            break;
        }
      };
      const __returned__ = { newAttentionCount, newLikeCount, newCommentCount, messageList, handleCardClick, handleMessageClick, ref: vue.ref };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  };
  function _sfc_render$r(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_wd_img = resolveEasycom(vue.resolveDynamicComponent("wd-img"), WdImg);
    return vue.openBlock(), vue.createElementBlock("view", { class: "layout" }, [
      vue.createCommentVNode(" 顶部功能卡片 "),
      vue.createElementVNode("view", { class: "banner-section" }, [
        vue.createElementVNode("view", {
          class: "card-item",
          onClick: _cache[0] || (_cache[0] = ($event) => $setup.handleCardClick("attention"))
        }, [
          vue.createElementVNode("view", { class: "card-content" }, [
            vue.createElementVNode("image", {
              class: "card-icon",
              src: _imports_0$6,
              mode: "aspectFit"
            }),
            vue.createElementVNode("text", { class: "card-title" }, "新增关注"),
            $setup.newAttentionCount > 0 ? (vue.openBlock(), vue.createElementBlock(
              "view",
              {
                key: 0,
                class: "badge"
              },
              vue.toDisplayString($setup.newAttentionCount),
              1
              /* TEXT */
            )) : vue.createCommentVNode("v-if", true)
          ])
        ]),
        vue.createElementVNode("view", {
          class: "card-item",
          onClick: _cache[1] || (_cache[1] = ($event) => $setup.handleCardClick("like"))
        }, [
          vue.createElementVNode("view", { class: "card-content" }, [
            vue.createElementVNode("image", {
              class: "card-icon",
              src: _imports_1$1,
              mode: "aspectFit"
            }),
            vue.createElementVNode("text", { class: "card-title" }, "赞和收藏"),
            $setup.newLikeCount > 0 ? (vue.openBlock(), vue.createElementBlock(
              "view",
              {
                key: 0,
                class: "badge"
              },
              vue.toDisplayString($setup.newLikeCount),
              1
              /* TEXT */
            )) : vue.createCommentVNode("v-if", true)
          ])
        ]),
        vue.createElementVNode("view", {
          class: "card-item",
          onClick: _cache[2] || (_cache[2] = ($event) => $setup.handleCardClick("comment"))
        }, [
          vue.createElementVNode("view", { class: "card-content" }, [
            vue.createElementVNode("image", {
              class: "card-icon",
              src: _imports_2,
              mode: "aspectFit"
            }),
            vue.createElementVNode("text", { class: "card-title" }, "评论和@"),
            $setup.newCommentCount > 0 ? (vue.openBlock(), vue.createElementBlock(
              "view",
              {
                key: 0,
                class: "badge"
              },
              vue.toDisplayString($setup.newCommentCount),
              1
              /* TEXT */
            )) : vue.createCommentVNode("v-if", true)
          ])
        ])
      ]),
      vue.createCommentVNode(" 消息列表 "),
      vue.createElementVNode("view", { class: "message-list" }, [
        (vue.openBlock(true), vue.createElementBlock(
          vue.Fragment,
          null,
          vue.renderList($setup.messageList, (item, index) => {
            return vue.openBlock(), vue.createElementBlock("view", {
              key: index,
              class: vue.normalizeClass(["message-item", { unread: !item.isRead }]),
              onClick: ($event) => $setup.handleMessageClick(item)
            }, [
              vue.createElementVNode("view", { class: "avatar-wrapper" }, [
                vue.createVNode(_component_wd_img, {
                  width: 90,
                  height: 90,
                  round: "",
                  src: item.avatar || "/static/avatar.jpg"
                }, null, 8, ["src"]),
                item.online ? (vue.openBlock(), vue.createElementBlock("view", {
                  key: 0,
                  class: "status-dot"
                })) : vue.createCommentVNode("v-if", true)
              ]),
              vue.createElementVNode("view", { class: "content" }, [
                vue.createElementVNode("view", { class: "header" }, [
                  vue.createElementVNode(
                    "text",
                    { class: "username" },
                    vue.toDisplayString(item.username),
                    1
                    /* TEXT */
                  ),
                  vue.createElementVNode(
                    "text",
                    { class: "time" },
                    vue.toDisplayString(item.time),
                    1
                    /* TEXT */
                  )
                ]),
                vue.createElementVNode("view", { class: "message" }, [
                  vue.createElementVNode(
                    "text",
                    { class: "text" },
                    vue.toDisplayString(item.message),
                    1
                    /* TEXT */
                  ),
                  item.unreadCount ? (vue.openBlock(), vue.createElementBlock(
                    "view",
                    {
                      key: 0,
                      class: "unread-count"
                    },
                    vue.toDisplayString(item.unreadCount),
                    1
                    /* TEXT */
                  )) : vue.createCommentVNode("v-if", true)
                ])
              ])
            ], 10, ["onClick"]);
          }),
          128
          /* KEYED_FRAGMENT */
        ))
      ]),
      vue.createCommentVNode(" 空状态 "),
      $setup.messageList.length === 0 ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 0,
        class: "empty-state"
      }, [
        vue.createElementVNode("image", {
          class: "empty-icon",
          src: _imports_3,
          mode: "aspectFit"
        }),
        vue.createElementVNode("text", { class: "empty-text" }, "暂无消息")
      ])) : vue.createCommentVNode("v-if", true)
    ]);
  }
  const PagesMessageMessage = /* @__PURE__ */ _export_sfc(_sfc_main$s, [["render", _sfc_render$r], ["__scopeId", "data-v-4c1b26cf"], ["__file", "G:/Code/campus/miniProject/pages/message/message.vue"]]);
  function addComment(data) {
    return request({
      url: "/api/comment/add",
      method: "POST",
      data
    });
  }
  function getCommentListByArticleId(articleId) {
    return request({
      url: `/api/comment/list?articleId=${articleId}`,
      method: "GET"
    });
  }
  const _sfc_main$r = /* @__PURE__ */ vue.defineComponent({
    __name: "articleInfo",
    setup(__props, { expose: __expose }) {
      __expose();
      const articleId = vue.ref();
      const userInfo = vue.ref();
      const commentList = vue.ref();
      const text = vue.ref("写下你的想法");
      const articleInfo = vue.ref();
      const toast = useToast();
      const commentText = vue.ref();
      const parentId = vue.ref(0);
      const user = vue.ref();
      onLoad((options) => {
        formatAppLog("log", "at pages/articleInfo/articleInfo.vue:120", "接收到的数据：", options.articleId);
        articleId.value = options.articleId;
        getArticleInfo();
        getCommentList();
        user.value = getUserInfo();
      });
      const getArticleInfo = async () => {
        formatAppLog("log", "at pages/articleInfo/articleInfo.vue:129", "获取文章详情");
        const res = await getArticleByArticleId(articleId.value);
        if (res.code == 200) {
          formatAppLog("log", "at pages/articleInfo/articleInfo.vue:132", res);
          articleInfo.value = res.data;
          userInfo.value = articleInfo.value.userVO;
        } else {
          toast.show(res.message);
        }
      };
      const getImageLayoutClass = (count) => {
        switch (count) {
          case 1:
            return "one-column";
          case 2:
          case 4:
            return "two-columns";
          case 3:
            return "three-columns";
          default:
            return "three-columns";
        }
      };
      const previewImage = (url2, urlList) => {
        formatAppLog("log", "at pages/articleInfo/articleInfo.vue:156", urlList);
        uni.previewImage({
          current: url2,
          // 当前显示图片的http链接
          urls: urlList
          // 需要预览的图片http链接列表
        });
      };
      const getCommentList = async () => {
        const res = await getCommentListByArticleId(articleId.value);
        if (res.code == 200) {
          formatAppLog("log", "at pages/articleInfo/articleInfo.vue:166", res);
          commentList.value = res.data;
        } else {
          toast.show(res.message);
        }
      };
      const handleComment = (comment) => {
        formatAppLog("log", "at pages/articleInfo/articleInfo.vue:174", comment.userVO.userName);
        text.value = "回复@" + comment.userVO.userName + "：";
        formatAppLog("log", "at pages/articleInfo/articleInfo.vue:176", comment);
        parentId.value = comment.id;
      };
      const submitComment = async () => {
        const data = {
          articleId: articleId.value,
          content: commentText.value,
          userId: user.value.id,
          parentId: parentId.value
        };
        formatAppLog("log", "at pages/articleInfo/articleInfo.vue:188", "发布评论", data);
        const res = await addComment(data);
        if (res.code == 200) {
          toast.show("评论成功");
          commentText.value = "";
          parentId.value = 0;
          getCommentList();
        } else {
          toast.show(res.message);
        }
      };
      const handleDeleteArticle = () => {
        uni.showModal({
          title: "提示",
          content: "确定删除该文章吗？",
          success: async function(res) {
            if (res.confirm) {
              const res2 = await deleteArticle(articleId.value);
              if (res2.code == 200) {
                toast.show("删除成功");
                setTimeout(() => {
                  const pages = getCurrentPages();
                  const indexPage = pages.find((page) => page.route === "pages/index/index");
                  if (indexPage) {
                    indexPage.$vm.setNeedRefresh();
                  }
                  uni.switchTab({
                    url: "/pages/index/index"
                  });
                }, 1e3);
              } else {
                toast.show(res2.message);
              }
            }
          }
        });
      };
      onShareAppMessage((res) => {
        formatAppLog("log", "at pages/articleInfo/articleInfo.vue:231", res);
        return {
          title: "青春共享站",
          path: "/pages/index/index",
          imageUrl: "/static/logo.jpg"
          // 分享图片
        };
      });
      onShareTimeline(() => {
        return {
          title: "青春共享站",
          path: "/pages/index/index",
          imageUrl: "/static/logo.jpg"
          // 分享图片
        };
      });
      const __returned__ = { articleId, userInfo, commentList, text, articleInfo, toast, commentText, parentId, user, getArticleInfo, getImageLayoutClass, previewImage, getCommentList, handleComment, submitComment, handleDeleteArticle, get dayjs() {
        return dayjs;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$q(_ctx, _cache, $props, $setup, $data, $options) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k;
    const _component_wd_img = resolveEasycom(vue.resolveDynamicComponent("wd-img"), WdImg);
    const _component_wd_text = resolveEasycom(vue.resolveDynamicComponent("wd-text"), __easycom_1$4);
    const _component_wd_icon = resolveEasycom(vue.resolveDynamicComponent("wd-icon"), __easycom_0$5);
    const _component_wd_divider = resolveEasycom(vue.resolveDynamicComponent("wd-divider"), __easycom_3$1);
    const _component_wd_status_tip = resolveEasycom(vue.resolveDynamicComponent("wd-status-tip"), __easycom_4$1);
    const _component_wd_gap = resolveEasycom(vue.resolveDynamicComponent("wd-gap"), __easycom_2);
    const _component_wd_input = resolveEasycom(vue.resolveDynamicComponent("wd-input"), __easycom_0$2);
    const _component_wd_button = resolveEasycom(vue.resolveDynamicComponent("wd-button"), __easycom_3);
    const _component_wd_toast = resolveEasycom(vue.resolveDynamicComponent("wd-toast"), __easycom_2$2);
    return vue.openBlock(), vue.createElementBlock("view", { class: "articleInfo" }, [
      vue.createElementVNode("view", { class: "articleInfo-content" }, [
        vue.createCommentVNode("    头像展示区   "),
        vue.createVNode(_component_wd_img, {
          width: 40,
          height: 40,
          src: (_a = $setup.userInfo) == null ? void 0 : _a.imageUrl,
          radius: "5"
        }, null, 8, ["src"]),
        vue.createElementVNode("view", { class: "articleInfo-content-info" }, [
          vue.createCommentVNode("  昵称展示区   "),
          vue.createElementVNode(
            "view",
            { class: "articleInfo-content-info-name" },
            vue.toDisplayString((_b = $setup.userInfo) == null ? void 0 : _b.userName),
            1
            /* TEXT */
          ),
          vue.createCommentVNode("   文章内容展示区     "),
          vue.createVNode(_component_wd_text, {
            size: "16px",
            color: "#5e5e5e",
            text: (_c = $setup.articleInfo) == null ? void 0 : _c.content
          }, null, 8, ["text"]),
          vue.createCommentVNode("    图片列表展示区    "),
          ((_d = $setup.articleInfo) == null ? void 0 : _d.imagesList) != null ? (vue.openBlock(), vue.createElementBlock(
            "view",
            {
              key: 0,
              class: vue.normalizeClass(["image-list", [$setup.getImageLayoutClass((_e = $setup.articleInfo) == null ? void 0 : _e.imagesList.length)]])
            },
            [
              (vue.openBlock(true), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList((_f = $setup.articleInfo) == null ? void 0 : _f.imagesList, (url2, index) => {
                  return vue.openBlock(), vue.createElementBlock("view", {
                    key: index,
                    class: "image-wrapper"
                  }, [
                    vue.createVNode(_component_wd_img, {
                      width: "100%",
                      height: "100%",
                      mode: "aspectFill",
                      "show-menu-by-longpress": true,
                      radius: "5px",
                      src: url2,
                      onClick: vue.withModifiers(($event) => $setup.previewImage(url2, $setup.articleInfo.imagesList), ["stop"])
                    }, null, 8, ["src", "onClick"])
                  ]);
                }),
                128
                /* KEYED_FRAGMENT */
              ))
            ],
            2
            /* CLASS */
          )) : vue.createCommentVNode("v-if", true),
          vue.createCommentVNode("  日期展示区   "),
          vue.createVNode(_component_wd_text, {
            size: "12px",
            text: $setup.dayjs((_g = $setup.articleInfo) == null ? void 0 : _g.createTime).format("YYYY年MM月DD日HH:mm")
          }, null, 8, ["text"]),
          vue.createTextVNode("  "),
          ((_h = $setup.user) == null ? void 0 : _h.id) == ((_i = $setup.articleInfo) == null ? void 0 : _i.userId) ? (vue.openBlock(), vue.createBlock(_component_wd_icon, {
            key: 1,
            onClick: $setup.handleDeleteArticle,
            name: "delete",
            size: "14px",
            color: "#5A6C8F"
          })) : vue.createCommentVNode("v-if", true)
        ])
      ]),
      vue.createVNode(_component_wd_text, {
        text: `评论(` + ((_j = $setup.articleInfo) == null ? void 0 : _j.commentCount) + `)`
      }, null, 8, ["text"]),
      vue.createVNode(_component_wd_divider),
      vue.createCommentVNode("评论区域"),
      ((_k = $setup.commentList) == null ? void 0 : _k.length) != 0 ? (vue.openBlock(true), vue.createElementBlock(
        vue.Fragment,
        { key: 0 },
        vue.renderList($setup.commentList, (item) => {
          var _a2;
          return vue.openBlock(), vue.createElementBlock("view", {
            class: "comment-content",
            key: item.id
          }, [
            vue.createCommentVNode("    头像展示区   "),
            vue.createVNode(_component_wd_img, {
              width: 40,
              height: 40,
              src: item.userVO.imageUrl,
              round: ""
            }, null, 8, ["src"]),
            vue.createElementVNode("view", { class: "comment-content-info" }, [
              vue.createCommentVNode("  昵称展示区   "),
              vue.createElementVNode(
                "view",
                { class: "comment-content-info-name" },
                vue.toDisplayString((_a2 = item.userVO) == null ? void 0 : _a2.userName),
                1
                /* TEXT */
              ),
              vue.createVNode(_component_wd_text, {
                text: item.createTime,
                size: "12px"
              }, null, 8, ["text"]),
              vue.createCommentVNode("  评论内容展示区 (第一层)  "),
              vue.createElementVNode("view", { class: "comment-content-info-content" }, [
                vue.createElementVNode("view", {
                  onClick: ($event) => $setup.handleComment(item),
                  style: { "color": "#6a6a6a" }
                }, vue.toDisplayString(item.content), 9, ["onClick"]),
                vue.createCommentVNode("第二层及之后的多层评论"),
                (vue.openBlock(true), vue.createElementBlock(
                  vue.Fragment,
                  null,
                  vue.renderList(item.replies, (sub) => {
                    var _a3, _b2;
                    return vue.openBlock(), vue.createElementBlock("view", {
                      class: "comment-content-comment",
                      key: sub.id
                    }, [
                      vue.createElementVNode("view", null, [
                        vue.createElementVNode(
                          "text",
                          {
                            style: { "color": "#638fb3", "margin-right": "8rpx" },
                            lines: 1
                          },
                          vue.toDisplayString((_a3 = sub.userVO) == null ? void 0 : _a3.userName),
                          1
                          /* TEXT */
                        ),
                        vue.createVNode(_component_wd_text, { text: "回复" }),
                        vue.createElementVNode(
                          "text",
                          {
                            style: { "color": "#638fb3", "margin-left": "8rpx" },
                            lines: 1
                          },
                          vue.toDisplayString((_b2 = sub.parentUserVO) == null ? void 0 : _b2.userName),
                          1
                          /* TEXT */
                        )
                      ]),
                      vue.createElementVNode("view", {
                        onClick: ($event) => $setup.handleComment(sub),
                        style: { "font-size": "15px", "color": "#5e5e5e", "width": "100%" }
                      }, vue.toDisplayString(sub.content), 9, ["onClick"]),
                      vue.createVNode(_component_wd_text, {
                        text: sub.createTime,
                        size: "12px"
                      }, null, 8, ["text"])
                    ]);
                  }),
                  128
                  /* KEYED_FRAGMENT */
                ))
              ])
            ])
          ]);
        }),
        128
        /* KEYED_FRAGMENT */
      )) : (vue.openBlock(), vue.createBlock(_component_wd_status_tip, {
        key: 1,
        image: "content",
        tip: "暂无评论"
      })),
      vue.createVNode(_component_wd_gap, {
        "safe-area-bottom": "",
        height: "60"
      }),
      vue.createElementVNode("view", { class: "comment-bar" }, [
        vue.createElementVNode("view", { class: "comment-bar-input" }, [
          vue.createVNode(_component_wd_input, {
            modelValue: $setup.commentText,
            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $setup.commentText = $event),
            placeholder: $setup.text,
            clearable: "",
            "no-border": "",
            "prefix-icon": "edit-1",
            "placeholder-style": "color: #999;",
            onConfirm: $setup.submitComment
          }, null, 8, ["modelValue", "placeholder"]),
          vue.createVNode(_component_wd_button, {
            class: "submit-btn",
            type: "primary",
            size: "small",
            disabled: !$setup.commentText,
            onClick: $setup.submitComment
          }, {
            default: vue.withCtx(() => [
              vue.createTextVNode("发送 ")
            ]),
            _: 1
            /* STABLE */
          }, 8, ["disabled"])
        ])
      ]),
      vue.createCommentVNode("消息提示框"),
      vue.createVNode(_component_wd_toast)
    ]);
  }
  const PagesArticleInfoArticleInfo = /* @__PURE__ */ _export_sfc(_sfc_main$r, [["render", _sfc_render$q], ["__scopeId", "data-v-e87f28a7"], ["__file", "G:/Code/campus/miniProject/pages/articleInfo/articleInfo.vue"]]);
  const CHECKBOX_GROUP_KEY = Symbol("wd-checkbox-group");
  const checkboxGroupProps = {
    ...baseProps,
    /**
     * 绑定值
     */
    modelValue: {
      type: Array,
      default: () => []
    },
    /**
     * 表单模式
     */
    cell: makeBooleanProp(false),
    /**
     * 单选框形状，可选值：circle / square / button
     */
    shape: makeStringProp("circle"),
    /**
     * 选中的颜色
     */
    checkedColor: String,
    /**
     * 禁用
     */
    disabled: makeBooleanProp(false),
    /**
     * 最小选中的数量
     */
    min: makeNumberProp(0),
    /**
     * 最大选中的数量，0 为无限数量，默认为 0
     */
    max: makeNumberProp(0),
    /**
     * 同行展示
     */
    inline: makeBooleanProp(false),
    /**
     * 设置大小，可选值：large
     */
    size: String
  };
  const checkboxProps = {
    ...baseProps,
    customLabelClass: makeStringProp(""),
    customShapeClass: makeStringProp(""),
    /**
     * 单选框选中时的值
     */
    modelValue: {
      type: [String, Number, Boolean],
      required: true,
      default: false
    },
    /**
     * 单选框形状，可选值：circle / square / button
     */
    shape: {
      type: String
    },
    /**
     * 选中的颜色
     */
    checkedColor: String,
    /**
     * 禁用
     */
    disabled: {
      type: [Boolean, null],
      default: null
    },
    /**
     * 选中值，在 checkbox-group 中使用无效，需同 false-value 一块使用
     */
    trueValue: {
      type: [String, Number, Boolean],
      default: true
    },
    /**
     * 非选中时的值，在 checkbox-group 中使用无效，需同 true-value 一块使用
     */
    falseValue: {
      type: [String, Number, Boolean],
      default: false
    },
    /**
     * 设置大小，可选值：large
     */
    size: String,
    /**
     * 文字位置最大宽度
     */
    maxWidth: String
  };
  const __default__$7 = {
    name: "wd-checkbox",
    options: {
      addGlobalClass: true,
      virtualHost: true,
      styleIsolation: "shared"
    }
  };
  const _sfc_main$q = /* @__PURE__ */ vue.defineComponent({
    ...__default__$7,
    props: checkboxProps,
    emits: ["change", "update:modelValue"],
    setup(__props, { expose: __expose, emit: __emit }) {
      const props = __props;
      const emit = __emit;
      __expose({
        toggle
      });
      const { parent: checkboxGroup, index } = useParent(CHECKBOX_GROUP_KEY);
      const isChecked = vue.computed(() => {
        if (checkboxGroup) {
          return checkboxGroup.props.modelValue.indexOf(props.modelValue) > -1;
        } else {
          return props.modelValue === props.trueValue;
        }
      });
      const isFirst = vue.computed(() => {
        return index.value === 0;
      });
      const isLast = vue.computed(() => {
        const children = isDef(checkboxGroup) ? checkboxGroup.children : [];
        return index.value === children.length - 1;
      });
      const { proxy } = vue.getCurrentInstance();
      vue.watch(
        () => props.modelValue,
        () => {
          if (checkboxGroup) {
            checkName();
          }
        }
      );
      vue.watch(
        () => props.shape,
        (newValue) => {
          const type = ["circle", "square", "button"];
          if (isDef(newValue) && type.indexOf(newValue) === -1)
            formatAppLog("error", "at uni_modules/wot-design-uni/components/wd-checkbox/wd-checkbox.vue:94", `shape must be one of ${type.toString()}`);
        }
      );
      const innerShape = vue.computed(() => {
        return props.shape || getPropByPath(checkboxGroup, "props.shape") || "circle";
      });
      const innerCheckedColor = vue.computed(() => {
        return props.checkedColor || getPropByPath(checkboxGroup, "props.checkedColor");
      });
      const innerDisabled = vue.computed(() => {
        if (!checkboxGroup) {
          return props.disabled;
        }
        const { max, min, modelValue, disabled } = checkboxGroup.props;
        if (max && modelValue.length >= max && !isChecked.value || min && modelValue.length <= min && isChecked.value || props.disabled === true || disabled && props.disabled === null) {
          return true;
        }
        return props.disabled;
      });
      const innerInline = vue.computed(() => {
        return getPropByPath(checkboxGroup, "props.inline") || false;
      });
      const innerCell = vue.computed(() => {
        return getPropByPath(checkboxGroup, "props.cell") || false;
      });
      const innerSize = vue.computed(() => {
        return props.size || getPropByPath(checkboxGroup, "props.size");
      });
      vue.onBeforeMount(() => {
        if (props.modelValue === null)
          formatAppLog("error", "at uni_modules/wot-design-uni/components/wd-checkbox/wd-checkbox.vue:137", "checkbox's value must be set");
      });
      function checkName() {
        checkboxGroup && checkboxGroup.children && checkboxGroup.children.forEach((child) => {
          if (child.$.uid !== proxy.$.uid && child.modelValue === props.modelValue) {
            formatAppLog("error", "at uni_modules/wot-design-uni/components/wd-checkbox/wd-checkbox.vue:150", `The checkbox's bound value: ${props.modelValue} has been used`);
          }
        });
      }
      function toggle() {
        if (innerDisabled.value)
          return;
        if (checkboxGroup) {
          emit("change", {
            value: !isChecked.value
          });
          checkboxGroup.changeSelectState(props.modelValue);
        } else {
          const newVal = props.modelValue === props.trueValue ? props.falseValue : props.trueValue;
          emit("update:modelValue", newVal);
          emit("change", {
            value: newVal
          });
        }
      }
      const __returned__ = { props, emit, checkboxGroup, index, isChecked, isFirst, isLast, proxy, innerShape, innerCheckedColor, innerDisabled, innerInline, innerCell, innerSize, checkName, toggle, wdIcon: __easycom_0$5 };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$p(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: vue.normalizeClass(`wd-checkbox ${$setup.innerCell ? "is-cell-box" : ""} ${$setup.innerShape === "button" ? "is-button-box" : ""} ${$setup.isChecked ? "is-checked" : ""} ${$setup.isFirst ? "is-first-child" : ""} ${$setup.isLast ? "is-last-child" : ""} ${$setup.innerInline ? "is-inline" : ""} ${$setup.innerShape === "button" ? "is-button" : ""} ${$setup.innerDisabled ? "is-disabled" : ""} ${$setup.innerSize ? "is-" + $setup.innerSize : ""} ${_ctx.customClass}`),
        style: vue.normalizeStyle(_ctx.customStyle),
        onClick: $setup.toggle
      },
      [
        vue.createCommentVNode("shape为button时，移除wd-checkbox__shape，只保留wd-checkbox__label"),
        $setup.innerShape !== "button" ? (vue.openBlock(), vue.createElementBlock(
          "view",
          {
            key: 0,
            class: vue.normalizeClass(`wd-checkbox__shape ${$setup.innerShape === "square" ? "is-square" : ""} ${_ctx.customShapeClass}`),
            style: vue.normalizeStyle($setup.isChecked && !$setup.innerDisabled && $setup.innerCheckedColor ? "color :" + $setup.innerCheckedColor : "")
          },
          [
            vue.createVNode($setup["wdIcon"], {
              "custom-class": "wd-checkbox__check",
              name: "check-bold"
            })
          ],
          6
          /* CLASS, STYLE */
        )) : vue.createCommentVNode("v-if", true),
        vue.createCommentVNode("shape为button时只保留wd-checkbox__label"),
        vue.createElementVNode(
          "view",
          {
            class: vue.normalizeClass(`wd-checkbox__label ${_ctx.customLabelClass}`),
            style: vue.normalizeStyle($setup.isChecked && $setup.innerShape === "button" && !$setup.innerDisabled && $setup.innerCheckedColor ? "color:" + $setup.innerCheckedColor : "")
          },
          [
            vue.createCommentVNode("button选中时展示的icon"),
            $setup.innerShape === "button" && $setup.isChecked ? (vue.openBlock(), vue.createBlock($setup["wdIcon"], {
              key: 0,
              "custom-class": "wd-checkbox__btn-check",
              name: "check-bold"
            })) : vue.createCommentVNode("v-if", true),
            vue.createCommentVNode("文案"),
            vue.createElementVNode(
              "view",
              {
                class: "wd-checkbox__txt",
                style: vue.normalizeStyle(_ctx.maxWidth ? "max-width:" + _ctx.maxWidth : "")
              },
              [
                vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
              ],
              4
              /* STYLE */
            )
          ],
          6
          /* CLASS, STYLE */
        )
      ],
      6
      /* CLASS, STYLE */
    );
  }
  const wdCheckbox = /* @__PURE__ */ _export_sfc(_sfc_main$q, [["render", _sfc_render$p], ["__scopeId", "data-v-66fc790e"], ["__file", "G:/Code/campus/miniProject/uni_modules/wot-design-uni/components/wd-checkbox/wd-checkbox.vue"]]);
  const __default__$6 = {
    name: "wd-checkbox-group",
    options: {
      addGlobalClass: true,
      virtualHost: true,
      styleIsolation: "shared"
    }
  };
  const _sfc_main$p = /* @__PURE__ */ vue.defineComponent({
    ...__default__$6,
    props: checkboxGroupProps,
    emits: ["change", "update:modelValue"],
    setup(__props, { expose: __expose, emit: __emit }) {
      __expose();
      const props = __props;
      const emit = __emit;
      const { linkChildren } = useChildren(CHECKBOX_GROUP_KEY);
      linkChildren({ props, changeSelectState });
      vue.watch(
        () => props.modelValue,
        (newValue) => {
          if (new Set(newValue).size !== newValue.length) {
            formatAppLog("error", "at uni_modules/wot-design-uni/components/wd-checkbox-group/wd-checkbox-group.vue:36", "checkboxGroup's bound value includes same value");
          }
          if (newValue.length < props.min) {
            formatAppLog("error", "at uni_modules/wot-design-uni/components/wd-checkbox-group/wd-checkbox-group.vue:40", "checkboxGroup's bound value's length can't be less than min");
          }
          if (props.max !== 0 && newValue.length > props.max) {
            formatAppLog("error", "at uni_modules/wot-design-uni/components/wd-checkbox-group/wd-checkbox-group.vue:44", "checkboxGroup's bound value's length can't be large than max");
          }
        },
        { deep: true, immediate: true }
      );
      vue.watch(
        () => props.shape,
        (newValue) => {
          const type = ["circle", "square", "button"];
          if (type.indexOf(newValue) === -1)
            formatAppLog("error", "at uni_modules/wot-design-uni/components/wd-checkbox-group/wd-checkbox-group.vue:55", `shape must be one of ${type.toString()}`);
        },
        { deep: true, immediate: true }
      );
      vue.watch(
        () => props.min,
        (newValue) => {
          checkNumRange(newValue, "min");
        },
        { deep: true, immediate: true }
      );
      vue.watch(
        () => props.max,
        (newValue) => {
          checkNumRange(newValue, "max");
        },
        { deep: true, immediate: true }
      );
      function changeSelectState(value) {
        const temp = deepClone(props.modelValue);
        const index = temp.indexOf(value);
        if (index > -1) {
          temp.splice(index, 1);
        } else {
          temp.push(value);
        }
        emit("update:modelValue", temp);
        emit("change", {
          value: temp
        });
      }
      const __returned__ = { props, emit, linkChildren, changeSelectState };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$o(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: vue.normalizeClass(`wd-checkbox-group ${_ctx.shape === "button" && _ctx.cell ? "is-button" : ""} ${_ctx.customClass}`),
        style: vue.normalizeStyle(_ctx.customStyle)
      },
      [
        vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
      ],
      6
      /* CLASS, STYLE */
    );
  }
  const wdCheckboxGroup = /* @__PURE__ */ _export_sfc(_sfc_main$p, [["render", _sfc_render$o], ["__scopeId", "data-v-395de5f2"], ["__file", "G:/Code/campus/miniProject/uni_modules/wot-design-uni/components/wd-checkbox-group/wd-checkbox-group.vue"]]);
  const RADIO_GROUP_KEY = Symbol("wd-radio-group");
  const radioGroupProps = {
    ...baseProps,
    /** 会自动选中value对应的单选框 */
    modelValue: [String, Number, Boolean],
    /** 单选框形状，可选值为 dot / button / check，默认为 check */
    shape: makeStringProp("check"),
    /** 选中的颜色，默认为 #4D80F0 */
    checkedColor: String,
    /** 是否禁用，默认为 false */
    disabled: makeBooleanProp(false),
    /** 表单模式，默认为 false */
    cell: makeBooleanProp(false),
    /** 设置大小，默认为空 */
    size: makeStringProp(""),
    /** 同行展示，默认为 false */
    inline: makeBooleanProp(false),
    /** 图标位置，默认为 left */
    iconPlacement: makeStringProp("auto")
  };
  const radioProps = {
    ...baseProps,
    /** 选中时的值 */
    value: makeRequiredProp([String, Number, Boolean]),
    /** 单选框的形状 */
    shape: String,
    /** 选中的颜色 */
    checkedColor: String,
    /** 禁用 */
    disabled: {
      type: [Boolean, null],
      default: null
    },
    /** 单元格 */
    cell: {
      type: [Boolean, null],
      default: null
    },
    /** 大小 */
    size: String,
    /** 内联 */
    inline: {
      type: [Boolean, null],
      default: null
    },
    /** 最大宽度 */
    maxWidth: String,
    /**
     * 图标位置
     * 可选值: 'left' | 'right' | 'auto'
     */
    iconPlacement: {
      type: String
    }
  };
  const __default__$5 = {
    name: "wd-radio",
    options: {
      virtualHost: true,
      addGlobalClass: true,
      styleIsolation: "shared"
    }
  };
  const _sfc_main$o = /* @__PURE__ */ vue.defineComponent({
    ...__default__$5,
    props: radioProps,
    setup(__props, { expose: __expose }) {
      __expose();
      const props = __props;
      const { parent: radioGroup } = useParent(RADIO_GROUP_KEY);
      const isChecked = vue.computed(() => {
        if (radioGroup) {
          return props.value === radioGroup.props.modelValue;
        } else {
          return false;
        }
      });
      const shapeValue = vue.computed(() => {
        return props.shape || getPropByPath(radioGroup, "props.shape");
      });
      const checkedColorValue = vue.computed(() => {
        return props.checkedColor || getPropByPath(radioGroup, "props.checkedColor");
      });
      const disabledValue = vue.computed(() => {
        if (isDef(props.disabled)) {
          return props.disabled;
        } else {
          return getPropByPath(radioGroup, "props.disabled");
        }
      });
      const inlineValue = vue.computed(() => {
        if (isDef(props.inline)) {
          return props.inline;
        } else {
          return getPropByPath(radioGroup, "props.inline");
        }
      });
      const sizeValue = vue.computed(() => {
        return props.size || getPropByPath(radioGroup, "props.size");
      });
      const cellValue = vue.computed(() => {
        if (isDef(props.cell)) {
          return props.cell;
        } else {
          return getPropByPath(radioGroup, "props.cell");
        }
      });
      const iconPlacement = vue.computed(() => {
        if (isDef(props.iconPlacement)) {
          return props.iconPlacement;
        } else {
          return getPropByPath(radioGroup, "props.iconPlacement");
        }
      });
      vue.watch(
        () => props.shape,
        (newValue) => {
          const type = ["check", "dot", "button"];
          if (!newValue || type.indexOf(newValue) === -1)
            formatAppLog("error", "at uni_modules/wot-design-uni/components/wd-radio/wd-radio.vue:102", `shape must be one of ${type.toString()}`);
        }
      );
      function handleClick() {
        const { value } = props;
        if (!disabledValue.value && radioGroup && isDef(value)) {
          radioGroup.updateValue(value);
        }
      }
      const __returned__ = { props, radioGroup, isChecked, shapeValue, checkedColorValue, disabledValue, inlineValue, sizeValue, cellValue, iconPlacement, handleClick, wdIcon: __easycom_0$5 };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$n(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: vue.normalizeClass(`wd-radio ${$setup.cellValue ? "is-cell-radio" : ""} ${$setup.cellValue && $setup.shapeValue == "button" ? "is-button-radio" : ""} ${$setup.sizeValue ? "is-" + $setup.sizeValue : ""} ${$setup.inlineValue ? "is-inline" : ""} ${$setup.isChecked ? "is-checked" : ""} ${$setup.shapeValue !== "check" ? "is-" + $setup.shapeValue : ""} ${$setup.disabledValue ? "is-disabled" : ""} icon-placement-${$setup.iconPlacement} ${_ctx.customClass}`),
        style: vue.normalizeStyle(_ctx.customStyle),
        onClick: $setup.handleClick
      },
      [
        vue.createElementVNode(
          "view",
          {
            class: "wd-radio__label",
            style: vue.normalizeStyle(`${_ctx.maxWidth ? "max-width:" + _ctx.maxWidth : ""};  ${$setup.isChecked && $setup.shapeValue === "button" && !$setup.disabledValue ? "color :" + $setup.checkedColorValue : ""}`)
          },
          [
            vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
          ],
          4
          /* STYLE */
        ),
        vue.createElementVNode(
          "view",
          {
            class: "wd-radio__shape",
            style: vue.normalizeStyle($setup.isChecked && !$setup.disabledValue ? "color: " + $setup.checkedColorValue : "")
          },
          [
            $setup.shapeValue === "check" ? (vue.openBlock(), vue.createBlock($setup["wdIcon"], {
              key: 0,
              style: vue.normalizeStyle($setup.isChecked && !$setup.disabledValue ? "color: " + $setup.checkedColorValue : ""),
              name: "check"
            }, null, 8, ["style"])) : vue.createCommentVNode("v-if", true)
          ],
          4
          /* STYLE */
        )
      ],
      6
      /* CLASS, STYLE */
    );
  }
  const wdRadio = /* @__PURE__ */ _export_sfc(_sfc_main$o, [["render", _sfc_render$n], ["__scopeId", "data-v-a54631cc"], ["__file", "G:/Code/campus/miniProject/uni_modules/wot-design-uni/components/wd-radio/wd-radio.vue"]]);
  const __default__$4 = {
    name: "wd-radio-group",
    options: {
      virtualHost: true,
      addGlobalClass: true,
      styleIsolation: "shared"
    }
  };
  const _sfc_main$n = /* @__PURE__ */ vue.defineComponent({
    ...__default__$4,
    props: radioGroupProps,
    emits: ["change", "update:modelValue"],
    setup(__props, { expose: __expose, emit: __emit }) {
      __expose();
      const props = __props;
      const emit = __emit;
      const { linkChildren, children } = useChildren(RADIO_GROUP_KEY);
      linkChildren({ props, updateValue });
      vue.watch(
        () => props.shape,
        (newValue) => {
          const type = ["check", "dot", "button"];
          if (type.indexOf(newValue) === -1)
            formatAppLog("error", "at uni_modules/wot-design-uni/components/wd-radio-group/wd-radio-group.vue:34", `shape must be one of ${type.toString()}`);
        },
        { deep: true, immediate: true }
      );
      function updateValue(value) {
        emit("update:modelValue", value);
        emit("change", {
          value
        });
      }
      const __returned__ = { props, emit, linkChildren, children, updateValue };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$m(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: vue.normalizeClass(`wd-radio-group  ${_ctx.customClass} ${_ctx.cell && _ctx.shape === "button" ? "is-button" : ""}`),
        style: vue.normalizeStyle(_ctx.customStyle)
      },
      [
        vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
      ],
      6
      /* CLASS, STYLE */
    );
  }
  const wdRadioGroup = /* @__PURE__ */ _export_sfc(_sfc_main$n, [["render", _sfc_render$m], ["__scopeId", "data-v-1a9e9b05"], ["__file", "G:/Code/campus/miniProject/uni_modules/wot-design-uni/components/wd-radio-group/wd-radio-group.vue"]]);
  const selectPickerProps = {
    ...baseProps,
    /** 选择器左侧文案 */
    label: String,
    /** 设置左侧标题宽度 */
    labelWidth: makeStringProp("33%"),
    /** 禁用 */
    disabled: makeBooleanProp(false),
    /** 只读 */
    readonly: Boolean,
    /** 选择器占位符 */
    placeholder: String,
    /** 弹出层标题 */
    title: String,
    /** 选择器的值靠右展示 */
    alignRight: makeBooleanProp(false),
    /** 是否为错误状态，错误状态时右侧内容为红色 */
    error: makeBooleanProp(false),
    /** 必填样式 */
    required: makeBooleanProp(false),
    /** 使用 label 插槽时设置该选项 */
    useLabelSlot: makeBooleanProp(false),
    /** 使用默认插槽时设置该选项 */
    useDefaultSlot: makeBooleanProp(false),
    /** 设置选择器大小 */
    size: String,
    /** 选中的颜色（单/复选框） */
    checkedColor: String,
    /** 最小选中的数量（仅在复选框类型下生效，`type`类型为`checkbox`） */
    min: makeNumberProp(0),
    /** 最大选中的数量，0 为无限数量，默认为 0（仅在复选框类型下生效，`type`类型为`checkbox`） */
    max: makeNumberProp(0),
    /** 设置 picker 内部的选项组尺寸大小 （单/复选框） */
    selectSize: String,
    /** 加载中 */
    loading: makeBooleanProp(false),
    /** 加载的颜色，只能使用十六进制的色值写法，且不能使用缩写 */
    loadingColor: makeStringProp("#4D80F0"),
    /** 点击遮罩是否关闭 */
    closeOnClickModal: makeBooleanProp(true),
    /** 选中项，`type`类型为`checkbox`时，类型为 array；`type`为`radio` 时 ，类型为 number / boolean / string */
    modelValue: makeRequiredProp([String, Number, Boolean, Array]),
    /** 选择器数据，一维数组 */
    columns: makeArrayProp(),
    /** 单复选选择器类型 */
    type: makeStringProp("checkbox"),
    /** 选项对象中，value 对应的 key */
    valueKey: makeStringProp("value"),
    /** 选项对象中，展示的文本对应的 key */
    labelKey: makeStringProp("label"),
    /** 确认按钮文案 */
    confirmButtonText: String,
    /** 自定义展示文案的格式化函数，返回一个字符串 */
    displayFormat: Function,
    /** 确定前校验函数，接收 (value, resolve) 参数，通过 resolve 继续执行 picker，resolve 接收 1 个 boolean 参数 */
    beforeConfirm: Function,
    /** 弹窗层级 */
    zIndex: makeNumberProp(15),
    /** 弹出面板是否设置底部安全距离（iphone X 类型的机型） */
    safeAreaInsetBottom: makeBooleanProp(true),
    /** 可搜索（目前只支持本地搜索） */
    filterable: makeBooleanProp(false),
    /** 搜索框占位符 */
    filterPlaceholder: String,
    /** 是否超出隐藏 */
    ellipsis: makeBooleanProp(false),
    /** 重新打开是否滚动到选中项 */
    scrollIntoView: makeBooleanProp(true),
    /** 表单域 `model` 字段名，在使用表单校验功能的情况下，该属性是必填的 */
    prop: String,
    /** 表单验证规则，结合`wd-form`组件使用 */
    rules: makeArrayProp(),
    /** 自定义内容样式类 */
    customContentClass: makeStringProp(""),
    /** 自定义标签样式类 */
    customLabelClass: makeStringProp(""),
    /** 自定义值样式类 */
    customValueClass: makeStringProp(""),
    /** 是否显示确认按钮（radio类型生效），默认值为：true */
    showConfirm: makeBooleanProp(true),
    /**
     * 显示清空按钮
     */
    clearable: makeBooleanProp(false)
  };
  const __default__$3 = {
    name: "wd-select-picker",
    options: {
      addGlobalClass: true,
      virtualHost: true,
      styleIsolation: "shared"
    }
  };
  const _sfc_main$m = /* @__PURE__ */ vue.defineComponent({
    ...__default__$3,
    props: selectPickerProps,
    emits: ["change", "cancel", "confirm", "clear", "update:modelValue", "open", "close"],
    setup(__props, { expose: __expose, emit: __emit }) {
      const { translate } = useTranslate("select-picker");
      const props = __props;
      const emit = __emit;
      const pickerShow = vue.ref(false);
      const selectList = vue.ref([]);
      const isConfirm = vue.ref(false);
      const lastSelectList = vue.ref([]);
      const filterVal = vue.ref("");
      const filterColumns = vue.ref([]);
      const scrollTop = vue.ref(0);
      const cell = useCell();
      const showValue = vue.computed(() => {
        const value = valueFormat(props.modelValue);
        let showValueTemp = "";
        if (props.displayFormat) {
          showValueTemp = props.displayFormat(value, props.columns);
        } else {
          const { type, labelKey } = props;
          if (type === "checkbox") {
            const selectedItems = (isArray(value) ? value : []).map((item) => {
              return getSelectedItem(item);
            });
            showValueTemp = selectedItems.map((item) => {
              return item[labelKey];
            }).join(", ");
          } else if (type === "radio") {
            const selectedItem = getSelectedItem(value);
            showValueTemp = selectedItem[labelKey];
          } else {
            showValueTemp = value;
          }
        }
        return showValueTemp;
      });
      vue.watch(
        () => props.modelValue,
        (newValue) => {
          if (newValue === selectList.value)
            return;
          selectList.value = valueFormat(newValue);
          lastSelectList.value = valueFormat(newValue);
        },
        {
          deep: true,
          immediate: true
        }
      );
      vue.watch(
        () => props.columns,
        (newValue) => {
          if (props.filterable && filterVal.value) {
            formatFilterColumns(newValue, filterVal.value);
          } else {
            filterColumns.value = newValue;
          }
        },
        {
          deep: true,
          immediate: true
        }
      );
      vue.watch(
        () => props.displayFormat,
        (fn) => {
          if (fn && !isFunction(fn)) {
            formatAppLog("error", "at uni_modules/wot-design-uni/components/wd-select-picker/wd-select-picker.vue:210", "The type of displayFormat must be Function");
          }
        },
        {
          deep: true,
          immediate: true
        }
      );
      vue.watch(
        () => props.beforeConfirm,
        (fn) => {
          if (fn && !isFunction(fn)) {
            formatAppLog("error", "at uni_modules/wot-design-uni/components/wd-select-picker/wd-select-picker.vue:223", "The type of beforeConfirm must be Function");
          }
        },
        {
          deep: true,
          immediate: true
        }
      );
      const { parent: form } = useParent(FORM_KEY);
      const errorMessage = vue.computed(() => {
        if (form && props.prop && form.errorMessages && form.errorMessages[props.prop]) {
          return form.errorMessages[props.prop];
        } else {
          return "";
        }
      });
      const isRequired = vue.computed(() => {
        let formRequired = false;
        if (form && form.props.rules) {
          const rules = form.props.rules;
          for (const key in rules) {
            if (Object.prototype.hasOwnProperty.call(rules, key) && key === props.prop && Array.isArray(rules[key])) {
              formRequired = rules[key].some((rule) => rule.required);
            }
          }
        }
        return props.required || props.rules.some((rule) => rule.required) || formRequired;
      });
      vue.onBeforeMount(() => {
        selectList.value = valueFormat(props.modelValue);
        filterColumns.value = props.columns;
      });
      const { proxy } = vue.getCurrentInstance();
      async function setScrollIntoView() {
        let wraperSelector = "";
        let selectorPromise = [];
        if (isDef(selectList.value) && selectList.value !== "" && !isArray(selectList.value)) {
          wraperSelector = "#wd-radio-group";
          selectorPromise = [getRect(`#radio${selectList.value}`, false, proxy)];
        } else if (isArray(selectList.value) && selectList.value.length > 0) {
          selectList.value.forEach((value) => {
            selectorPromise.push(getRect(`#check${value}`, false, proxy));
          });
          wraperSelector = "#wd-checkbox-group";
        }
        if (wraperSelector) {
          await pause(2e3 / 30);
          Promise.all([getRect(".wd-select-picker__wrapper", false, proxy), getRect(wraperSelector, false, proxy), ...selectorPromise]).then((res) => {
            if (isDef(res) && isArray(res)) {
              const scrollView = res[0];
              const wraper = res[1];
              const target = res.slice(2) || [];
              if (isDef(wraper) && isDef(scrollView)) {
                const index = target.findIndex((item) => {
                  return item.bottom > scrollView.top && item.top < scrollView.bottom;
                });
                if (index < 0) {
                  scrollTop.value = -1;
                  vue.nextTick(() => {
                    scrollTop.value = Math.max(0, target[0].top - wraper.top - scrollView.height / 2);
                  });
                }
              }
            }
          });
        }
      }
      function noop() {
      }
      function getSelectedItem(value) {
        const { valueKey, labelKey, columns } = props;
        const selecteds = columns.filter((item) => {
          return item[valueKey] === value;
        });
        if (selecteds.length > 0) {
          return selecteds[0];
        }
        return {
          [valueKey]: value,
          [labelKey]: ""
        };
      }
      function valueFormat(value) {
        return props.type === "checkbox" ? isArray(value) ? value : [] : value;
      }
      function handleChange({ value }) {
        selectList.value = value;
        emit("change", { value });
        if (props.type === "radio" && !props.showConfirm) {
          onConfirm();
        }
      }
      function close() {
        pickerShow.value = false;
        if (!isConfirm.value) {
          selectList.value = valueFormat(lastSelectList.value);
        }
        emit("cancel");
        emit("close");
      }
      function open() {
        if (props.disabled || props.readonly)
          return;
        selectList.value = valueFormat(props.modelValue);
        pickerShow.value = true;
        isConfirm.value = false;
        emit("open");
      }
      function onConfirm() {
        if (props.loading) {
          pickerShow.value = false;
          emit("confirm");
          emit("close");
          return;
        }
        if (props.beforeConfirm) {
          props.beforeConfirm(selectList.value, (isPass) => {
            isPass && handleConfirm();
          });
        } else {
          handleConfirm();
        }
      }
      function handleConfirm() {
        isConfirm.value = true;
        pickerShow.value = false;
        lastSelectList.value = valueFormat(selectList.value);
        let selectedItems = {};
        if (props.type === "checkbox") {
          selectedItems = (isArray(lastSelectList.value) ? lastSelectList.value : []).map((item) => {
            return getSelectedItem(item);
          });
        } else {
          selectedItems = getSelectedItem(lastSelectList.value);
        }
        emit("update:modelValue", lastSelectList.value);
        emit("confirm", {
          value: lastSelectList.value,
          selectedItems
        });
        emit("close");
      }
      function getFilterText(label, filterVal2) {
        const reg = new RegExp(`(${filterVal2})`, "g");
        return label.split(reg).map((text) => {
          return {
            type: text === filterVal2 ? "active" : "normal",
            label: text
          };
        });
      }
      function handleFilterChange({ value }) {
        if (value === "") {
          filterColumns.value = [];
          filterVal.value = value;
          vue.nextTick(() => {
            filterColumns.value = props.columns;
          });
        } else {
          filterVal.value = value;
          formatFilterColumns(props.columns, value);
        }
      }
      function formatFilterColumns(columns, filterVal2) {
        const filterColumnsTemp = columns.filter((item) => {
          return item[props.labelKey].indexOf(filterVal2) > -1;
        });
        const formatFilterColumns2 = filterColumnsTemp.map((item) => {
          return {
            ...item,
            [props.labelKey]: getFilterText(item[props.labelKey], filterVal2)
          };
        });
        filterColumns.value = [];
        vue.nextTick(() => {
          filterColumns.value = formatFilterColumns2;
        });
      }
      const showConfirm = vue.computed(() => {
        return props.type === "radio" && props.showConfirm || props.type === "checkbox";
      });
      const showClear = vue.computed(() => {
        return props.clearable && !props.disabled && !props.readonly && showValue.value.length;
      });
      function handleClear() {
        emit("update:modelValue", props.type === "checkbox" ? [] : "");
        emit("clear");
      }
      const showArrow = vue.computed(() => {
        return !props.disabled && !props.readonly && !showClear.value;
      });
      __expose({
        close,
        open
      });
      const __returned__ = { translate, props, emit, pickerShow, selectList, isConfirm, lastSelectList, filterVal, filterColumns, scrollTop, cell, showValue, form, errorMessage, isRequired, proxy, setScrollIntoView, noop, getSelectedItem, valueFormat, handleChange, close, open, onConfirm, handleConfirm, getFilterText, handleFilterChange, formatFilterColumns, showConfirm, showClear, handleClear, showArrow, wdActionSheet, wdCheckbox, wdCheckboxGroup, wdRadio, wdRadioGroup, wdButton: __easycom_3, wdLoading: __easycom_0$3, get isArray() {
        return isArray;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$l(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_wd_icon = resolveEasycom(vue.resolveDynamicComponent("wd-icon"), __easycom_0$5);
    const _component_wd_search = resolveEasycom(vue.resolveDynamicComponent("wd-search"), __easycom_1$5);
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: vue.normalizeClass(`wd-select-picker ${$setup.cell.border.value ? "is-border" : ""} ${_ctx.customClass}`),
        style: vue.normalizeStyle(_ctx.customStyle)
      },
      [
        vue.createElementVNode("view", {
          class: "wd-select-picker__field",
          onClick: $setup.open
        }, [
          _ctx.useDefaultSlot ? vue.renderSlot(_ctx.$slots, "default", { key: 0 }, void 0, true) : (vue.openBlock(), vue.createElementBlock(
            "view",
            {
              key: 1,
              class: vue.normalizeClass(`wd-select-picker__cell ${_ctx.disabled && "is-disabled"} ${_ctx.readonly && "is-readonly"} ${_ctx.alignRight && "is-align-right"} ${_ctx.error && "is-error"} ${_ctx.size && "is-" + _ctx.size}`)
            },
            [
              _ctx.label || _ctx.useLabelSlot ? (vue.openBlock(), vue.createElementBlock(
                "view",
                {
                  key: 0,
                  class: vue.normalizeClass(`wd-select-picker__label ${$setup.isRequired && "is-required"} ${_ctx.customLabelClass}`),
                  style: vue.normalizeStyle(_ctx.labelWidth ? "min-width:" + _ctx.labelWidth + ";max-width:" + _ctx.labelWidth + ";" : "")
                },
                [
                  _ctx.label ? (vue.openBlock(), vue.createElementBlock(
                    vue.Fragment,
                    { key: 0 },
                    [
                      vue.createTextVNode(
                        vue.toDisplayString(_ctx.label),
                        1
                        /* TEXT */
                      )
                    ],
                    64
                    /* STABLE_FRAGMENT */
                  )) : vue.renderSlot(_ctx.$slots, "label", { key: 1 }, void 0, true)
                ],
                6
                /* CLASS, STYLE */
              )) : vue.createCommentVNode("v-if", true),
              vue.createElementVNode("view", { class: "wd-select-picker__body" }, [
                vue.createElementVNode("view", { class: "wd-select-picker__value-wraper" }, [
                  vue.createElementVNode(
                    "view",
                    {
                      class: vue.normalizeClass(`wd-select-picker__value ${_ctx.ellipsis && "is-ellipsis"} ${_ctx.customValueClass} ${$setup.showValue ? "" : "wd-select-picker__value--placeholder"}`)
                    },
                    vue.toDisplayString($setup.showValue || _ctx.placeholder || $setup.translate("placeholder")),
                    3
                    /* TEXT, CLASS */
                  ),
                  $setup.showArrow ? (vue.openBlock(), vue.createBlock(_component_wd_icon, {
                    key: 0,
                    "custom-class": "wd-select-picker__arrow",
                    name: "arrow-right"
                  })) : $setup.showClear ? (vue.openBlock(), vue.createElementBlock("view", {
                    key: 1,
                    onClick: vue.withModifiers($setup.handleClear, ["stop"])
                  }, [
                    vue.createVNode(_component_wd_icon, {
                      "custom-class": "wd-select-picker__clear",
                      name: "error-fill"
                    })
                  ])) : vue.createCommentVNode("v-if", true)
                ]),
                $setup.errorMessage ? (vue.openBlock(), vue.createElementBlock(
                  "view",
                  {
                    key: 0,
                    class: "wd-select-picker__error-message"
                  },
                  vue.toDisplayString($setup.errorMessage),
                  1
                  /* TEXT */
                )) : vue.createCommentVNode("v-if", true)
              ])
            ],
            2
            /* CLASS */
          ))
        ]),
        vue.createVNode($setup["wdActionSheet"], {
          modelValue: $setup.pickerShow,
          "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $setup.pickerShow = $event),
          duration: 250,
          title: _ctx.title || $setup.translate("title"),
          "close-on-click-modal": _ctx.closeOnClickModal,
          "z-index": _ctx.zIndex,
          "safe-area-inset-bottom": _ctx.safeAreaInsetBottom,
          onClose: $setup.close,
          onOpened: _cache[4] || (_cache[4] = ($event) => _ctx.scrollIntoView ? $setup.setScrollIntoView() : ""),
          "custom-header-class": "wd-select-picker__header"
        }, {
          default: vue.withCtx(() => [
            _ctx.filterable ? (vue.openBlock(), vue.createBlock(_component_wd_search, {
              key: 0,
              modelValue: $setup.filterVal,
              "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $setup.filterVal = $event),
              placeholder: _ctx.filterPlaceholder || $setup.translate("filterPlaceholder"),
              "hide-cancel": "",
              "placeholder-left": "",
              onChange: $setup.handleFilterChange
            }, null, 8, ["modelValue", "placeholder"])) : vue.createCommentVNode("v-if", true),
            vue.createElementVNode("scroll-view", {
              class: vue.normalizeClass(`wd-select-picker__wrapper ${_ctx.filterable ? "is-filterable" : ""} ${_ctx.loading ? "is-loading" : ""} ${_ctx.customContentClass}`),
              "scroll-y": !_ctx.loading,
              "scroll-top": $setup.scrollTop,
              "scroll-with-animation": true
            }, [
              vue.createCommentVNode(" 多选 "),
              _ctx.type === "checkbox" && $setup.isArray($setup.selectList) ? (vue.openBlock(), vue.createElementBlock("view", {
                key: 0,
                id: "wd-checkbox-group"
              }, [
                vue.createVNode($setup["wdCheckboxGroup"], {
                  modelValue: $setup.selectList,
                  "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $setup.selectList = $event),
                  cell: "",
                  size: _ctx.selectSize,
                  "checked-color": _ctx.checkedColor,
                  min: _ctx.min,
                  max: _ctx.max,
                  onChange: $setup.handleChange
                }, {
                  default: vue.withCtx(() => [
                    (vue.openBlock(true), vue.createElementBlock(
                      vue.Fragment,
                      null,
                      vue.renderList($setup.filterColumns, (item) => {
                        return vue.openBlock(), vue.createElementBlock("view", {
                          key: item[_ctx.valueKey],
                          id: "check" + item[_ctx.valueKey]
                        }, [
                          vue.createVNode($setup["wdCheckbox"], {
                            modelValue: item[_ctx.valueKey],
                            disabled: item.disabled
                          }, {
                            default: vue.withCtx(() => [
                              _ctx.filterable && $setup.filterVal ? (vue.openBlock(true), vue.createElementBlock(
                                vue.Fragment,
                                { key: 0 },
                                vue.renderList(item[_ctx.labelKey], (text) => {
                                  return vue.openBlock(), vue.createElementBlock(
                                    vue.Fragment,
                                    {
                                      key: text.label
                                    },
                                    [
                                      text.type === "active" ? (vue.openBlock(), vue.createElementBlock(
                                        "text",
                                        {
                                          key: 0,
                                          class: "wd-select-picker__text-active"
                                        },
                                        vue.toDisplayString(text.label),
                                        1
                                        /* TEXT */
                                      )) : (vue.openBlock(), vue.createElementBlock(
                                        vue.Fragment,
                                        { key: 1 },
                                        [
                                          vue.createTextVNode(
                                            vue.toDisplayString(text.label),
                                            1
                                            /* TEXT */
                                          )
                                        ],
                                        64
                                        /* STABLE_FRAGMENT */
                                      ))
                                    ],
                                    64
                                    /* STABLE_FRAGMENT */
                                  );
                                }),
                                128
                                /* KEYED_FRAGMENT */
                              )) : (vue.openBlock(), vue.createElementBlock(
                                vue.Fragment,
                                { key: 1 },
                                [
                                  vue.createTextVNode(
                                    vue.toDisplayString(item[_ctx.labelKey]),
                                    1
                                    /* TEXT */
                                  )
                                ],
                                64
                                /* STABLE_FRAGMENT */
                              ))
                            ]),
                            _: 2
                            /* DYNAMIC */
                          }, 1032, ["modelValue", "disabled"])
                        ], 8, ["id"]);
                      }),
                      128
                      /* KEYED_FRAGMENT */
                    ))
                  ]),
                  _: 1
                  /* STABLE */
                }, 8, ["modelValue", "size", "checked-color", "min", "max"])
              ])) : vue.createCommentVNode("v-if", true),
              vue.createCommentVNode(" 单选 "),
              _ctx.type === "radio" && !$setup.isArray($setup.selectList) ? (vue.openBlock(), vue.createElementBlock("view", {
                key: 1,
                id: "wd-radio-group"
              }, [
                vue.createVNode($setup["wdRadioGroup"], {
                  modelValue: $setup.selectList,
                  "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $setup.selectList = $event),
                  cell: "",
                  size: _ctx.selectSize,
                  "checked-color": _ctx.checkedColor,
                  onChange: $setup.handleChange
                }, {
                  default: vue.withCtx(() => [
                    (vue.openBlock(true), vue.createElementBlock(
                      vue.Fragment,
                      null,
                      vue.renderList($setup.filterColumns, (item, index) => {
                        return vue.openBlock(), vue.createElementBlock("view", {
                          key: index,
                          id: "radio" + item[_ctx.valueKey]
                        }, [
                          vue.createVNode($setup["wdRadio"], {
                            value: item[_ctx.valueKey],
                            disabled: item.disabled
                          }, {
                            default: vue.withCtx(() => [
                              _ctx.filterable && $setup.filterVal ? (vue.openBlock(true), vue.createElementBlock(
                                vue.Fragment,
                                { key: 0 },
                                vue.renderList(item[_ctx.labelKey], (text) => {
                                  return vue.openBlock(), vue.createElementBlock(
                                    "text",
                                    {
                                      key: text.label,
                                      class: vue.normalizeClass(`${text.type === "active" ? "wd-select-picker__text-active" : ""}`)
                                    },
                                    vue.toDisplayString(text.label),
                                    3
                                    /* TEXT, CLASS */
                                  );
                                }),
                                128
                                /* KEYED_FRAGMENT */
                              )) : (vue.openBlock(), vue.createElementBlock(
                                vue.Fragment,
                                { key: 1 },
                                [
                                  vue.createTextVNode(
                                    vue.toDisplayString(item[_ctx.labelKey]),
                                    1
                                    /* TEXT */
                                  )
                                ],
                                64
                                /* STABLE_FRAGMENT */
                              ))
                            ]),
                            _: 2
                            /* DYNAMIC */
                          }, 1032, ["value", "disabled"])
                        ], 8, ["id"]);
                      }),
                      128
                      /* KEYED_FRAGMENT */
                    ))
                  ]),
                  _: 1
                  /* STABLE */
                }, 8, ["modelValue", "size", "checked-color"])
              ])) : vue.createCommentVNode("v-if", true),
              _ctx.loading ? (vue.openBlock(), vue.createElementBlock(
                "view",
                {
                  key: 2,
                  class: "wd-select-picker__loading",
                  onTouchmove: $setup.noop
                },
                [
                  vue.createVNode($setup["wdLoading"], { color: _ctx.loadingColor }, null, 8, ["color"])
                ],
                32
                /* NEED_HYDRATION */
              )) : vue.createCommentVNode("v-if", true)
            ], 10, ["scroll-y", "scroll-top"]),
            vue.createCommentVNode(" 确认按钮 "),
            $setup.showConfirm ? (vue.openBlock(), vue.createElementBlock("view", {
              key: 1,
              class: "wd-select-picker__footer"
            }, [
              vue.createVNode($setup["wdButton"], {
                block: "",
                size: "large",
                onClick: $setup.onConfirm,
                disabled: _ctx.loading
              }, {
                default: vue.withCtx(() => [
                  vue.createTextVNode(
                    vue.toDisplayString(_ctx.confirmButtonText || $setup.translate("confirm")),
                    1
                    /* TEXT */
                  )
                ]),
                _: 1
                /* STABLE */
              }, 8, ["disabled"])
            ])) : vue.createCommentVNode("v-if", true)
          ]),
          _: 1
          /* STABLE */
        }, 8, ["modelValue", "title", "close-on-click-modal", "z-index", "safe-area-inset-bottom"])
      ],
      6
      /* CLASS, STYLE */
    );
  }
  const __easycom_5 = /* @__PURE__ */ _export_sfc(_sfc_main$m, [["render", _sfc_render$l], ["__scopeId", "data-v-b8ce50f5"], ["__file", "G:/Code/campus/miniProject/uni_modules/wot-design-uni/components/wd-select-picker/wd-select-picker.vue"]]);
  const _sfc_main$l = /* @__PURE__ */ vue.defineComponent({
    __name: "updateUserInfo",
    setup(__props, { expose: __expose }) {
      __expose();
      const toast = useToast();
      const user = vue.ref({
        tagList: []
        // 初始化空标签列表
      });
      const oldImage = vue.ref("");
      const genderColumns = vue.ref([
        {
          value: 0,
          label: "男"
        },
        {
          value: 1,
          label: "女"
        },
        {
          value: 2,
          label: "保密"
        }
      ]);
      const constellationColumns = vue.ref([
        {
          value: "熬夜冠军座",
          label: "熬夜冠军座"
        },
        {
          value: "秃然焦虑座",
          label: "秃然焦虑座"
        },
        {
          value: "奶茶续命座",
          label: "奶茶续命座"
        },
        {
          value: "地铁迷路座",
          label: "地铁迷路座"
        },
        {
          value: "社畜进化座",
          label: "社畜进化座"
        },
        {
          value: "通宵赶工座",
          label: "通宵赶工座"
        },
        {
          value: "表情包王座",
          label: "表情包王座"
        },
        {
          value: "社恐晚期座",
          label: "社恐晚期座"
        },
        {
          value: "香菜毁灭座",
          label: "香菜毁灭座"
        },
        {
          value: "锦鲤附体座",
          label: "锦鲤附体座"
        },
        {
          value: "电量焦虑座",
          label: "电量焦虑座"
        }
      ]);
      const tagList = vue.ref([
        {
          value: "运动达人",
          label: "运动达人"
        },
        {
          value: "学习狂魔",
          label: "学习狂魔"
        },
        {
          value: "社交达人",
          label: "社交达人"
        },
        {
          value: "文艺青年",
          label: "文艺青年"
        },
        {
          value: "技术宅",
          label: "技术宅"
        },
        {
          value: "美食家",
          label: "美食家"
        },
        {
          value: "旅行者",
          label: "旅行者"
        },
        {
          value: "音乐控",
          label: "音乐控"
        },
        {
          value: "电影迷",
          label: "电影迷"
        },
        {
          value: "摄影师",
          label: "摄影师"
        },
        {
          value: "创意咖",
          label: "创意咖"
        },
        {
          value: "志愿者",
          label: "志愿者"
        }
      ]);
      onLoad(() => {
        user.value = getUserInfo();
        formatAppLog("log", "at pages/updateUserInfo/updateUserInfo.vue:191", user.value);
      });
      const handleClickLeft = () => {
        uni.navigateBack();
      };
      const handleGender = (e) => {
        user.value.constellation = e.value;
        formatAppLog("log", "at pages/updateUserInfo/updateUserInfo.vue:201", user.value);
        formatAppLog("log", "at pages/updateUserInfo/updateUserInfo.vue:202", e);
      };
      const toggleTag = (tag2) => {
        if (!user.value.tagList) {
          user.value.tagList = [];
        }
        const index = user.value.tagList.indexOf(tag2);
        if (index === -1) {
          if (user.value.tagList.length >= 3) {
            toast.show("最多只能选择3个标签");
            return;
          }
          user.value.tagList.push(tag2);
        } else {
          user.value.tagList.splice(index, 1);
        }
      };
      const updateUserInfo = async () => {
        formatAppLog("log", "at pages/updateUserInfo/updateUserInfo.vue:224", user.value);
        const updateData = {
          id: user.value.id,
          imageUrl: user.value.imageUrl,
          userName: user.value.userName,
          userProfile: user.value.userProfile,
          gender: user.value.gender,
          constellation: user.value.constellation,
          tagList: user.value.tagList
        };
        if (oldImage.value) {
          const fileRes = await deleteFile(oldImage.value);
          if (fileRes.code === 200) {
            formatAppLog("log", "at pages/updateUserInfo/updateUserInfo.vue:240", "删除旧图片成功");
          } else {
            formatAppLog("log", "at pages/updateUserInfo/updateUserInfo.vue:242", "删除旧图片失败");
          }
        }
        const res = await updateWxUser(updateData);
        if (res.code === 200) {
          toast.show("更新成功");
          user.value = {
            ...res.data,
            ...user.value
          };
          clearUserInfo();
          formatAppLog("log", "at pages/updateUserInfo/updateUserInfo.vue:255", "user-value:", user.value);
          setUserInfo(user.value);
          formatAppLog("log", "at pages/updateUserInfo/updateUserInfo.vue:258", "getuserinfo", getUserInfo());
          setTimeout(() => {
            uni.navigateBack();
          }, 1e3);
        } else {
          toast.show(res.message);
        }
      };
      const chooseAvatar = (e) => {
        formatAppLog("log", "at pages/updateUserInfo/updateUserInfo.vue:270", e);
        const avatarUrl = e.avatarUrl;
        uni.uploadFile({
          url: "https://campus.fybreeze.cn/api/article/uploadImages",
          // 仅为示例，并非真实的接口地址
          filePath: avatarUrl,
          name: "file",
          formData: {
            "user": "test"
          },
          success(res) {
            oldImage.value = user.value.imageUrl;
            const data = JSON.parse(res.data);
            user.value.imageUrl = data.data[0];
            toast.show("上传成功");
          },
          fail(err) {
            toast.error("上传失败");
          }
        });
      };
      const handleChangeName = (e) => {
        formatAppLog("log", "at pages/updateUserInfo/updateUserInfo.vue:295", e);
      };
      onShareAppMessage((res) => {
        formatAppLog("log", "at pages/updateUserInfo/updateUserInfo.vue:302", res);
        return {
          title: "青春共享站",
          path: "/pages/index/index",
          imageUrl: "/static/logo.jpg"
          // 分享图片
        };
      });
      onShareTimeline(() => {
        return {
          title: "青春共享站",
          path: "/pages/index/index",
          imageUrl: "/static/logo.jpg"
          // 分享图片
        };
      });
      const __returned__ = { toast, user, oldImage, genderColumns, constellationColumns, tagList, handleClickLeft, handleGender, toggleTag, updateUserInfo, chooseAvatar, handleChangeName };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$k(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_wd_navbar = resolveEasycom(vue.resolveDynamicComponent("wd-navbar"), __easycom_1$3);
    const _component_wd_img = resolveEasycom(vue.resolveDynamicComponent("wd-img"), WdImg);
    const _component_wd_button = resolveEasycom(vue.resolveDynamicComponent("wd-button"), __easycom_3);
    const _component_wd_input = resolveEasycom(vue.resolveDynamicComponent("wd-input"), __easycom_0$2);
    const _component_wd_cell = resolveEasycom(vue.resolveDynamicComponent("wd-cell"), __easycom_5$2);
    const _component_wd_select_picker = resolveEasycom(vue.resolveDynamicComponent("wd-select-picker"), __easycom_5);
    const _component_wd_textarea = resolveEasycom(vue.resolveDynamicComponent("wd-textarea"), __easycom_5$1);
    const _component_wd_gap = resolveEasycom(vue.resolveDynamicComponent("wd-gap"), __easycom_2);
    const _component_wd_toast = resolveEasycom(vue.resolveDynamicComponent("wd-toast"), __easycom_2$2);
    return vue.openBlock(), vue.createElementBlock("view", { class: "updateUserInfo" }, [
      vue.createVNode(_component_wd_navbar, {
        "custom-class": "navbar",
        bordered: false,
        title: "修改信息",
        safeAreaInsetTop: "",
        "left-arrow": "",
        onClickLeft: $setup.handleClickLeft
      }),
      vue.createElementVNode("view", { class: "container" }, [
        vue.createVNode(_component_wd_button, {
          "custom-class": "userAvatar",
          type: "text",
          "open-type": "chooseAvatar",
          onChooseavatar: $setup.chooseAvatar
        }, {
          default: vue.withCtx(() => {
            var _a;
            return [
              vue.createVNode(_component_wd_img, {
                width: 100,
                height: 100,
                round: "",
                src: (_a = $setup.user) == null ? void 0 : _a.imageUrl
              }, null, 8, ["src"])
            ];
          }),
          _: 1
          /* STABLE */
        }),
        vue.createElementVNode("view", { class: "info" }, [
          vue.createVNode(_component_wd_cell, {
            title: "昵称",
            center: ""
          }, {
            default: vue.withCtx(() => [
              vue.createVNode(_component_wd_input, {
                type: "nickname",
                "no-border": "",
                modelValue: $setup.user.userName,
                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $setup.user.userName = $event),
                placeholder: "请输入用户名",
                onChange: $setup.handleChangeName
              }, null, 8, ["modelValue"])
            ]),
            _: 1
            /* STABLE */
          }),
          vue.createVNode(_component_wd_select_picker, {
            type: "radio",
            label: "性别",
            modelValue: $setup.user.gender,
            "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $setup.user.gender = $event),
            columns: $setup.genderColumns,
            onChange: $setup.handleGender
          }, null, 8, ["modelValue", "columns"]),
          vue.createVNode(_component_wd_select_picker, {
            type: "radio",
            label: "星座",
            modelValue: $setup.user.constellation,
            "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $setup.user.constellation = $event),
            columns: $setup.constellationColumns,
            onChange: $setup.handleGender
          }, null, 8, ["modelValue", "columns"]),
          vue.createVNode(_component_wd_select_picker, {
            label: "标签",
            prop: "tagList",
            type: "checkbox",
            max: 3,
            modelValue: $setup.user.tagList,
            "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $setup.user.tagList = $event),
            columns: $setup.tagList,
            placeholder: "请选择个性标签"
          }, null, 8, ["modelValue", "columns"]),
          vue.createVNode(_component_wd_textarea, {
            label: "简介",
            clearable: "",
            modelValue: $setup.user.userProfile,
            "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => $setup.user.userProfile = $event),
            placeholder: "请输入简介",
            "show-word-limit": "",
            maxlength: 100
          }, null, 8, ["modelValue"])
        ])
      ]),
      vue.createVNode(_component_wd_button, {
        "custom-class": "btn",
        block: "",
        type: "primary",
        onClick: $setup.updateUserInfo
      }, {
        default: vue.withCtx(() => [
          vue.createTextVNode("保存")
        ]),
        _: 1
        /* STABLE */
      }),
      vue.createVNode(_component_wd_gap, { height: "60rpx" }),
      vue.createVNode(_component_wd_toast)
    ]);
  }
  const PagesUpdateUserInfoUpdateUserInfo = /* @__PURE__ */ _export_sfc(_sfc_main$l, [["render", _sfc_render$k], ["__scopeId", "data-v-f1eb7df2"], ["__file", "G:/Code/campus/miniProject/pages/updateUserInfo/updateUserInfo.vue"]]);
  function addFeedBack(data) {
    return request({
      url: "/api/feedback/add",
      method: "POST",
      data
    });
  }
  const _sfc_main$k = /* @__PURE__ */ vue.defineComponent({
    __name: "feedback",
    setup(__props, { expose: __expose }) {
      __expose();
      const toast = useToast();
      const fileList = vue.ref([]);
      const feedbackData = vue.ref({
        userId: 0,
        imageList: [],
        content: "",
        relation: ""
      });
      const handleClickLeft = () => {
        uni.navigateBack();
      };
      onLoad(() => {
        const user = getUserInfo();
        if (user) {
          feedbackData.value.userId = user.id;
        } else {
          toast.show({
            type: "warning",
            message: "请先登录"
          });
        }
        formatAppLog("log", "at pages/feedback/feedback.vue:73", user);
      });
      const handleChange = (file) => {
        formatAppLog("log", "at pages/feedback/feedback.vue:78", "files:", file);
        formatAppLog("log", "at pages/feedback/feedback.vue:79", fileList.value);
        fileList.value = file;
      };
      const beforeImageRemove = (res) => {
        fileList.value.splice(res.index, 1);
        feedbackData.value.imageList.splice(res.index, 1);
        formatAppLog("log", "at pages/feedback/feedback.vue:88", "publishArticleParams>>>", feedbackData);
      };
      const uploadSuccess = (res) => {
        formatAppLog("log", "at pages/feedback/feedback.vue:92", "上传成功res", res.file.response);
        const result = JSON.parse(res.file.response);
        formatAppLog("log", "at pages/feedback/feedback.vue:94", "上传成功result.data", result.data);
        feedbackData.value.imageList.push(...result.data);
        formatAppLog("log", "at pages/feedback/feedback.vue:97", feedbackData.value);
      };
      const submitFeedback = async () => {
        const res = await addFeedBack(feedbackData.value);
        if (res.code === 200) {
          toast.show("提交成功~感谢您的反馈");
          setTimeout(() => {
            uni.navigateBack();
          }, 1e3);
        }
        formatAppLog("log", "at pages/feedback/feedback.vue:108", "提交反馈", feedbackData.value);
      };
      onShareAppMessage((res) => {
        formatAppLog("log", "at pages/feedback/feedback.vue:112", res);
        return {
          title: "青春共享站",
          path: "/pages/index/index",
          imageUrl: "/static/logo.jpg"
          // 分享图片
        };
      });
      onShareTimeline(() => {
        return {
          title: "青春共享站",
          path: "/pages/index/index",
          imageUrl: "/static/logo.jpg"
          // 分享图片
        };
      });
      const __returned__ = { toast, fileList, feedbackData, handleClickLeft, handleChange, beforeImageRemove, uploadSuccess, submitFeedback };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$j(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_wd_navbar = resolveEasycom(vue.resolveDynamicComponent("wd-navbar"), __easycom_1$3);
    const _component_wd_textarea = resolveEasycom(vue.resolveDynamicComponent("wd-textarea"), __easycom_5$1);
    const _component_wd_upload = resolveEasycom(vue.resolveDynamicComponent("wd-upload"), __easycom_4);
    const _component_wd_input = resolveEasycom(vue.resolveDynamicComponent("wd-input"), __easycom_0$2);
    const _component_wd_button = resolveEasycom(vue.resolveDynamicComponent("wd-button"), __easycom_3);
    const _component_wd_toast = resolveEasycom(vue.resolveDynamicComponent("wd-toast"), __easycom_2$2);
    return vue.openBlock(), vue.createElementBlock("view", { class: "feedback" }, [
      vue.createVNode(_component_wd_navbar, {
        "custom-class": "navbar",
        bordered: false,
        title: "意见反馈",
        safeAreaInsetTop: "",
        "left-arrow": "",
        onClickLeft: $setup.handleClickLeft
      }),
      vue.createElementVNode("view", { class: "title" }, [
        vue.createElementVNode("view", { class: "title-text" }, "Hello"),
        vue.createElementVNode("view", { class: "title-content" }, " 你有什么好的建议可以分享下哦~ ")
      ]),
      vue.createElementVNode("view", { class: "container" }, [
        vue.createVNode(_component_wd_textarea, {
          modelValue: $setup.feedbackData.content,
          "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $setup.feedbackData.content = $event),
          placeholder: "请填写10个字以上内容，以便我们提供更好的内容",
          maxlength: 2e3,
          placeholderStyle: "font-size:14px;",
          "show-count": "",
          clearable: "",
          rows: 5
        }, null, 8, ["modelValue"]),
        vue.createCommentVNode(" 图片上传区域 "),
        vue.createVNode(_component_wd_upload, {
          "file-list": $setup.fileList,
          "onUpdate:fileList": _cache[1] || (_cache[1] = ($event) => $setup.fileList = $event),
          ref: "uploadFile",
          multiple: "",
          accept: "image",
          action: "https://campus.fybreeze.cn/api/article/uploadImages",
          onChange: $setup.handleChange,
          "before-remove": $setup.beforeImageRemove,
          onSuccess: $setup.uploadSuccess
        }, null, 8, ["file-list"])
      ]),
      vue.createElementVNode("view", { class: "container" }, [
        vue.createElementVNode("view", { style: { "font-weight": "bold", "font-size": "16px", "margin-bottom": "12px", "margin-top": "4px" } }, "联系电话"),
        vue.createVNode(_component_wd_input, {
          type: "text",
          "no-border": "",
          modelValue: $setup.feedbackData.relation,
          "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $setup.feedbackData.relation = $event),
          placeholder: "输入手机号/邮箱"
        }, null, 8, ["modelValue"])
      ]),
      vue.createVNode(_component_wd_button, {
        "custom-class": "btn",
        type: "primary",
        block: "",
        onClick: $setup.submitFeedback
      }, {
        default: vue.withCtx(() => [
          vue.createTextVNode("提交反馈")
        ]),
        _: 1
        /* STABLE */
      }),
      vue.createVNode(_component_wd_toast)
    ]);
  }
  const PagesFeedbackFeedback = /* @__PURE__ */ _export_sfc(_sfc_main$k, [["render", _sfc_render$j], ["__scopeId", "data-v-a24b82f2"], ["__file", "G:/Code/campus/miniProject/pages/feedback/feedback.vue"]]);
  const url = "https://minio.fybreeze.cn/campus/rIfnbyoVsdDmb6b7d81505235520d4f070e8085ef16c.webp";
  const _sfc_main$j = /* @__PURE__ */ vue.defineComponent({
    __name: "relation",
    setup(__props, { expose: __expose }) {
      __expose();
      const handleClickLeft = () => {
        uni.navigateBack();
      };
      const previewImage = () => {
        uni.previewImage({
          current: url,
          // 当前显示图片的http链接
          urls: [url]
          // 需要预览的图片http链接列表
        });
      };
      onShareAppMessage((res) => {
        formatAppLog("log", "at pages/relation/relation.vue:41", res);
        return {
          title: "青春共享站",
          path: "/pages/index/index",
          imageUrl: "/static/logo.jpg"
          // 分享图片
        };
      });
      onShareTimeline(() => {
        return {
          title: "青春共享站",
          path: "/pages/index/index",
          imageUrl: "/static/logo.jpg"
          // 分享图片
        };
      });
      const __returned__ = { url, handleClickLeft, previewImage };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$i(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_wd_navbar = resolveEasycom(vue.resolveDynamicComponent("wd-navbar"), __easycom_1$3);
    const _component_wd_img = resolveEasycom(vue.resolveDynamicComponent("wd-img"), WdImg);
    return vue.openBlock(), vue.createElementBlock("view", { class: "relation" }, [
      vue.createVNode(_component_wd_navbar, {
        "custom-class": "navbar",
        bordered: false,
        title: "联系我们",
        safeAreaInsetTop: "",
        "left-arrow": "",
        onClickLeft: $setup.handleClickLeft
      }),
      vue.createElementVNode("view", { class: "relation-content" }, [
        vue.createElementVNode("view", { class: "relation-content-title" }, "联系我们"),
        vue.createElementVNode("view", { class: "relation-content-text" }, [
          vue.createTextVNode(" 扫描下方二维码，与我们取得联系。"),
          vue.createElementVNode("br"),
          vue.createTextVNode(" 注：请备注来意 ")
        ]),
        vue.createVNode(_component_wd_img, {
          "custom-class": "img",
          onClick: vue.withModifiers($setup.previewImage, ["stop"]),
          src: $setup.url,
          width: 100,
          height: 100,
          mode: "scaleToFill"
        })
      ])
    ]);
  }
  const PagesRelationRelation = /* @__PURE__ */ _export_sfc(_sfc_main$j, [["render", _sfc_render$i], ["__scopeId", "data-v-85e55c19"], ["__file", "G:/Code/campus/miniProject/pages/relation/relation.vue"]]);
  const _sfc_main$i = /* @__PURE__ */ vue.defineComponent({
    __name: "activityDetail",
    setup(__props, { expose: __expose }) {
      __expose();
      const toast = useToast();
      const activity = vue.ref({});
      const user = vue.ref({});
      onLoad((options) => {
        formatAppLog("log", "at pages/activityDetail/activityDetail.vue:106", options.activityInfo);
        activity.value = JSON.parse(options.activityInfo);
        user.value = getUserInfo();
      });
      const handleRegistration = lodashExports.debounce(async () => {
        formatAppLog("log", "at pages/activityDetail/activityDetail.vue:114", "报名");
        const data = {
          activityId: activity.value.id,
          userId: user.value.id
        };
        const res = await registrationActivity(data);
        if (res.code === 200) {
          const text = activity.value.isRegistration ? "取消报名成功" : "报名成功";
          toast.show({
            msg: text,
            cover: true
          });
          setTimeout(() => {
            uni.navigateBack();
          }, 1e3);
        } else {
          toast.error(res.message);
        }
      }, 600);
      onShareAppMessage((res) => {
        formatAppLog("log", "at pages/activityDetail/activityDetail.vue:135", res);
        return {
          title: "青春共享站",
          path: "/pages/index/index",
          imageUrl: "/static/logo.jpg"
          // 分享图片
        };
      });
      onShareTimeline(() => {
        return {
          title: "青春共享站",
          path: "/pages/index/index",
          imageUrl: "/static/logo.jpg"
          // 分享图片
        };
      });
      const __returned__ = { toast, activity, user, handleRegistration, get getActivityStatus() {
        return getActivityStatus;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$h(_ctx, _cache, $props, $setup, $data, $options) {
    var _a;
    const _component_wd_icon = resolveEasycom(vue.resolveDynamicComponent("wd-icon"), __easycom_0$5);
    const _component_wd_button = resolveEasycom(vue.resolveDynamicComponent("wd-button"), __easycom_3);
    const _component_wd_gap = resolveEasycom(vue.resolveDynamicComponent("wd-gap"), __easycom_2);
    const _component_wd_toast = resolveEasycom(vue.resolveDynamicComponent("wd-toast"), __easycom_2$2);
    return vue.openBlock(), vue.createElementBlock("view", { class: "activityDetail" }, [
      vue.createCommentVNode(" 顶部图片 "),
      vue.createElementVNode("view", { class: "banner" }, [
        vue.createElementVNode("image", {
          src: $setup.activity.coverPicture,
          mode: "aspectFill"
        }, null, 8, ["src"])
      ]),
      vue.createCommentVNode(" 活动信息 "),
      vue.createElementVNode("view", { class: "actdetailCard" }, [
        vue.createCommentVNode(" 左上角小标签 "),
        vue.createElementVNode(
          "view",
          { class: "status-tag" },
          vue.toDisplayString($setup.getActivityStatus((_a = $setup.activity) == null ? void 0 : _a.status)),
          1
          /* TEXT */
        ),
        vue.createCommentVNode(" 上半部分基础信息 "),
        vue.createElementVNode("view", { class: "Basicinfo" }, [
          vue.createCommentVNode(" 活动标题 "),
          vue.createElementVNode(
            "view",
            { class: "Acttitle" },
            vue.toDisplayString($setup.activity.title),
            1
            /* TEXT */
          ),
          vue.createElementVNode("view", { class: "inforow" }, [
            vue.createElementVNode(
              "view",
              { class: "endtime" },
              " 截止时间：" + vue.toDisplayString($setup.activity.endTime),
              1
              /* TEXT */
            ),
            vue.createElementVNode(
              "view",
              { class: "Rstaff" },
              " 剩余人员：" + vue.toDisplayString($setup.activity.maxSignups - $setup.activity.currentSignups) + "人 ",
              1
              /* TEXT */
            ),
            vue.createElementVNode(
              "view",
              { class: "Enrollment" },
              " 报名人数：" + vue.toDisplayString($setup.activity.currentSignups) + "人报名 ",
              1
              /* TEXT */
            )
          ])
        ]),
        vue.createCommentVNode(" 下半信息部分 "),
        vue.createElementVNode("view", { class: "infolist" }, [
          vue.createElementVNode("view", { class: "addressAndtime" }, [
            vue.createElementVNode("view", { class: "title" }, [
              vue.createVNode(_component_wd_icon, {
                name: "circle",
                size: "18px"
              }),
              vue.createTextVNode(" 时间地点 ")
            ]),
            vue.createElementVNode("view", { class: "time" }, [
              vue.createVNode(_component_wd_icon, {
                name: "time",
                size: "18px"
              }),
              vue.createElementVNode(
                "view",
                { class: "date" },
                vue.toDisplayString($setup.activity.startTime),
                1
                /* TEXT */
              ),
              vue.createCommentVNode('<view class="moment"> 上午9:00</view>')
            ]),
            vue.createElementVNode("view", { class: "address" }, [
              vue.createVNode(_component_wd_icon, {
                name: "location",
                size: "18px"
              }),
              vue.createTextVNode(
                " " + vue.toDisplayString($setup.activity.position),
                1
                /* TEXT */
              )
            ])
          ]),
          vue.createElementVNode("view", { class: "actobject" }, [
            vue.createElementVNode("view", { class: "title" }, [
              vue.createVNode(_component_wd_icon, {
                name: "circle",
                size: "18px"
              }),
              vue.createTextVNode(" 活动对象 ")
            ]),
            vue.createElementVNode("view", { class: "Objcontent" }, [
              vue.createVNode(_component_wd_icon, {
                name: "user-avatar",
                size: "18px"
              }),
              vue.createTextVNode(
                " " + vue.toDisplayString($setup.activity.targetUsers),
                1
                /* TEXT */
              )
            ])
          ]),
          vue.createElementVNode("view", { class: "hold" }, [
            vue.createElementVNode("view", { class: "title" }, [
              vue.createVNode(_component_wd_icon, {
                name: "circle",
                size: "18px"
              }),
              vue.createTextVNode(" 举办方 ")
            ]),
            vue.createElementVNode("view", { class: "holdobj" }, [
              vue.createVNode(_component_wd_icon, {
                name: "tips",
                size: "18px"
              }),
              vue.createTextVNode(
                " " + vue.toDisplayString($setup.activity.organizers),
                1
                /* TEXT */
              )
            ])
          ]),
          vue.createElementVNode("view", { class: "profile" }, [
            vue.createElementVNode("view", { class: "title" }, [
              vue.createVNode(_component_wd_icon, {
                name: "circle",
                size: "18px"
              }),
              vue.createTextVNode(" 活动详情 ")
            ]),
            vue.createElementVNode(
              "view",
              { class: "pfecontent" },
              vue.toDisplayString($setup.activity.profile),
              1
              /* TEXT */
            )
          ])
        ])
      ]),
      vue.createElementVNode("view", { class: "signupbut" }, [
        vue.createElementVNode("view", { class: "signup" }, [
          vue.createVNode(_component_wd_button, {
            block: "",
            onClickOnce: $setup.handleRegistration
          }, {
            default: vue.withCtx(() => [
              vue.createTextVNode(
                vue.toDisplayString($setup.activity.isRegistration ? "取消报名" : "立即报名"),
                1
                /* TEXT */
              )
            ]),
            _: 1
            /* STABLE */
          }, 8, ["onClickOnce"])
        ])
      ]),
      vue.createVNode(_component_wd_gap, {
        "safe-area-bottom": "",
        height: "0"
      }),
      vue.createVNode(_component_wd_toast)
    ]);
  }
  const PagesActivityDetailActivityDetail = /* @__PURE__ */ _export_sfc(_sfc_main$i, [["render", _sfc_render$h], ["__scopeId", "data-v-3c8aaa9f"], ["__file", "G:/Code/campus/miniProject/pages/activityDetail/activityDetail.vue"]]);
  function _getDefaults() {
    return {
      async: false,
      breaks: false,
      extensions: null,
      gfm: true,
      hooks: null,
      pedantic: false,
      renderer: null,
      silent: false,
      tokenizer: null,
      walkTokens: null
    };
  }
  let _defaults = _getDefaults();
  function changeDefaults(newDefaults) {
    _defaults = newDefaults;
  }
  const noopTest = { exec: () => null };
  function edit(regex, opt = "") {
    let source = typeof regex === "string" ? regex : regex.source;
    const obj = {
      replace: (name, val) => {
        let valSource = typeof val === "string" ? val : val.source;
        valSource = valSource.replace(other.caret, "$1");
        source = source.replace(name, valSource);
        return obj;
      },
      getRegex: () => {
        return new RegExp(source, opt);
      }
    };
    return obj;
  }
  const other = {
    codeRemoveIndent: /^(?: {1,4}| {0,3}\t)/gm,
    outputLinkReplace: /\\([\[\]])/g,
    indentCodeCompensation: /^(\s+)(?:```)/,
    beginningSpace: /^\s+/,
    endingHash: /#$/,
    startingSpaceChar: /^ /,
    endingSpaceChar: / $/,
    nonSpaceChar: /[^ ]/,
    newLineCharGlobal: /\n/g,
    tabCharGlobal: /\t/g,
    multipleSpaceGlobal: /\s+/g,
    blankLine: /^[ \t]*$/,
    doubleBlankLine: /\n[ \t]*\n[ \t]*$/,
    blockquoteStart: /^ {0,3}>/,
    blockquoteSetextReplace: /\n {0,3}((?:=+|-+) *)(?=\n|$)/g,
    blockquoteSetextReplace2: /^ {0,3}>[ \t]?/gm,
    listReplaceTabs: /^\t+/,
    listReplaceNesting: /^ {1,4}(?=( {4})*[^ ])/g,
    listIsTask: /^\[[ xX]\] /,
    listReplaceTask: /^\[[ xX]\] +/,
    anyLine: /\n.*\n/,
    hrefBrackets: /^<(.*)>$/,
    tableDelimiter: /[:|]/,
    tableAlignChars: /^\||\| *$/g,
    tableRowBlankLine: /\n[ \t]*$/,
    tableAlignRight: /^ *-+: *$/,
    tableAlignCenter: /^ *:-+: *$/,
    tableAlignLeft: /^ *:-+ *$/,
    startATag: /^<a /i,
    endATag: /^<\/a>/i,
    startPreScriptTag: /^<(pre|code|kbd|script)(\s|>)/i,
    endPreScriptTag: /^<\/(pre|code|kbd|script)(\s|>)/i,
    startAngleBracket: /^</,
    endAngleBracket: />$/,
    pedanticHrefTitle: /^([^'"]*[^\s])\s+(['"])(.*)\2/,
    unicodeAlphaNumeric: /[\p{L}\p{N}]/u,
    escapeTest: /[&<>"']/,
    escapeReplace: /[&<>"']/g,
    escapeTestNoEncode: /[<>"']|&(?!(#\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\w+);)/,
    escapeReplaceNoEncode: /[<>"']|&(?!(#\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\w+);)/g,
    unescapeTest: /&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/ig,
    caret: /(^|[^\[])\^/g,
    percentDecode: /%25/g,
    findPipe: /\|/g,
    splitPipe: / \|/,
    slashPipe: /\\\|/g,
    carriageReturn: /\r\n|\r/g,
    spaceLine: /^ +$/gm,
    notSpaceStart: /^\S*/,
    endingNewline: /\n$/,
    listItemRegex: (bull) => new RegExp(`^( {0,3}${bull})((?:[	 ][^\\n]*)?(?:\\n|$))`),
    nextBulletRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\d{1,9}[.)])((?:[ 	][^\\n]*)?(?:\\n|$))`),
    hrRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)`),
    fencesBeginRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\`\`\`|~~~)`),
    headingBeginRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`),
    htmlBeginRegex: (indent) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}<(?:[a-z].*>|!--)`, "i")
  };
  const newline = /^(?:[ \t]*(?:\n|$))+/;
  const blockCode = /^((?: {4}| {0,3}\t)[^\n]+(?:\n(?:[ \t]*(?:\n|$))*)?)+/;
  const fences = /^ {0,3}(`{3,}(?=[^`\n]*(?:\n|$))|~{3,})([^\n]*)(?:\n|$)(?:|([\s\S]*?)(?:\n|$))(?: {0,3}\1[~`]* *(?=\n|$)|$)/;
  const hr = /^ {0,3}((?:-[\t ]*){3,}|(?:_[ \t]*){3,}|(?:\*[ \t]*){3,})(?:\n+|$)/;
  const heading = /^ {0,3}(#{1,6})(?=\s|$)(.*)(?:\n+|$)/;
  const bullet = /(?:[*+-]|\d{1,9}[.)])/;
  const lheadingCore = /^(?!bull |blockCode|fences|blockquote|heading|html|table)((?:.|\n(?!\s*?\n|bull |blockCode|fences|blockquote|heading|html|table))+?)\n {0,3}(=+|-+) *(?:\n+|$)/;
  const lheading = edit(lheadingCore).replace(/bull/g, bullet).replace(/blockCode/g, /(?: {4}| {0,3}\t)/).replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/).replace(/blockquote/g, / {0,3}>/).replace(/heading/g, / {0,3}#{1,6}/).replace(/html/g, / {0,3}<[^\n>]+>\n/).replace(/\|table/g, "").getRegex();
  const lheadingGfm = edit(lheadingCore).replace(/bull/g, bullet).replace(/blockCode/g, /(?: {4}| {0,3}\t)/).replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/).replace(/blockquote/g, / {0,3}>/).replace(/heading/g, / {0,3}#{1,6}/).replace(/html/g, / {0,3}<[^\n>]+>\n/).replace(/table/g, / {0,3}\|?(?:[:\- ]*\|)+[\:\- ]*\n/).getRegex();
  const _paragraph = /^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\n)[^\n]+)*)/;
  const blockText = /^[^\n]+/;
  const _blockLabel = /(?!\s*\])(?:\\.|[^\[\]\\])+/;
  const def = edit(/^ {0,3}\[(label)\]: *(?:\n[ \t]*)?([^<\s][^\s]*|<.*?>)(?:(?: +(?:\n[ \t]*)?| *\n[ \t]*)(title))? *(?:\n+|$)/).replace("label", _blockLabel).replace("title", /(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/).getRegex();
  const list = edit(/^( {0,3}bull)([ \t][^\n]+?)?(?:\n|$)/).replace(/bull/g, bullet).getRegex();
  const _tag = "address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul";
  const _comment = /<!--(?:-?>|[\s\S]*?(?:-->|$))/;
  const html = edit("^ {0,3}(?:<(script|pre|style|textarea)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)|comment[^\\n]*(\\n+|$)|<\\?[\\s\\S]*?(?:\\?>\\n*|$)|<![A-Z][\\s\\S]*?(?:>\\n*|$)|<!\\[CDATA\\[[\\s\\S]*?(?:\\]\\]>\\n*|$)|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:(?:\\n[ 	]*)+\\n|$)|<(?!script|pre|style|textarea)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n[ 	]*)+\\n|$)|</(?!script|pre|style|textarea)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n[ 	]*)+\\n|$))", "i").replace("comment", _comment).replace("tag", _tag).replace("attribute", / +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex();
  const paragraph = edit(_paragraph).replace("hr", hr).replace("heading", " {0,3}#{1,6}(?:\\s|$)").replace("|lheading", "").replace("|table", "").replace("blockquote", " {0,3}>").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", _tag).getRegex();
  const blockquote = edit(/^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/).replace("paragraph", paragraph).getRegex();
  const blockNormal = {
    blockquote,
    code: blockCode,
    def,
    fences,
    heading,
    hr,
    html,
    lheading,
    list,
    newline,
    paragraph,
    table: noopTest,
    text: blockText
  };
  const gfmTable = edit("^ *([^\\n ].*)\\n {0,3}((?:\\| *)?:?-+:? *(?:\\| *:?-+:? *)*(?:\\| *)?)(?:\\n((?:(?! *\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)").replace("hr", hr).replace("heading", " {0,3}#{1,6}(?:\\s|$)").replace("blockquote", " {0,3}>").replace("code", "(?: {4}| {0,3}	)[^\\n]").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", _tag).getRegex();
  const blockGfm = {
    ...blockNormal,
    lheading: lheadingGfm,
    table: gfmTable,
    paragraph: edit(_paragraph).replace("hr", hr).replace("heading", " {0,3}#{1,6}(?:\\s|$)").replace("|lheading", "").replace("table", gfmTable).replace("blockquote", " {0,3}>").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", _tag).getRegex()
  };
  const blockPedantic = {
    ...blockNormal,
    html: edit(`^ *(?:comment *(?:\\n|\\s*$)|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)|<tag(?:"[^"]*"|'[^']*'|\\s[^'"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))`).replace("comment", _comment).replace(/tag/g, "(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:|[^\\w\\s@]*@)\\b").getRegex(),
    def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,
    heading: /^(#{1,6})(.*)(?:\n+|$)/,
    fences: noopTest,
    // fences not supported
    lheading: /^(.+?)\n {0,3}(=+|-+) *(?:\n+|$)/,
    paragraph: edit(_paragraph).replace("hr", hr).replace("heading", " *#{1,6} *[^\n]").replace("lheading", lheading).replace("|table", "").replace("blockquote", " {0,3}>").replace("|fences", "").replace("|list", "").replace("|html", "").replace("|tag", "").getRegex()
  };
  const escape$1 = /^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/;
  const inlineCode = /^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/;
  const br = /^( {2,}|\\)\n(?!\s*$)/;
  const inlineText = /^(`+|[^`])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*_]|\b_|$)|[^ ](?= {2,}\n)))/;
  const _punctuation = /[\p{P}\p{S}]/u;
  const _punctuationOrSpace = /[\s\p{P}\p{S}]/u;
  const _notPunctuationOrSpace = /[^\s\p{P}\p{S}]/u;
  const punctuation = edit(/^((?![*_])punctSpace)/, "u").replace(/punctSpace/g, _punctuationOrSpace).getRegex();
  const _punctuationGfmStrongEm = /(?!~)[\p{P}\p{S}]/u;
  const _punctuationOrSpaceGfmStrongEm = /(?!~)[\s\p{P}\p{S}]/u;
  const _notPunctuationOrSpaceGfmStrongEm = /(?:[^\s\p{P}\p{S}]|~)/u;
  const blockSkip = /\[[^[\]]*?\]\((?:\\.|[^\\\(\)]|\((?:\\.|[^\\\(\)])*\))*\)|`[^`]*?`|<[^<>]*?>/g;
  const emStrongLDelimCore = /^(?:\*+(?:((?!\*)punct)|[^\s*]))|^_+(?:((?!_)punct)|([^\s_]))/;
  const emStrongLDelim = edit(emStrongLDelimCore, "u").replace(/punct/g, _punctuation).getRegex();
  const emStrongLDelimGfm = edit(emStrongLDelimCore, "u").replace(/punct/g, _punctuationGfmStrongEm).getRegex();
  const emStrongRDelimAstCore = "^[^_*]*?__[^_*]*?\\*[^_*]*?(?=__)|[^*]+(?=[^*])|(?!\\*)punct(\\*+)(?=[\\s]|$)|notPunctSpace(\\*+)(?!\\*)(?=punctSpace|$)|(?!\\*)punctSpace(\\*+)(?=notPunctSpace)|[\\s](\\*+)(?!\\*)(?=punct)|(?!\\*)punct(\\*+)(?!\\*)(?=punct)|notPunctSpace(\\*+)(?=notPunctSpace)";
  const emStrongRDelimAst = edit(emStrongRDelimAstCore, "gu").replace(/notPunctSpace/g, _notPunctuationOrSpace).replace(/punctSpace/g, _punctuationOrSpace).replace(/punct/g, _punctuation).getRegex();
  const emStrongRDelimAstGfm = edit(emStrongRDelimAstCore, "gu").replace(/notPunctSpace/g, _notPunctuationOrSpaceGfmStrongEm).replace(/punctSpace/g, _punctuationOrSpaceGfmStrongEm).replace(/punct/g, _punctuationGfmStrongEm).getRegex();
  const emStrongRDelimUnd = edit("^[^_*]*?\\*\\*[^_*]*?_[^_*]*?(?=\\*\\*)|[^_]+(?=[^_])|(?!_)punct(_+)(?=[\\s]|$)|notPunctSpace(_+)(?!_)(?=punctSpace|$)|(?!_)punctSpace(_+)(?=notPunctSpace)|[\\s](_+)(?!_)(?=punct)|(?!_)punct(_+)(?!_)(?=punct)", "gu").replace(/notPunctSpace/g, _notPunctuationOrSpace).replace(/punctSpace/g, _punctuationOrSpace).replace(/punct/g, _punctuation).getRegex();
  const anyPunctuation = edit(/\\(punct)/, "gu").replace(/punct/g, _punctuation).getRegex();
  const autolink = edit(/^<(scheme:[^\s\x00-\x1f<>]*|email)>/).replace("scheme", /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/).replace("email", /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/).getRegex();
  const _inlineComment = edit(_comment).replace("(?:-->|$)", "-->").getRegex();
  const tag = edit("^comment|^</[a-zA-Z][\\w:-]*\\s*>|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>|^<\\?[\\s\\S]*?\\?>|^<![a-zA-Z]+\\s[\\s\\S]*?>|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>").replace("comment", _inlineComment).replace("attribute", /\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/).getRegex();
  const _inlineLabel = /(?:\[(?:\\.|[^\[\]\\])*\]|\\.|`[^`]*`|[^\[\]\\`])*?/;
  const link = edit(/^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/).replace("label", _inlineLabel).replace("href", /<(?:\\.|[^\n<>\\])+>|[^\s\x00-\x1f]*/).replace("title", /"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/).getRegex();
  const reflink = edit(/^!?\[(label)\]\[(ref)\]/).replace("label", _inlineLabel).replace("ref", _blockLabel).getRegex();
  const nolink = edit(/^!?\[(ref)\](?:\[\])?/).replace("ref", _blockLabel).getRegex();
  const reflinkSearch = edit("reflink|nolink(?!\\()", "g").replace("reflink", reflink).replace("nolink", nolink).getRegex();
  const inlineNormal = {
    _backpedal: noopTest,
    // only used for GFM url
    anyPunctuation,
    autolink,
    blockSkip,
    br,
    code: inlineCode,
    del: noopTest,
    emStrongLDelim,
    emStrongRDelimAst,
    emStrongRDelimUnd,
    escape: escape$1,
    link,
    nolink,
    punctuation,
    reflink,
    reflinkSearch,
    tag,
    text: inlineText,
    url: noopTest
  };
  const inlinePedantic = {
    ...inlineNormal,
    link: edit(/^!?\[(label)\]\((.*?)\)/).replace("label", _inlineLabel).getRegex(),
    reflink: edit(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace("label", _inlineLabel).getRegex()
  };
  const inlineGfm = {
    ...inlineNormal,
    emStrongRDelimAst: emStrongRDelimAstGfm,
    emStrongLDelim: emStrongLDelimGfm,
    url: edit(/^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/, "i").replace("email", /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/).getRegex(),
    _backpedal: /(?:[^?!.,:;*_'"~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'"~)]+(?!$))+/,
    del: /^(~~?)(?=[^\s~])((?:\\.|[^\\])*?(?:\\.|[^\s~\\]))\1(?=[^~]|$)/,
    text: /^([`~]+|[^`~])(?:(?= {2,}\n)|(?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)|[\s\S]*?(?:(?=[\\<!\[`*~_]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)))/
  };
  const inlineBreaks = {
    ...inlineGfm,
    br: edit(br).replace("{2,}", "*").getRegex(),
    text: edit(inlineGfm.text).replace("\\b_", "\\b_| {2,}\\n").replace(/\{2,\}/g, "*").getRegex()
  };
  const block = {
    normal: blockNormal,
    gfm: blockGfm,
    pedantic: blockPedantic
  };
  const inline = {
    normal: inlineNormal,
    gfm: inlineGfm,
    breaks: inlineBreaks,
    pedantic: inlinePedantic
  };
  const escapeReplacements = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': "&quot;",
    "'": "&#39;"
  };
  const getEscapeReplacement = (ch) => escapeReplacements[ch];
  function escape$2(html2, encode2) {
    if (encode2) {
      if (other.escapeTest.test(html2)) {
        return html2.replace(other.escapeReplace, getEscapeReplacement);
      }
    } else {
      if (other.escapeTestNoEncode.test(html2)) {
        return html2.replace(other.escapeReplaceNoEncode, getEscapeReplacement);
      }
    }
    return html2;
  }
  function cleanUrl(href) {
    try {
      href = encodeURI(href).replace(other.percentDecode, "%");
    } catch {
      return null;
    }
    return href;
  }
  function splitCells(tableRow, count) {
    var _a;
    const row = tableRow.replace(other.findPipe, (match, offset, str) => {
      let escaped = false;
      let curr = offset;
      while (--curr >= 0 && str[curr] === "\\")
        escaped = !escaped;
      if (escaped) {
        return "|";
      } else {
        return " |";
      }
    }), cells = row.split(other.splitPipe);
    let i = 0;
    if (!cells[0].trim()) {
      cells.shift();
    }
    if (cells.length > 0 && !((_a = cells.at(-1)) == null ? void 0 : _a.trim())) {
      cells.pop();
    }
    if (count) {
      if (cells.length > count) {
        cells.splice(count);
      } else {
        while (cells.length < count)
          cells.push("");
      }
    }
    for (; i < cells.length; i++) {
      cells[i] = cells[i].trim().replace(other.slashPipe, "|");
    }
    return cells;
  }
  function rtrim(str, c, invert) {
    const l = str.length;
    if (l === 0) {
      return "";
    }
    let suffLen = 0;
    while (suffLen < l) {
      const currChar = str.charAt(l - suffLen - 1);
      if (currChar === c && true) {
        suffLen++;
      } else {
        break;
      }
    }
    return str.slice(0, l - suffLen);
  }
  function findClosingBracket(str, b) {
    if (str.indexOf(b[1]) === -1) {
      return -1;
    }
    let level = 0;
    for (let i = 0; i < str.length; i++) {
      if (str[i] === "\\") {
        i++;
      } else if (str[i] === b[0]) {
        level++;
      } else if (str[i] === b[1]) {
        level--;
        if (level < 0) {
          return i;
        }
      }
    }
    return -1;
  }
  function outputLink(cap, link2, raw, lexer, rules) {
    const href = link2.href;
    const title = link2.title || null;
    const text = cap[1].replace(rules.other.outputLinkReplace, "$1");
    if (cap[0].charAt(0) !== "!") {
      lexer.state.inLink = true;
      const token = {
        type: "link",
        raw,
        href,
        title,
        text,
        tokens: lexer.inlineTokens(text)
      };
      lexer.state.inLink = false;
      return token;
    }
    return {
      type: "image",
      raw,
      href,
      title,
      text
    };
  }
  function indentCodeCompensation(raw, text, rules) {
    const matchIndentToCode = raw.match(rules.other.indentCodeCompensation);
    if (matchIndentToCode === null) {
      return text;
    }
    const indentToCode = matchIndentToCode[1];
    return text.split("\n").map((node) => {
      const matchIndentInNode = node.match(rules.other.beginningSpace);
      if (matchIndentInNode === null) {
        return node;
      }
      const [indentInNode] = matchIndentInNode;
      if (indentInNode.length >= indentToCode.length) {
        return node.slice(indentToCode.length);
      }
      return node;
    }).join("\n");
  }
  class _Tokenizer {
    // set by the lexer
    constructor(options) {
      __publicField(this, "options");
      __publicField(this, "rules");
      // set by the lexer
      __publicField(this, "lexer");
      this.options = options || _defaults;
    }
    space(src) {
      const cap = this.rules.block.newline.exec(src);
      if (cap && cap[0].length > 0) {
        return {
          type: "space",
          raw: cap[0]
        };
      }
    }
    code(src) {
      const cap = this.rules.block.code.exec(src);
      if (cap) {
        const text = cap[0].replace(this.rules.other.codeRemoveIndent, "");
        return {
          type: "code",
          raw: cap[0],
          codeBlockStyle: "indented",
          text: !this.options.pedantic ? rtrim(text, "\n") : text
        };
      }
    }
    fences(src) {
      const cap = this.rules.block.fences.exec(src);
      if (cap) {
        const raw = cap[0];
        const text = indentCodeCompensation(raw, cap[3] || "", this.rules);
        return {
          type: "code",
          raw,
          lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, "$1") : cap[2],
          text
        };
      }
    }
    heading(src) {
      const cap = this.rules.block.heading.exec(src);
      if (cap) {
        let text = cap[2].trim();
        if (this.rules.other.endingHash.test(text)) {
          const trimmed = rtrim(text, "#");
          if (this.options.pedantic) {
            text = trimmed.trim();
          } else if (!trimmed || this.rules.other.endingSpaceChar.test(trimmed)) {
            text = trimmed.trim();
          }
        }
        return {
          type: "heading",
          raw: cap[0],
          depth: cap[1].length,
          text,
          tokens: this.lexer.inline(text)
        };
      }
    }
    hr(src) {
      const cap = this.rules.block.hr.exec(src);
      if (cap) {
        return {
          type: "hr",
          raw: rtrim(cap[0], "\n")
        };
      }
    }
    blockquote(src) {
      const cap = this.rules.block.blockquote.exec(src);
      if (cap) {
        let lines = rtrim(cap[0], "\n").split("\n");
        let raw = "";
        let text = "";
        const tokens = [];
        while (lines.length > 0) {
          let inBlockquote = false;
          const currentLines = [];
          let i;
          for (i = 0; i < lines.length; i++) {
            if (this.rules.other.blockquoteStart.test(lines[i])) {
              currentLines.push(lines[i]);
              inBlockquote = true;
            } else if (!inBlockquote) {
              currentLines.push(lines[i]);
            } else {
              break;
            }
          }
          lines = lines.slice(i);
          const currentRaw = currentLines.join("\n");
          const currentText = currentRaw.replace(this.rules.other.blockquoteSetextReplace, "\n    $1").replace(this.rules.other.blockquoteSetextReplace2, "");
          raw = raw ? `${raw}
${currentRaw}` : currentRaw;
          text = text ? `${text}
${currentText}` : currentText;
          const top = this.lexer.state.top;
          this.lexer.state.top = true;
          this.lexer.blockTokens(currentText, tokens, true);
          this.lexer.state.top = top;
          if (lines.length === 0) {
            break;
          }
          const lastToken = tokens.at(-1);
          if ((lastToken == null ? void 0 : lastToken.type) === "code") {
            break;
          } else if ((lastToken == null ? void 0 : lastToken.type) === "blockquote") {
            const oldToken = lastToken;
            const newText = oldToken.raw + "\n" + lines.join("\n");
            const newToken = this.blockquote(newText);
            tokens[tokens.length - 1] = newToken;
            raw = raw.substring(0, raw.length - oldToken.raw.length) + newToken.raw;
            text = text.substring(0, text.length - oldToken.text.length) + newToken.text;
            break;
          } else if ((lastToken == null ? void 0 : lastToken.type) === "list") {
            const oldToken = lastToken;
            const newText = oldToken.raw + "\n" + lines.join("\n");
            const newToken = this.list(newText);
            tokens[tokens.length - 1] = newToken;
            raw = raw.substring(0, raw.length - lastToken.raw.length) + newToken.raw;
            text = text.substring(0, text.length - oldToken.raw.length) + newToken.raw;
            lines = newText.substring(tokens.at(-1).raw.length).split("\n");
            continue;
          }
        }
        return {
          type: "blockquote",
          raw,
          tokens,
          text
        };
      }
    }
    list(src) {
      let cap = this.rules.block.list.exec(src);
      if (cap) {
        let bull = cap[1].trim();
        const isordered = bull.length > 1;
        const list2 = {
          type: "list",
          raw: "",
          ordered: isordered,
          start: isordered ? +bull.slice(0, -1) : "",
          loose: false,
          items: []
        };
        bull = isordered ? `\\d{1,9}\\${bull.slice(-1)}` : `\\${bull}`;
        if (this.options.pedantic) {
          bull = isordered ? bull : "[*+-]";
        }
        const itemRegex = this.rules.other.listItemRegex(bull);
        let endsWithBlankLine = false;
        while (src) {
          let endEarly = false;
          let raw = "";
          let itemContents = "";
          if (!(cap = itemRegex.exec(src))) {
            break;
          }
          if (this.rules.block.hr.test(src)) {
            break;
          }
          raw = cap[0];
          src = src.substring(raw.length);
          let line = cap[2].split("\n", 1)[0].replace(this.rules.other.listReplaceTabs, (t) => " ".repeat(3 * t.length));
          let nextLine = src.split("\n", 1)[0];
          let blankLine = !line.trim();
          let indent = 0;
          if (this.options.pedantic) {
            indent = 2;
            itemContents = line.trimStart();
          } else if (blankLine) {
            indent = cap[1].length + 1;
          } else {
            indent = cap[2].search(this.rules.other.nonSpaceChar);
            indent = indent > 4 ? 1 : indent;
            itemContents = line.slice(indent);
            indent += cap[1].length;
          }
          if (blankLine && this.rules.other.blankLine.test(nextLine)) {
            raw += nextLine + "\n";
            src = src.substring(nextLine.length + 1);
            endEarly = true;
          }
          if (!endEarly) {
            const nextBulletRegex = this.rules.other.nextBulletRegex(indent);
            const hrRegex = this.rules.other.hrRegex(indent);
            const fencesBeginRegex = this.rules.other.fencesBeginRegex(indent);
            const headingBeginRegex = this.rules.other.headingBeginRegex(indent);
            const htmlBeginRegex = this.rules.other.htmlBeginRegex(indent);
            while (src) {
              const rawLine = src.split("\n", 1)[0];
              let nextLineWithoutTabs;
              nextLine = rawLine;
              if (this.options.pedantic) {
                nextLine = nextLine.replace(this.rules.other.listReplaceNesting, "  ");
                nextLineWithoutTabs = nextLine;
              } else {
                nextLineWithoutTabs = nextLine.replace(this.rules.other.tabCharGlobal, "    ");
              }
              if (fencesBeginRegex.test(nextLine)) {
                break;
              }
              if (headingBeginRegex.test(nextLine)) {
                break;
              }
              if (htmlBeginRegex.test(nextLine)) {
                break;
              }
              if (nextBulletRegex.test(nextLine)) {
                break;
              }
              if (hrRegex.test(nextLine)) {
                break;
              }
              if (nextLineWithoutTabs.search(this.rules.other.nonSpaceChar) >= indent || !nextLine.trim()) {
                itemContents += "\n" + nextLineWithoutTabs.slice(indent);
              } else {
                if (blankLine) {
                  break;
                }
                if (line.replace(this.rules.other.tabCharGlobal, "    ").search(this.rules.other.nonSpaceChar) >= 4) {
                  break;
                }
                if (fencesBeginRegex.test(line)) {
                  break;
                }
                if (headingBeginRegex.test(line)) {
                  break;
                }
                if (hrRegex.test(line)) {
                  break;
                }
                itemContents += "\n" + nextLine;
              }
              if (!blankLine && !nextLine.trim()) {
                blankLine = true;
              }
              raw += rawLine + "\n";
              src = src.substring(rawLine.length + 1);
              line = nextLineWithoutTabs.slice(indent);
            }
          }
          if (!list2.loose) {
            if (endsWithBlankLine) {
              list2.loose = true;
            } else if (this.rules.other.doubleBlankLine.test(raw)) {
              endsWithBlankLine = true;
            }
          }
          let istask = null;
          let ischecked;
          if (this.options.gfm) {
            istask = this.rules.other.listIsTask.exec(itemContents);
            if (istask) {
              ischecked = istask[0] !== "[ ] ";
              itemContents = itemContents.replace(this.rules.other.listReplaceTask, "");
            }
          }
          list2.items.push({
            type: "list_item",
            raw,
            task: !!istask,
            checked: ischecked,
            loose: false,
            text: itemContents,
            tokens: []
          });
          list2.raw += raw;
        }
        const lastItem = list2.items.at(-1);
        if (lastItem) {
          lastItem.raw = lastItem.raw.trimEnd();
          lastItem.text = lastItem.text.trimEnd();
        } else {
          return;
        }
        list2.raw = list2.raw.trimEnd();
        for (let i = 0; i < list2.items.length; i++) {
          this.lexer.state.top = false;
          list2.items[i].tokens = this.lexer.blockTokens(list2.items[i].text, []);
          if (!list2.loose) {
            const spacers = list2.items[i].tokens.filter((t) => t.type === "space");
            const hasMultipleLineBreaks = spacers.length > 0 && spacers.some((t) => this.rules.other.anyLine.test(t.raw));
            list2.loose = hasMultipleLineBreaks;
          }
        }
        if (list2.loose) {
          for (let i = 0; i < list2.items.length; i++) {
            list2.items[i].loose = true;
          }
        }
        return list2;
      }
    }
    html(src) {
      const cap = this.rules.block.html.exec(src);
      if (cap) {
        const token = {
          type: "html",
          block: true,
          raw: cap[0],
          pre: cap[1] === "pre" || cap[1] === "script" || cap[1] === "style",
          text: cap[0]
        };
        return token;
      }
    }
    def(src) {
      const cap = this.rules.block.def.exec(src);
      if (cap) {
        const tag2 = cap[1].toLowerCase().replace(this.rules.other.multipleSpaceGlobal, " ");
        const href = cap[2] ? cap[2].replace(this.rules.other.hrefBrackets, "$1").replace(this.rules.inline.anyPunctuation, "$1") : "";
        const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, "$1") : cap[3];
        return {
          type: "def",
          tag: tag2,
          raw: cap[0],
          href,
          title
        };
      }
    }
    table(src) {
      var _a;
      const cap = this.rules.block.table.exec(src);
      if (!cap) {
        return;
      }
      if (!this.rules.other.tableDelimiter.test(cap[2])) {
        return;
      }
      const headers = splitCells(cap[1]);
      const aligns = cap[2].replace(this.rules.other.tableAlignChars, "").split("|");
      const rows = ((_a = cap[3]) == null ? void 0 : _a.trim()) ? cap[3].replace(this.rules.other.tableRowBlankLine, "").split("\n") : [];
      const item = {
        type: "table",
        raw: cap[0],
        header: [],
        align: [],
        rows: []
      };
      if (headers.length !== aligns.length) {
        return;
      }
      for (const align of aligns) {
        if (this.rules.other.tableAlignRight.test(align)) {
          item.align.push("right");
        } else if (this.rules.other.tableAlignCenter.test(align)) {
          item.align.push("center");
        } else if (this.rules.other.tableAlignLeft.test(align)) {
          item.align.push("left");
        } else {
          item.align.push(null);
        }
      }
      for (let i = 0; i < headers.length; i++) {
        item.header.push({
          text: headers[i],
          tokens: this.lexer.inline(headers[i]),
          header: true,
          align: item.align[i]
        });
      }
      for (const row of rows) {
        item.rows.push(splitCells(row, item.header.length).map((cell, i) => {
          return {
            text: cell,
            tokens: this.lexer.inline(cell),
            header: false,
            align: item.align[i]
          };
        }));
      }
      return item;
    }
    lheading(src) {
      const cap = this.rules.block.lheading.exec(src);
      if (cap) {
        return {
          type: "heading",
          raw: cap[0],
          depth: cap[2].charAt(0) === "=" ? 1 : 2,
          text: cap[1],
          tokens: this.lexer.inline(cap[1])
        };
      }
    }
    paragraph(src) {
      const cap = this.rules.block.paragraph.exec(src);
      if (cap) {
        const text = cap[1].charAt(cap[1].length - 1) === "\n" ? cap[1].slice(0, -1) : cap[1];
        return {
          type: "paragraph",
          raw: cap[0],
          text,
          tokens: this.lexer.inline(text)
        };
      }
    }
    text(src) {
      const cap = this.rules.block.text.exec(src);
      if (cap) {
        return {
          type: "text",
          raw: cap[0],
          text: cap[0],
          tokens: this.lexer.inline(cap[0])
        };
      }
    }
    escape(src) {
      const cap = this.rules.inline.escape.exec(src);
      if (cap) {
        return {
          type: "escape",
          raw: cap[0],
          text: cap[1]
        };
      }
    }
    tag(src) {
      const cap = this.rules.inline.tag.exec(src);
      if (cap) {
        if (!this.lexer.state.inLink && this.rules.other.startATag.test(cap[0])) {
          this.lexer.state.inLink = true;
        } else if (this.lexer.state.inLink && this.rules.other.endATag.test(cap[0])) {
          this.lexer.state.inLink = false;
        }
        if (!this.lexer.state.inRawBlock && this.rules.other.startPreScriptTag.test(cap[0])) {
          this.lexer.state.inRawBlock = true;
        } else if (this.lexer.state.inRawBlock && this.rules.other.endPreScriptTag.test(cap[0])) {
          this.lexer.state.inRawBlock = false;
        }
        return {
          type: "html",
          raw: cap[0],
          inLink: this.lexer.state.inLink,
          inRawBlock: this.lexer.state.inRawBlock,
          block: false,
          text: cap[0]
        };
      }
    }
    link(src) {
      const cap = this.rules.inline.link.exec(src);
      if (cap) {
        const trimmedUrl = cap[2].trim();
        if (!this.options.pedantic && this.rules.other.startAngleBracket.test(trimmedUrl)) {
          if (!this.rules.other.endAngleBracket.test(trimmedUrl)) {
            return;
          }
          const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), "\\");
          if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {
            return;
          }
        } else {
          const lastParenIndex = findClosingBracket(cap[2], "()");
          if (lastParenIndex > -1) {
            const start = cap[0].indexOf("!") === 0 ? 5 : 4;
            const linkLen = start + cap[1].length + lastParenIndex;
            cap[2] = cap[2].substring(0, lastParenIndex);
            cap[0] = cap[0].substring(0, linkLen).trim();
            cap[3] = "";
          }
        }
        let href = cap[2];
        let title = "";
        if (this.options.pedantic) {
          const link2 = this.rules.other.pedanticHrefTitle.exec(href);
          if (link2) {
            href = link2[1];
            title = link2[3];
          }
        } else {
          title = cap[3] ? cap[3].slice(1, -1) : "";
        }
        href = href.trim();
        if (this.rules.other.startAngleBracket.test(href)) {
          if (this.options.pedantic && !this.rules.other.endAngleBracket.test(trimmedUrl)) {
            href = href.slice(1);
          } else {
            href = href.slice(1, -1);
          }
        }
        return outputLink(cap, {
          href: href ? href.replace(this.rules.inline.anyPunctuation, "$1") : href,
          title: title ? title.replace(this.rules.inline.anyPunctuation, "$1") : title
        }, cap[0], this.lexer, this.rules);
      }
    }
    reflink(src, links) {
      let cap;
      if ((cap = this.rules.inline.reflink.exec(src)) || (cap = this.rules.inline.nolink.exec(src))) {
        const linkString = (cap[2] || cap[1]).replace(this.rules.other.multipleSpaceGlobal, " ");
        const link2 = links[linkString.toLowerCase()];
        if (!link2) {
          const text = cap[0].charAt(0);
          return {
            type: "text",
            raw: text,
            text
          };
        }
        return outputLink(cap, link2, cap[0], this.lexer, this.rules);
      }
    }
    emStrong(src, maskedSrc, prevChar = "") {
      let match = this.rules.inline.emStrongLDelim.exec(src);
      if (!match)
        return;
      if (match[3] && prevChar.match(this.rules.other.unicodeAlphaNumeric))
        return;
      const nextChar = match[1] || match[2] || "";
      if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {
        const lLength = [...match[0]].length - 1;
        let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;
        const endReg = match[0][0] === "*" ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;
        endReg.lastIndex = 0;
        maskedSrc = maskedSrc.slice(-1 * src.length + lLength);
        while ((match = endReg.exec(maskedSrc)) != null) {
          rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];
          if (!rDelim)
            continue;
          rLength = [...rDelim].length;
          if (match[3] || match[4]) {
            delimTotal += rLength;
            continue;
          } else if (match[5] || match[6]) {
            if (lLength % 3 && !((lLength + rLength) % 3)) {
              midDelimTotal += rLength;
              continue;
            }
          }
          delimTotal -= rLength;
          if (delimTotal > 0)
            continue;
          rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);
          const lastCharLength = [...match[0]][0].length;
          const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);
          if (Math.min(lLength, rLength) % 2) {
            const text2 = raw.slice(1, -1);
            return {
              type: "em",
              raw,
              text: text2,
              tokens: this.lexer.inlineTokens(text2)
            };
          }
          const text = raw.slice(2, -2);
          return {
            type: "strong",
            raw,
            text,
            tokens: this.lexer.inlineTokens(text)
          };
        }
      }
    }
    codespan(src) {
      const cap = this.rules.inline.code.exec(src);
      if (cap) {
        let text = cap[2].replace(this.rules.other.newLineCharGlobal, " ");
        const hasNonSpaceChars = this.rules.other.nonSpaceChar.test(text);
        const hasSpaceCharsOnBothEnds = this.rules.other.startingSpaceChar.test(text) && this.rules.other.endingSpaceChar.test(text);
        if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {
          text = text.substring(1, text.length - 1);
        }
        return {
          type: "codespan",
          raw: cap[0],
          text
        };
      }
    }
    br(src) {
      const cap = this.rules.inline.br.exec(src);
      if (cap) {
        return {
          type: "br",
          raw: cap[0]
        };
      }
    }
    del(src) {
      const cap = this.rules.inline.del.exec(src);
      if (cap) {
        return {
          type: "del",
          raw: cap[0],
          text: cap[2],
          tokens: this.lexer.inlineTokens(cap[2])
        };
      }
    }
    autolink(src) {
      const cap = this.rules.inline.autolink.exec(src);
      if (cap) {
        let text, href;
        if (cap[2] === "@") {
          text = cap[1];
          href = "mailto:" + text;
        } else {
          text = cap[1];
          href = text;
        }
        return {
          type: "link",
          raw: cap[0],
          text,
          href,
          tokens: [
            {
              type: "text",
              raw: text,
              text
            }
          ]
        };
      }
    }
    url(src) {
      var _a;
      let cap;
      if (cap = this.rules.inline.url.exec(src)) {
        let text, href;
        if (cap[2] === "@") {
          text = cap[0];
          href = "mailto:" + text;
        } else {
          let prevCapZero;
          do {
            prevCapZero = cap[0];
            cap[0] = ((_a = this.rules.inline._backpedal.exec(cap[0])) == null ? void 0 : _a[0]) ?? "";
          } while (prevCapZero !== cap[0]);
          text = cap[0];
          if (cap[1] === "www.") {
            href = "http://" + cap[0];
          } else {
            href = cap[0];
          }
        }
        return {
          type: "link",
          raw: cap[0],
          text,
          href,
          tokens: [
            {
              type: "text",
              raw: text,
              text
            }
          ]
        };
      }
    }
    inlineText(src) {
      const cap = this.rules.inline.text.exec(src);
      if (cap) {
        const escaped = this.lexer.state.inRawBlock;
        return {
          type: "text",
          raw: cap[0],
          text: cap[0],
          escaped
        };
      }
    }
  }
  class _Lexer {
    constructor(options) {
      __publicField(this, "tokens");
      __publicField(this, "options");
      __publicField(this, "state");
      __publicField(this, "tokenizer");
      __publicField(this, "inlineQueue");
      this.tokens = [];
      this.tokens.links = /* @__PURE__ */ Object.create(null);
      this.options = options || _defaults;
      this.options.tokenizer = this.options.tokenizer || new _Tokenizer();
      this.tokenizer = this.options.tokenizer;
      this.tokenizer.options = this.options;
      this.tokenizer.lexer = this;
      this.inlineQueue = [];
      this.state = {
        inLink: false,
        inRawBlock: false,
        top: true
      };
      const rules = {
        other,
        block: block.normal,
        inline: inline.normal
      };
      if (this.options.pedantic) {
        rules.block = block.pedantic;
        rules.inline = inline.pedantic;
      } else if (this.options.gfm) {
        rules.block = block.gfm;
        if (this.options.breaks) {
          rules.inline = inline.breaks;
        } else {
          rules.inline = inline.gfm;
        }
      }
      this.tokenizer.rules = rules;
    }
    /**
     * Expose Rules
     */
    static get rules() {
      return {
        block,
        inline
      };
    }
    /**
     * Static Lex Method
     */
    static lex(src, options) {
      const lexer = new _Lexer(options);
      return lexer.lex(src);
    }
    /**
     * Static Lex Inline Method
     */
    static lexInline(src, options) {
      const lexer = new _Lexer(options);
      return lexer.inlineTokens(src);
    }
    /**
     * Preprocessing
     */
    lex(src) {
      src = src.replace(other.carriageReturn, "\n");
      this.blockTokens(src, this.tokens);
      for (let i = 0; i < this.inlineQueue.length; i++) {
        const next = this.inlineQueue[i];
        this.inlineTokens(next.src, next.tokens);
      }
      this.inlineQueue = [];
      return this.tokens;
    }
    blockTokens(src, tokens = [], lastParagraphClipped = false) {
      var _a, _b, _c;
      if (this.options.pedantic) {
        src = src.replace(other.tabCharGlobal, "    ").replace(other.spaceLine, "");
      }
      while (src) {
        let token;
        if ((_b = (_a = this.options.extensions) == null ? void 0 : _a.block) == null ? void 0 : _b.some((extTokenizer) => {
          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {
            src = src.substring(token.raw.length);
            tokens.push(token);
            return true;
          }
          return false;
        })) {
          continue;
        }
        if (token = this.tokenizer.space(src)) {
          src = src.substring(token.raw.length);
          const lastToken = tokens.at(-1);
          if (token.raw.length === 1 && lastToken !== void 0) {
            lastToken.raw += "\n";
          } else {
            tokens.push(token);
          }
          continue;
        }
        if (token = this.tokenizer.code(src)) {
          src = src.substring(token.raw.length);
          const lastToken = tokens.at(-1);
          if ((lastToken == null ? void 0 : lastToken.type) === "paragraph" || (lastToken == null ? void 0 : lastToken.type) === "text") {
            lastToken.raw += "\n" + token.raw;
            lastToken.text += "\n" + token.text;
            this.inlineQueue.at(-1).src = lastToken.text;
          } else {
            tokens.push(token);
          }
          continue;
        }
        if (token = this.tokenizer.fences(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.heading(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.hr(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.blockquote(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.list(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.html(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.def(src)) {
          src = src.substring(token.raw.length);
          const lastToken = tokens.at(-1);
          if ((lastToken == null ? void 0 : lastToken.type) === "paragraph" || (lastToken == null ? void 0 : lastToken.type) === "text") {
            lastToken.raw += "\n" + token.raw;
            lastToken.text += "\n" + token.raw;
            this.inlineQueue.at(-1).src = lastToken.text;
          } else if (!this.tokens.links[token.tag]) {
            this.tokens.links[token.tag] = {
              href: token.href,
              title: token.title
            };
          }
          continue;
        }
        if (token = this.tokenizer.table(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.lheading(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        let cutSrc = src;
        if ((_c = this.options.extensions) == null ? void 0 : _c.startBlock) {
          let startIndex = Infinity;
          const tempSrc = src.slice(1);
          let tempStart;
          this.options.extensions.startBlock.forEach((getStartIndex) => {
            tempStart = getStartIndex.call({ lexer: this }, tempSrc);
            if (typeof tempStart === "number" && tempStart >= 0) {
              startIndex = Math.min(startIndex, tempStart);
            }
          });
          if (startIndex < Infinity && startIndex >= 0) {
            cutSrc = src.substring(0, startIndex + 1);
          }
        }
        if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {
          const lastToken = tokens.at(-1);
          if (lastParagraphClipped && (lastToken == null ? void 0 : lastToken.type) === "paragraph") {
            lastToken.raw += "\n" + token.raw;
            lastToken.text += "\n" + token.text;
            this.inlineQueue.pop();
            this.inlineQueue.at(-1).src = lastToken.text;
          } else {
            tokens.push(token);
          }
          lastParagraphClipped = cutSrc.length !== src.length;
          src = src.substring(token.raw.length);
          continue;
        }
        if (token = this.tokenizer.text(src)) {
          src = src.substring(token.raw.length);
          const lastToken = tokens.at(-1);
          if ((lastToken == null ? void 0 : lastToken.type) === "text") {
            lastToken.raw += "\n" + token.raw;
            lastToken.text += "\n" + token.text;
            this.inlineQueue.pop();
            this.inlineQueue.at(-1).src = lastToken.text;
          } else {
            tokens.push(token);
          }
          continue;
        }
        if (src) {
          const errMsg = "Infinite loop on byte: " + src.charCodeAt(0);
          if (this.options.silent) {
            formatAppLog("error", "at node_modules/marked/lib/marked.esm.js:1581", errMsg);
            break;
          } else {
            throw new Error(errMsg);
          }
        }
      }
      this.state.top = true;
      return tokens;
    }
    inline(src, tokens = []) {
      this.inlineQueue.push({ src, tokens });
      return tokens;
    }
    /**
     * Lexing/Compiling
     */
    inlineTokens(src, tokens = []) {
      var _a, _b, _c;
      let maskedSrc = src;
      let match = null;
      if (this.tokens.links) {
        const links = Object.keys(this.tokens.links);
        if (links.length > 0) {
          while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {
            if (links.includes(match[0].slice(match[0].lastIndexOf("[") + 1, -1))) {
              maskedSrc = maskedSrc.slice(0, match.index) + "[" + "a".repeat(match[0].length - 2) + "]" + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);
            }
          }
        }
      }
      while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {
        maskedSrc = maskedSrc.slice(0, match.index) + "[" + "a".repeat(match[0].length - 2) + "]" + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);
      }
      while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {
        maskedSrc = maskedSrc.slice(0, match.index) + "++" + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);
      }
      let keepPrevChar = false;
      let prevChar = "";
      while (src) {
        if (!keepPrevChar) {
          prevChar = "";
        }
        keepPrevChar = false;
        let token;
        if ((_b = (_a = this.options.extensions) == null ? void 0 : _a.inline) == null ? void 0 : _b.some((extTokenizer) => {
          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {
            src = src.substring(token.raw.length);
            tokens.push(token);
            return true;
          }
          return false;
        })) {
          continue;
        }
        if (token = this.tokenizer.escape(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.tag(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.link(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.reflink(src, this.tokens.links)) {
          src = src.substring(token.raw.length);
          const lastToken = tokens.at(-1);
          if (token.type === "text" && (lastToken == null ? void 0 : lastToken.type) === "text") {
            lastToken.raw += token.raw;
            lastToken.text += token.text;
          } else {
            tokens.push(token);
          }
          continue;
        }
        if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.codespan(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.br(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.del(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (token = this.tokenizer.autolink(src)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        if (!this.state.inLink && (token = this.tokenizer.url(src))) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          continue;
        }
        let cutSrc = src;
        if ((_c = this.options.extensions) == null ? void 0 : _c.startInline) {
          let startIndex = Infinity;
          const tempSrc = src.slice(1);
          let tempStart;
          this.options.extensions.startInline.forEach((getStartIndex) => {
            tempStart = getStartIndex.call({ lexer: this }, tempSrc);
            if (typeof tempStart === "number" && tempStart >= 0) {
              startIndex = Math.min(startIndex, tempStart);
            }
          });
          if (startIndex < Infinity && startIndex >= 0) {
            cutSrc = src.substring(0, startIndex + 1);
          }
        }
        if (token = this.tokenizer.inlineText(cutSrc)) {
          src = src.substring(token.raw.length);
          if (token.raw.slice(-1) !== "_") {
            prevChar = token.raw.slice(-1);
          }
          keepPrevChar = true;
          const lastToken = tokens.at(-1);
          if ((lastToken == null ? void 0 : lastToken.type) === "text") {
            lastToken.raw += token.raw;
            lastToken.text += token.text;
          } else {
            tokens.push(token);
          }
          continue;
        }
        if (src) {
          const errMsg = "Infinite loop on byte: " + src.charCodeAt(0);
          if (this.options.silent) {
            formatAppLog("error", "at node_modules/marked/lib/marked.esm.js:1746", errMsg);
            break;
          } else {
            throw new Error(errMsg);
          }
        }
      }
      return tokens;
    }
  }
  class _Renderer {
    // set by the parser
    constructor(options) {
      __publicField(this, "options");
      __publicField(this, "parser");
      this.options = options || _defaults;
    }
    space(token) {
      return "";
    }
    code({ text, lang: lang2, escaped }) {
      var _a;
      const langString = (_a = (lang2 || "").match(other.notSpaceStart)) == null ? void 0 : _a[0];
      const code = text.replace(other.endingNewline, "") + "\n";
      if (!langString) {
        return "<pre><code>" + (escaped ? code : escape$2(code, true)) + "</code></pre>\n";
      }
      return '<pre><code class="language-' + escape$2(langString) + '">' + (escaped ? code : escape$2(code, true)) + "</code></pre>\n";
    }
    blockquote({ tokens }) {
      const body = this.parser.parse(tokens);
      return `<blockquote>
${body}</blockquote>
`;
    }
    html({ text }) {
      return text;
    }
    heading({ tokens, depth }) {
      return `<h${depth}>${this.parser.parseInline(tokens)}</h${depth}>
`;
    }
    hr(token) {
      return "<hr>\n";
    }
    list(token) {
      const ordered = token.ordered;
      const start = token.start;
      let body = "";
      for (let j = 0; j < token.items.length; j++) {
        const item = token.items[j];
        body += this.listitem(item);
      }
      const type = ordered ? "ol" : "ul";
      const startAttr = ordered && start !== 1 ? ' start="' + start + '"' : "";
      return "<" + type + startAttr + ">\n" + body + "</" + type + ">\n";
    }
    listitem(item) {
      var _a;
      let itemBody = "";
      if (item.task) {
        const checkbox = this.checkbox({ checked: !!item.checked });
        if (item.loose) {
          if (((_a = item.tokens[0]) == null ? void 0 : _a.type) === "paragraph") {
            item.tokens[0].text = checkbox + " " + item.tokens[0].text;
            if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === "text") {
              item.tokens[0].tokens[0].text = checkbox + " " + escape$2(item.tokens[0].tokens[0].text);
              item.tokens[0].tokens[0].escaped = true;
            }
          } else {
            item.tokens.unshift({
              type: "text",
              raw: checkbox + " ",
              text: checkbox + " ",
              escaped: true
            });
          }
        } else {
          itemBody += checkbox + " ";
        }
      }
      itemBody += this.parser.parse(item.tokens, !!item.loose);
      return `<li>${itemBody}</li>
`;
    }
    checkbox({ checked }) {
      return "<input " + (checked ? 'checked="" ' : "") + 'disabled="" type="checkbox">';
    }
    paragraph({ tokens }) {
      return `<p>${this.parser.parseInline(tokens)}</p>
`;
    }
    table(token) {
      let header = "";
      let cell = "";
      for (let j = 0; j < token.header.length; j++) {
        cell += this.tablecell(token.header[j]);
      }
      header += this.tablerow({ text: cell });
      let body = "";
      for (let j = 0; j < token.rows.length; j++) {
        const row = token.rows[j];
        cell = "";
        for (let k = 0; k < row.length; k++) {
          cell += this.tablecell(row[k]);
        }
        body += this.tablerow({ text: cell });
      }
      if (body)
        body = `<tbody>${body}</tbody>`;
      return "<table>\n<thead>\n" + header + "</thead>\n" + body + "</table>\n";
    }
    tablerow({ text }) {
      return `<tr>
${text}</tr>
`;
    }
    tablecell(token) {
      const content = this.parser.parseInline(token.tokens);
      const type = token.header ? "th" : "td";
      const tag2 = token.align ? `<${type} align="${token.align}">` : `<${type}>`;
      return tag2 + content + `</${type}>
`;
    }
    /**
     * span level renderer
     */
    strong({ tokens }) {
      return `<strong>${this.parser.parseInline(tokens)}</strong>`;
    }
    em({ tokens }) {
      return `<em>${this.parser.parseInline(tokens)}</em>`;
    }
    codespan({ text }) {
      return `<code>${escape$2(text, true)}</code>`;
    }
    br(token) {
      return "<br>";
    }
    del({ tokens }) {
      return `<del>${this.parser.parseInline(tokens)}</del>`;
    }
    link({ href, title, tokens }) {
      const text = this.parser.parseInline(tokens);
      const cleanHref = cleanUrl(href);
      if (cleanHref === null) {
        return text;
      }
      href = cleanHref;
      let out = '<a href="' + href + '"';
      if (title) {
        out += ' title="' + escape$2(title) + '"';
      }
      out += ">" + text + "</a>";
      return out;
    }
    image({ href, title, text }) {
      const cleanHref = cleanUrl(href);
      if (cleanHref === null) {
        return escape$2(text);
      }
      href = cleanHref;
      let out = `<img src="${href}" alt="${text}"`;
      if (title) {
        out += ` title="${escape$2(title)}"`;
      }
      out += ">";
      return out;
    }
    text(token) {
      return "tokens" in token && token.tokens ? this.parser.parseInline(token.tokens) : "escaped" in token && token.escaped ? token.text : escape$2(token.text);
    }
  }
  class _TextRenderer {
    // no need for block level renderers
    strong({ text }) {
      return text;
    }
    em({ text }) {
      return text;
    }
    codespan({ text }) {
      return text;
    }
    del({ text }) {
      return text;
    }
    html({ text }) {
      return text;
    }
    text({ text }) {
      return text;
    }
    link({ text }) {
      return "" + text;
    }
    image({ text }) {
      return "" + text;
    }
    br() {
      return "";
    }
  }
  class _Parser {
    constructor(options) {
      __publicField(this, "options");
      __publicField(this, "renderer");
      __publicField(this, "textRenderer");
      this.options = options || _defaults;
      this.options.renderer = this.options.renderer || new _Renderer();
      this.renderer = this.options.renderer;
      this.renderer.options = this.options;
      this.renderer.parser = this;
      this.textRenderer = new _TextRenderer();
    }
    /**
     * Static Parse Method
     */
    static parse(tokens, options) {
      const parser = new _Parser(options);
      return parser.parse(tokens);
    }
    /**
     * Static Parse Inline Method
     */
    static parseInline(tokens, options) {
      const parser = new _Parser(options);
      return parser.parseInline(tokens);
    }
    /**
     * Parse Loop
     */
    parse(tokens, top = true) {
      var _a, _b;
      let out = "";
      for (let i = 0; i < tokens.length; i++) {
        const anyToken = tokens[i];
        if ((_b = (_a = this.options.extensions) == null ? void 0 : _a.renderers) == null ? void 0 : _b[anyToken.type]) {
          const genericToken = anyToken;
          const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);
          if (ret !== false || !["space", "hr", "heading", "code", "table", "blockquote", "list", "html", "paragraph", "text"].includes(genericToken.type)) {
            out += ret || "";
            continue;
          }
        }
        const token = anyToken;
        switch (token.type) {
          case "space": {
            out += this.renderer.space(token);
            continue;
          }
          case "hr": {
            out += this.renderer.hr(token);
            continue;
          }
          case "heading": {
            out += this.renderer.heading(token);
            continue;
          }
          case "code": {
            out += this.renderer.code(token);
            continue;
          }
          case "table": {
            out += this.renderer.table(token);
            continue;
          }
          case "blockquote": {
            out += this.renderer.blockquote(token);
            continue;
          }
          case "list": {
            out += this.renderer.list(token);
            continue;
          }
          case "html": {
            out += this.renderer.html(token);
            continue;
          }
          case "paragraph": {
            out += this.renderer.paragraph(token);
            continue;
          }
          case "text": {
            let textToken = token;
            let body = this.renderer.text(textToken);
            while (i + 1 < tokens.length && tokens[i + 1].type === "text") {
              textToken = tokens[++i];
              body += "\n" + this.renderer.text(textToken);
            }
            if (top) {
              out += this.renderer.paragraph({
                type: "paragraph",
                raw: body,
                text: body,
                tokens: [{ type: "text", raw: body, text: body, escaped: true }]
              });
            } else {
              out += body;
            }
            continue;
          }
          default: {
            const errMsg = 'Token with "' + token.type + '" type was not found.';
            if (this.options.silent) {
              formatAppLog("error", "at node_modules/marked/lib/marked.esm.js:2075", errMsg);
              return "";
            } else {
              throw new Error(errMsg);
            }
          }
        }
      }
      return out;
    }
    /**
     * Parse Inline Tokens
     */
    parseInline(tokens, renderer = this.renderer) {
      var _a, _b;
      let out = "";
      for (let i = 0; i < tokens.length; i++) {
        const anyToken = tokens[i];
        if ((_b = (_a = this.options.extensions) == null ? void 0 : _a.renderers) == null ? void 0 : _b[anyToken.type]) {
          const ret = this.options.extensions.renderers[anyToken.type].call({ parser: this }, anyToken);
          if (ret !== false || !["escape", "html", "link", "image", "strong", "em", "codespan", "br", "del", "text"].includes(anyToken.type)) {
            out += ret || "";
            continue;
          }
        }
        const token = anyToken;
        switch (token.type) {
          case "escape": {
            out += renderer.text(token);
            break;
          }
          case "html": {
            out += renderer.html(token);
            break;
          }
          case "link": {
            out += renderer.link(token);
            break;
          }
          case "image": {
            out += renderer.image(token);
            break;
          }
          case "strong": {
            out += renderer.strong(token);
            break;
          }
          case "em": {
            out += renderer.em(token);
            break;
          }
          case "codespan": {
            out += renderer.codespan(token);
            break;
          }
          case "br": {
            out += renderer.br(token);
            break;
          }
          case "del": {
            out += renderer.del(token);
            break;
          }
          case "text": {
            out += renderer.text(token);
            break;
          }
          default: {
            const errMsg = 'Token with "' + token.type + '" type was not found.';
            if (this.options.silent) {
              formatAppLog("error", "at node_modules/marked/lib/marked.esm.js:2146", errMsg);
              return "";
            } else {
              throw new Error(errMsg);
            }
          }
        }
      }
      return out;
    }
  }
  class _Hooks {
    constructor(options) {
      __publicField(this, "options");
      __publicField(this, "block");
      this.options = options || _defaults;
    }
    /**
     * Process markdown before marked
     */
    preprocess(markdown) {
      return markdown;
    }
    /**
     * Process HTML after marked is finished
     */
    postprocess(html2) {
      return html2;
    }
    /**
     * Process all tokens before walk tokens
     */
    processAllTokens(tokens) {
      return tokens;
    }
    /**
     * Provide function to tokenize markdown
     */
    provideLexer() {
      return this.block ? _Lexer.lex : _Lexer.lexInline;
    }
    /**
     * Provide function to parse tokens
     */
    provideParser() {
      return this.block ? _Parser.parse : _Parser.parseInline;
    }
  }
  __publicField(_Hooks, "passThroughHooks", /* @__PURE__ */ new Set([
    "preprocess",
    "postprocess",
    "processAllTokens"
  ]));
  class Marked {
    constructor(...args) {
      __publicField(this, "defaults", _getDefaults());
      __publicField(this, "options", this.setOptions);
      __publicField(this, "parse", this.parseMarkdown(true));
      __publicField(this, "parseInline", this.parseMarkdown(false));
      __publicField(this, "Parser", _Parser);
      __publicField(this, "Renderer", _Renderer);
      __publicField(this, "TextRenderer", _TextRenderer);
      __publicField(this, "Lexer", _Lexer);
      __publicField(this, "Tokenizer", _Tokenizer);
      __publicField(this, "Hooks", _Hooks);
      this.use(...args);
    }
    /**
     * Run callback for every token
     */
    walkTokens(tokens, callback) {
      var _a, _b;
      let values = [];
      for (const token of tokens) {
        values = values.concat(callback.call(this, token));
        switch (token.type) {
          case "table": {
            const tableToken = token;
            for (const cell of tableToken.header) {
              values = values.concat(this.walkTokens(cell.tokens, callback));
            }
            for (const row of tableToken.rows) {
              for (const cell of row) {
                values = values.concat(this.walkTokens(cell.tokens, callback));
              }
            }
            break;
          }
          case "list": {
            const listToken = token;
            values = values.concat(this.walkTokens(listToken.items, callback));
            break;
          }
          default: {
            const genericToken = token;
            if ((_b = (_a = this.defaults.extensions) == null ? void 0 : _a.childTokens) == null ? void 0 : _b[genericToken.type]) {
              this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {
                const tokens2 = genericToken[childTokens].flat(Infinity);
                values = values.concat(this.walkTokens(tokens2, callback));
              });
            } else if (genericToken.tokens) {
              values = values.concat(this.walkTokens(genericToken.tokens, callback));
            }
          }
        }
      }
      return values;
    }
    use(...args) {
      const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };
      args.forEach((pack) => {
        const opts = { ...pack };
        opts.async = this.defaults.async || opts.async || false;
        if (pack.extensions) {
          pack.extensions.forEach((ext) => {
            if (!ext.name) {
              throw new Error("extension name required");
            }
            if ("renderer" in ext) {
              const prevRenderer = extensions.renderers[ext.name];
              if (prevRenderer) {
                extensions.renderers[ext.name] = function(...args2) {
                  let ret = ext.renderer.apply(this, args2);
                  if (ret === false) {
                    ret = prevRenderer.apply(this, args2);
                  }
                  return ret;
                };
              } else {
                extensions.renderers[ext.name] = ext.renderer;
              }
            }
            if ("tokenizer" in ext) {
              if (!ext.level || ext.level !== "block" && ext.level !== "inline") {
                throw new Error("extension level must be 'block' or 'inline'");
              }
              const extLevel = extensions[ext.level];
              if (extLevel) {
                extLevel.unshift(ext.tokenizer);
              } else {
                extensions[ext.level] = [ext.tokenizer];
              }
              if (ext.start) {
                if (ext.level === "block") {
                  if (extensions.startBlock) {
                    extensions.startBlock.push(ext.start);
                  } else {
                    extensions.startBlock = [ext.start];
                  }
                } else if (ext.level === "inline") {
                  if (extensions.startInline) {
                    extensions.startInline.push(ext.start);
                  } else {
                    extensions.startInline = [ext.start];
                  }
                }
              }
            }
            if ("childTokens" in ext && ext.childTokens) {
              extensions.childTokens[ext.name] = ext.childTokens;
            }
          });
          opts.extensions = extensions;
        }
        if (pack.renderer) {
          const renderer = this.defaults.renderer || new _Renderer(this.defaults);
          for (const prop in pack.renderer) {
            if (!(prop in renderer)) {
              throw new Error(`renderer '${prop}' does not exist`);
            }
            if (["options", "parser"].includes(prop)) {
              continue;
            }
            const rendererProp = prop;
            const rendererFunc = pack.renderer[rendererProp];
            const prevRenderer = renderer[rendererProp];
            renderer[rendererProp] = (...args2) => {
              let ret = rendererFunc.apply(renderer, args2);
              if (ret === false) {
                ret = prevRenderer.apply(renderer, args2);
              }
              return ret || "";
            };
          }
          opts.renderer = renderer;
        }
        if (pack.tokenizer) {
          const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);
          for (const prop in pack.tokenizer) {
            if (!(prop in tokenizer)) {
              throw new Error(`tokenizer '${prop}' does not exist`);
            }
            if (["options", "rules", "lexer"].includes(prop)) {
              continue;
            }
            const tokenizerProp = prop;
            const tokenizerFunc = pack.tokenizer[tokenizerProp];
            const prevTokenizer = tokenizer[tokenizerProp];
            tokenizer[tokenizerProp] = (...args2) => {
              let ret = tokenizerFunc.apply(tokenizer, args2);
              if (ret === false) {
                ret = prevTokenizer.apply(tokenizer, args2);
              }
              return ret;
            };
          }
          opts.tokenizer = tokenizer;
        }
        if (pack.hooks) {
          const hooks = this.defaults.hooks || new _Hooks();
          for (const prop in pack.hooks) {
            if (!(prop in hooks)) {
              throw new Error(`hook '${prop}' does not exist`);
            }
            if (["options", "block"].includes(prop)) {
              continue;
            }
            const hooksProp = prop;
            const hooksFunc = pack.hooks[hooksProp];
            const prevHook = hooks[hooksProp];
            if (_Hooks.passThroughHooks.has(prop)) {
              hooks[hooksProp] = (arg) => {
                if (this.defaults.async) {
                  return Promise.resolve(hooksFunc.call(hooks, arg)).then((ret2) => {
                    return prevHook.call(hooks, ret2);
                  });
                }
                const ret = hooksFunc.call(hooks, arg);
                return prevHook.call(hooks, ret);
              };
            } else {
              hooks[hooksProp] = (...args2) => {
                let ret = hooksFunc.apply(hooks, args2);
                if (ret === false) {
                  ret = prevHook.apply(hooks, args2);
                }
                return ret;
              };
            }
          }
          opts.hooks = hooks;
        }
        if (pack.walkTokens) {
          const walkTokens = this.defaults.walkTokens;
          const packWalktokens = pack.walkTokens;
          opts.walkTokens = function(token) {
            let values = [];
            values.push(packWalktokens.call(this, token));
            if (walkTokens) {
              values = values.concat(walkTokens.call(this, token));
            }
            return values;
          };
        }
        this.defaults = { ...this.defaults, ...opts };
      });
      return this;
    }
    setOptions(opt) {
      this.defaults = { ...this.defaults, ...opt };
      return this;
    }
    lexer(src, options) {
      return _Lexer.lex(src, options ?? this.defaults);
    }
    parser(tokens, options) {
      return _Parser.parse(tokens, options ?? this.defaults);
    }
    parseMarkdown(blockType) {
      const parse = (src, options) => {
        const origOpt = { ...options };
        const opt = { ...this.defaults, ...origOpt };
        const throwError = this.onError(!!opt.silent, !!opt.async);
        if (this.defaults.async === true && origOpt.async === false) {
          return throwError(new Error("marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise."));
        }
        if (typeof src === "undefined" || src === null) {
          return throwError(new Error("marked(): input parameter is undefined or null"));
        }
        if (typeof src !== "string") {
          return throwError(new Error("marked(): input parameter is of type " + Object.prototype.toString.call(src) + ", string expected"));
        }
        if (opt.hooks) {
          opt.hooks.options = opt;
          opt.hooks.block = blockType;
        }
        const lexer = opt.hooks ? opt.hooks.provideLexer() : blockType ? _Lexer.lex : _Lexer.lexInline;
        const parser = opt.hooks ? opt.hooks.provideParser() : blockType ? _Parser.parse : _Parser.parseInline;
        if (opt.async) {
          return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src).then((src2) => lexer(src2, opt)).then((tokens) => opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens).then((tokens) => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens).then((tokens) => parser(tokens, opt)).then((html2) => opt.hooks ? opt.hooks.postprocess(html2) : html2).catch(throwError);
        }
        try {
          if (opt.hooks) {
            src = opt.hooks.preprocess(src);
          }
          let tokens = lexer(src, opt);
          if (opt.hooks) {
            tokens = opt.hooks.processAllTokens(tokens);
          }
          if (opt.walkTokens) {
            this.walkTokens(tokens, opt.walkTokens);
          }
          let html2 = parser(tokens, opt);
          if (opt.hooks) {
            html2 = opt.hooks.postprocess(html2);
          }
          return html2;
        } catch (e) {
          return throwError(e);
        }
      };
      return parse;
    }
    onError(silent, async) {
      return (e) => {
        e.message += "\nPlease report this to https://github.com/markedjs/marked.";
        if (silent) {
          const msg = "<p>An error occurred:</p><pre>" + escape$2(e.message + "", true) + "</pre>";
          if (async) {
            return Promise.resolve(msg);
          }
          return msg;
        }
        if (async) {
          return Promise.reject(e);
        }
        throw e;
      };
    }
  }
  const markedInstance = new Marked();
  function marked(src, opt) {
    return markedInstance.parse(src, opt);
  }
  marked.options = marked.setOptions = function(options) {
    markedInstance.setOptions(options);
    marked.defaults = markedInstance.defaults;
    changeDefaults(marked.defaults);
    return marked;
  };
  marked.getDefaults = _getDefaults;
  marked.defaults = _defaults;
  marked.use = function(...args) {
    markedInstance.use(...args);
    marked.defaults = markedInstance.defaults;
    changeDefaults(marked.defaults);
    return marked;
  };
  marked.walkTokens = function(tokens, callback) {
    return markedInstance.walkTokens(tokens, callback);
  };
  marked.parseInline = markedInstance.parseInline;
  marked.Parser = _Parser;
  marked.parser = _Parser.parse;
  marked.Renderer = _Renderer;
  marked.TextRenderer = _TextRenderer;
  marked.Lexer = _Lexer;
  marked.lexer = _Lexer.lex;
  marked.Tokenizer = _Tokenizer;
  marked.Hooks = _Hooks;
  marked.parse = marked;
  marked.options;
  marked.setOptions;
  marked.use;
  marked.walkTokens;
  marked.parseInline;
  _Parser.parse;
  _Lexer.lex;
  function getChatRoomList() {
    return request({
      url: "/api/ai/rooms",
      method: "GET"
    });
  }
  function doChat(roomId, message) {
    return request({
      url: `/api/ai/${roomId}/chat?message=${message}`,
      method: "GET"
    });
  }
  const _sfc_main$h = /* @__PURE__ */ vue.defineComponent({
    __name: "aiService",
    setup(__props, { expose: __expose }) {
      var _a;
      __expose();
      const toast = useToast();
      const messages2 = vue.ref([]);
      const inputMessage = vue.ref("");
      const isLoading = vue.ref(false);
      const scrollTop = vue.ref(0);
      const showHistoryPopup = vue.ref(false);
      const rooms = vue.ref([]);
      const currentRoomId = vue.ref("");
      const userAvatar = vue.ref((_a = getUserInfo()) == null ? void 0 : _a.imageUrl);
      const inputHeight = vue.ref(0);
      marked.setOptions({
        gfm: true,
        breaks: true,
        mangle: false,
        headerIds: false,
        // 禁用标题ID
        async: false
        // 禁用异步模式
      });
      const formatMarkdown = (content) => {
        if (!content)
          return "";
        try {
          const html2 = marked.parse(content).replace(/<pre><code>/g, '<pre class="pre-block"><code class="code-block">').replace(/<code>/g, '<code class="code-inline">').replace(/<p>/g, '<p class="paragraph">').replace(/<ul>/g, '<ul class="list">').replace(/<ol>/g, '<ol class="list">').replace(/<li>/g, '<li class="list-item">').replace(/<blockquote>/g, '<blockquote class="quote">').replace(/\n/g, "<br>");
          return html2;
        } catch (error) {
          formatAppLog("error", "at pages/aiService/aiService.vue:192", "Markdown解析错误:", error);
          return content;
        }
      };
      const getRooms = async () => {
        try {
          const res = await getChatRoomList();
          if (res.code === 200) {
            rooms.value = res.data;
          }
        } catch (error) {
          toast.error("获取历史记录失败");
        }
      };
      const generateRoomId = () => {
        const timestamp = Math.floor(Date.now() / 1e3);
        const random = Math.floor(Math.random() * 1e4).toString().padStart(4, "0");
        return `${timestamp}${random}`;
      };
      const initRoom = async () => {
        try {
          currentRoomId.value = generateRoomId();
          formatAppLog("log", "at pages/aiService/aiService.vue:222", "新建房间号:", currentRoomId.value);
        } catch (error) {
          toast.error("创建房间失败");
          formatAppLog("error", "at pages/aiService/aiService.vue:225", "创建房间错误:", error);
        }
      };
      const sendMessage = async () => {
        var _a2, _b;
        if (!inputMessage.value || isLoading.value)
          return;
        const userInfo = getUserInfo();
        if (!(userInfo == null ? void 0 : userInfo.id)) {
          toast.error("请先登录");
          return;
        }
        try {
          isLoading.value = true;
          const userMessage = inputMessage.value;
          inputMessage.value = "";
          messages2.value.push({
            content: userMessage,
            isUser: true,
            time: Date.now()
          });
          await scrollToBottom();
          formatAppLog("log", "at pages/aiService/aiService.vue:250", "用户输入消息", userMessage);
          const res = await doChat(currentRoomId.value, userMessage);
          if (res.code === 200) {
            messages2.value.push({
              content: res.data,
              isUser: false,
              time: Date.now()
            });
            await scrollToBottom();
          } else {
            toast.error(res.message || "发送失败");
          }
        } catch (error) {
          formatAppLog("error", "at pages/aiService/aiService.vue:268", "发送消息错误:", error);
          if ((_a2 = error.message) == null ? void 0 : _a2.includes("timeout")) {
            toast.error("响应超时,请重试");
          } else if ((_b = error.message) == null ? void 0 : _b.includes("Network")) {
            toast.error("网络连接失败,请检查网络");
          } else {
            toast.error(error.message || "发送失败,请重试");
          }
        } finally {
          isLoading.value = false;
          await scrollToBottom();
        }
      };
      const showHistory = () => {
        getRooms();
        showHistoryPopup.value = true;
      };
      const switchRoom = (roomId) => {
        currentRoomId.value = roomId;
        showHistoryPopup.value = false;
      };
      const formatTime = (timestamp) => {
        const date = new Date(timestamp);
        return `${date.getHours().toString().padStart(2, "0")}:${date.getMinutes().toString().padStart(2, "0")}`;
      };
      const scrollToBottom = async () => {
        await vue.nextTick();
        const query = uni.createSelectorQuery();
        query.select(".message-list").boundingClientRect();
        query.exec((res) => {
          if (res[0]) {
            scrollTop.value = res[0].height;
          }
        });
      };
      const loadMoreMessages = () => {
      };
      const retryMessage = async (msg) => {
        if (isLoading.value)
          return;
        try {
          isLoading.value = true;
          const userInfo = getUserInfo();
          if (!(userInfo == null ? void 0 : userInfo.id)) {
            toast.error("请先登录");
            return;
          }
          const res = await doChat({
            roomId: currentRoomId.value,
            message: msg.content,
            clientId: userInfo.id
          });
          if (res.code === 200) {
            const index = messages2.value.findIndex((m) => m.time === msg.time);
            if (index !== -1) {
              messages2.value[index].content = res.data;
              messages2.value[index].error = false;
              messages2.value = [...messages2.value];
            }
          } else {
            toast.error(res.message || "重试失败");
          }
        } catch (error) {
          formatAppLog("error", "at pages/aiService/aiService.vue:351", "重试消息错误:", error);
          toast.error("重试失败，请稍后再试");
        } finally {
          isLoading.value = false;
          await scrollToBottom();
        }
      };
      vue.onMounted(() => {
        initRoom();
      });
      const onKeyboardHeightChange = (res) => {
        formatAppLog("log", "at pages/aiService/aiService.vue:364", "res", res);
        const { height, duration } = res;
        if (height) {
          formatAppLog("log", "at pages/aiService/aiService.vue:368", "键盘弹起");
          inputHeight.value = height - 60;
        } else {
          formatAppLog("log", "at pages/aiService/aiService.vue:373", "键盘收回");
          inputHeight.value = 0;
        }
      };
      onLoad(() => {
        uni.onKeyboardHeightChange(onKeyboardHeightChange);
      });
      onUnload(() => {
        uni.offKeyboardHeightChange(onKeyboardHeightChange);
      });
      onShareAppMessage((res) => {
        formatAppLog("log", "at pages/aiService/aiService.vue:388", res);
        return {
          title: "青春共享站",
          path: "/pages/index/index",
          imageUrl: "/static/logo.jpg"
          // 分享图片
        };
      });
      onShareTimeline(() => {
        return {
          title: "青春共享站",
          path: "/pages/index/index",
          imageUrl: "/static/logo.jpg"
          // 分享图片
        };
      });
      const __returned__ = { toast, messages: messages2, inputMessage, isLoading, scrollTop, showHistoryPopup, rooms, currentRoomId, userAvatar, inputHeight, formatMarkdown, getRooms, generateRoomId, initRoom, sendMessage, showHistory, switchRoom, formatTime, scrollToBottom, loadMoreMessages, retryMessage, onKeyboardHeightChange };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$g(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_wd_icon = resolveEasycom(vue.resolveDynamicComponent("wd-icon"), __easycom_0$5);
    const _component_wd_navbar = resolveEasycom(vue.resolveDynamicComponent("wd-navbar"), __easycom_1$3);
    const _component_wd_img = resolveEasycom(vue.resolveDynamicComponent("wd-img"), WdImg);
    const _component_wd_button = resolveEasycom(vue.resolveDynamicComponent("wd-button"), __easycom_3);
    const _component_wd_input = resolveEasycom(vue.resolveDynamicComponent("wd-input"), __easycom_0$2);
    const _component_wd_cell = resolveEasycom(vue.resolveDynamicComponent("wd-cell"), __easycom_5$2);
    const _component_wd_cell_group = resolveEasycom(vue.resolveDynamicComponent("wd-cell-group"), __easycom_6$1);
    const _component_wd_popup = resolveEasycom(vue.resolveDynamicComponent("wd-popup"), wdPopup);
    const _component_wd_toast = resolveEasycom(vue.resolveDynamicComponent("wd-toast"), __easycom_2$2);
    return vue.openBlock(), vue.createElementBlock("view", { class: "aiService-page" }, [
      vue.createCommentVNode(" 顶部导航 "),
      vue.createVNode(_component_wd_navbar, {
        title: "AI小助手",
        fixed: "",
        placeholder: "",
        safeAreaInsetTop: "",
        zIndex: 9999999999
      }, {
        left: vue.withCtx(() => [
          vue.createVNode(_component_wd_icon, {
            name: "history",
            size: "20px",
            onClick: $setup.showHistory,
            class: "history-icon"
          })
        ]),
        _: 1
        /* STABLE */
      }),
      vue.createCommentVNode(" 对话区域 "),
      vue.createElementVNode("scroll-view", {
        class: "chat-container",
        "scroll-y": "",
        "scroll-top": $setup.scrollTop,
        "scroll-with-animation": true,
        onScrolltoupper: $setup.loadMoreMessages
      }, [
        vue.createElementVNode("view", { class: "message-list" }, [
          vue.createCommentVNode(" AI 欢迎语 "),
          $setup.messages.length === 0 ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 0,
            class: "message ai-message"
          }, [
            vue.createElementVNode("view", { class: "avatar" }, [
              vue.createVNode(_component_wd_img, {
                width: "40",
                height: "40",
                round: "",
                src: "/static/tabbar/aiService-selected.png"
              })
            ]),
            vue.createElementVNode("view", { class: "content" }, [
              vue.createElementVNode("view", { class: "bubble" }, " 欢迎使用青春共享站AI助手~(✧∇✧) 我是由西安市雁塔区星河云端软件开发俱乐部公司开发的校园服务助手DeepSeek-R1大模型，无论是学习资料求助还是校园生活疑问，小站都能为您提供解决方案。请问今天有什么需要帮助的吗？ ")
            ])
          ])) : vue.createCommentVNode("v-if", true),
          vue.createCommentVNode(" 消息列表 "),
          (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            null,
            vue.renderList($setup.messages, (msg, index) => {
              return vue.openBlock(), vue.createElementBlock(
                "view",
                {
                  key: index,
                  class: vue.normalizeClass(["message", msg.isUser ? "user-message" : "ai-message"])
                },
                [
                  vue.createElementVNode("view", { class: "avatar" }, [
                    vue.createVNode(_component_wd_img, {
                      width: "40",
                      height: "40",
                      round: "",
                      src: msg.isUser ? $setup.userAvatar : "/static/tabbar/aiService-selected.png"
                    }, null, 8, ["src"])
                  ]),
                  vue.createElementVNode("view", { class: "content" }, [
                    vue.createElementVNode(
                      "view",
                      {
                        class: vue.normalizeClass(["bubble", { "error": msg.error }])
                      },
                      [
                        msg.isUser ? (vue.openBlock(), vue.createElementBlock(
                          "text",
                          { key: 0 },
                          vue.toDisplayString(msg.content),
                          1
                          /* TEXT */
                        )) : (vue.openBlock(), vue.createElementBlock("rich-text", {
                          key: 1,
                          nodes: $setup.formatMarkdown(msg.content),
                          class: "markdown-body"
                        }, null, 8, ["nodes"])),
                        msg.error ? (vue.openBlock(), vue.createElementBlock("view", {
                          key: 2,
                          class: "retry-btn",
                          onClick: ($event) => $setup.retryMessage(msg)
                        }, [
                          vue.createVNode(_component_wd_icon, {
                            name: "refresh",
                            size: "14px"
                          }),
                          vue.createTextVNode(" 重试 ")
                        ], 8, ["onClick"])) : vue.createCommentVNode("v-if", true)
                      ],
                      2
                      /* CLASS */
                    ),
                    vue.createElementVNode(
                      "view",
                      { class: "time" },
                      vue.toDisplayString($setup.formatTime(msg.time)),
                      1
                      /* TEXT */
                    )
                  ])
                ],
                2
                /* CLASS */
              );
            }),
            128
            /* KEYED_FRAGMENT */
          )),
          vue.createCommentVNode(" 加载动画 "),
          $setup.isLoading ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 1,
            class: "ai-message"
          }, [
            vue.createElementVNode("view", { class: "avatar" }, [
              vue.createVNode(_component_wd_img, {
                width: "40",
                height: "40",
                round: "",
                src: "/static/tabbar/aiService-selected.png"
              })
            ]),
            vue.createElementVNode("view", { class: "content" }, [
              vue.createElementVNode("view", { class: "bubble loading" }, [
                vue.createElementVNode("view", { class: "dot" }),
                vue.createElementVNode("view", { class: "dot" }),
                vue.createElementVNode("view", { class: "dot" })
              ])
            ])
          ])) : vue.createCommentVNode("v-if", true)
        ])
      ], 40, ["scroll-top"]),
      vue.createCommentVNode(" 输入区域 "),
      vue.createElementVNode(
        "view",
        {
          class: "input-container",
          style: vue.normalizeStyle({ position: "relative", bottom: $setup.inputHeight + "px" })
        },
        [
          vue.createVNode(_component_wd_input, {
            modelValue: $setup.inputMessage,
            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $setup.inputMessage = $event),
            type: "text",
            placeholder: "请输入您的问题",
            maxlength: 500,
            adjustPosition: false,
            onKeypress: vue.withKeys($setup.sendMessage, ["enter"]),
            disabled: $setup.isLoading
          }, {
            suffix: vue.withCtx(() => [
              vue.createElementVNode("view", { class: "button-group" }, [
                vue.createVNode(_component_wd_button, {
                  size: "small",
                  type: "primary",
                  loading: $setup.isLoading,
                  disabled: !$setup.inputMessage.trim() || $setup.isLoading,
                  onClick: $setup.sendMessage
                }, {
                  default: vue.withCtx(() => [
                    vue.createTextVNode(
                      vue.toDisplayString($setup.isLoading ? "发送中..." : "发送"),
                      1
                      /* TEXT */
                    )
                  ]),
                  _: 1
                  /* STABLE */
                }, 8, ["loading", "disabled"])
              ])
            ]),
            _: 1
            /* STABLE */
          }, 8, ["modelValue", "disabled"])
        ],
        4
        /* STYLE */
      ),
      vue.createCommentVNode(" 历史记录弹窗 "),
      vue.createVNode(_component_wd_popup, {
        modelValue: $setup.showHistoryPopup,
        "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $setup.showHistoryPopup = $event),
        position: "right"
      }, {
        default: vue.withCtx(() => [
          vue.createElementVNode("view", { class: "history-container" }, [
            vue.createElementVNode("view", { class: "history-header" }, [
              vue.createElementVNode("text", null, "历史对话"),
              vue.createVNode(_component_wd_icon, {
                name: "close",
                onClick: _cache[1] || (_cache[1] = ($event) => $setup.showHistoryPopup = false)
              })
            ]),
            vue.createElementVNode("view", { class: "history-list" }, [
              vue.createVNode(_component_wd_cell_group, null, {
                default: vue.withCtx(() => [
                  (vue.openBlock(true), vue.createElementBlock(
                    vue.Fragment,
                    null,
                    vue.renderList($setup.rooms, (room) => {
                      return vue.openBlock(), vue.createBlock(_component_wd_cell, {
                        key: room.id,
                        title: $setup.formatTime(room.createTime),
                        "is-link": "",
                        onClick: ($event) => $setup.switchRoom(room.id)
                      }, null, 8, ["title", "onClick"]);
                    }),
                    128
                    /* KEYED_FRAGMENT */
                  ))
                ]),
                _: 1
                /* STABLE */
              })
            ])
          ])
        ]),
        _: 1
        /* STABLE */
      }, 8, ["modelValue"]),
      vue.createVNode(_component_wd_toast)
    ]);
  }
  const PagesDeepseekDeepseek = /* @__PURE__ */ _export_sfc(_sfc_main$h, [["render", _sfc_render$g], ["__scopeId", "data-v-4b4959fa"], ["__file", "G:/Code/campus/miniProject/pages/aiService/aiService.vue"]]);
  const pickerViewProps = {
    ...baseProps,
    /**
     * 加载状态
     */
    loading: makeBooleanProp(false),
    /**
     * 加载的颜色，只能使用十六进制的色值写法，且不能使用缩写
     */
    loadingColor: makeStringProp("#4D80F0"),
    /**
     * picker内部滚筒高
     */
    columnsHeight: makeNumberProp(217),
    /**
     * 选项对象中，value对应的 key
     */
    valueKey: makeStringProp("value"),
    /**
     * 选项对象中，展示的文本对应的 key
     */
    labelKey: makeStringProp("label"),
    /**
     * 是否在手指松开时立即触发picker-view的 change 事件。若不开启则会在滚动动画结束后触发 change 事件，1.2.25版本起提供，仅微信小程序和支付宝小程序支持。
     */
    immediateChange: makeBooleanProp(false),
    /**
     * 选中项，如果为多列选择器，则其类型应为数组
     */
    modelValue: {
      type: [String, Number, Boolean, Array, Array, Array],
      default: "",
      required: true
    },
    /**
     * 选择器数据，可以为字符串数组，也可以为对象数组，如果为二维数组，则为多列选择器
     */
    columns: makeArrayProp(),
    /**
     * 接收 pickerView 实例、选中项、当前修改列的下标、resolve 作为入参，根据选中项和列下标进行判断，通过 pickerView 实例暴露出来的 setColumnData 方法修改其他列的数据源。
     */
    columnChange: Function
  };
  function formatArray(array, valueKey, labelKey) {
    let tempArray = isArray(array) ? array : [array];
    const firstLevelTypeList = new Set(array.map(getType));
    if (firstLevelTypeList.size !== 1 && firstLevelTypeList.has("object")) {
      throw Error("The columns are correct");
    }
    if (!isArray(array[0])) {
      tempArray = [tempArray];
    }
    const result = tempArray.map((col) => {
      return col.map((row) => {
        if (!isObj(row)) {
          return {
            [valueKey]: row,
            [labelKey]: row
          };
        }
        if (!row.hasOwnProperty(valueKey) && !row.hasOwnProperty(labelKey)) {
          throw Error("Can't find valueKey and labelKey in columns");
        }
        if (!row.hasOwnProperty(labelKey)) {
          row[labelKey] = row[valueKey];
        }
        if (!row.hasOwnProperty(valueKey)) {
          row[valueKey] = row[labelKey];
        }
        return row;
      });
    });
    return result;
  }
  const __default__$2 = {
    name: "wd-picker-view",
    options: {
      virtualHost: true,
      addGlobalClass: true,
      styleIsolation: "shared"
    }
  };
  const _sfc_main$g = /* @__PURE__ */ vue.defineComponent({
    ...__default__$2,
    props: pickerViewProps,
    emits: ["change", "pickstart", "pickend", "update:modelValue"],
    setup(__props, { expose: __expose, emit: __emit }) {
      const props = __props;
      const emit = __emit;
      const formatColumns = vue.ref([]);
      const itemHeight = vue.ref(35);
      const selectedIndex = vue.ref([]);
      vue.watch(
        [() => props.modelValue, () => props.columns],
        (newValue, oldValue) => {
          if (!isEqual(oldValue[1], newValue[1]) && isArray(newValue[1]) && newValue[1].length > 0) {
            formatColumns.value = formatArray(newValue[1], props.valueKey, props.labelKey);
          }
          if (isDef(newValue[0])) {
            selectWithValue(newValue[0]);
          }
        },
        {
          deep: true,
          immediate: true
        }
      );
      const { proxy } = vue.getCurrentInstance();
      function selectWithValue(value) {
        if (formatColumns.value.length === 0)
          return;
        if (value === "" || !isDef(value) || isArray(value) && value.length === 0) {
          value = formatColumns.value.map((col) => {
            return col[0][props.valueKey];
          });
        }
        const valueType = getType(value);
        const type = ["string", "number", "boolean", "array"];
        if (type.indexOf(valueType) === -1)
          formatAppLog("error", "at uni_modules/wot-design-uni/components/wd-picker-view/wd-picker-view.vue:91", `value must be one of ${type.toString()}`);
        value = isArray(value) ? value : [value];
        value = value.slice(0, formatColumns.value.length);
        let selected = deepClone(selectedIndex.value);
        value.forEach((target, col) => {
          let row = formatColumns.value[col].findIndex((row2) => {
            return row2[props.valueKey].toString() === target.toString();
          });
          row = row === -1 ? 0 : row;
          selected = correctSelectedIndex(col, row, selected);
        });
        selectedIndex.value = selected.slice(0, value.length);
      }
      function correctSelected(value) {
        let selected = deepClone(value);
        value.forEach((row, col) => {
          row = range(row, 0, formatColumns.value[col].length - 1);
          selected = correctSelectedIndex(col, row, selected);
        });
        return selected;
      }
      function correctSelectedIndex(columnIndex, rowIndex, selected) {
        const col = formatColumns.value[columnIndex];
        if (!col || !col[rowIndex]) {
          throw Error(`The value to select with Col:${columnIndex} Row:${rowIndex} is incorrect`);
        }
        const select = deepClone(selected);
        select[columnIndex] = rowIndex;
        if (col[rowIndex].disabled) {
          const prev = col.slice(0, rowIndex).reverse().findIndex((s) => !s.disabled);
          const next = col.slice(rowIndex + 1).findIndex((s) => !s.disabled);
          if (prev !== -1) {
            select[columnIndex] = rowIndex - 1 - prev;
          } else if (next !== -1) {
            select[columnIndex] = rowIndex + 1 + next;
          } else if (select[columnIndex] === void 0) {
            select[columnIndex] = 0;
          }
        }
        return select;
      }
      function onChange({ detail: { value } }) {
        value = value.map((v) => {
          return Number(v || 0);
        });
        const index = getChangeDiff(value);
        selectedIndex.value = deepClone(value);
        vue.nextTick(() => {
          selectedIndex.value = correctSelected(value);
          if (props.columnChange) {
            if (props.columnChange.length < 4) {
              props.columnChange(proxy.$.exposed, getSelects(), index || 0, () => {
              });
              handleChange(index || 0);
            } else {
              props.columnChange(proxy.$.exposed, getSelects(), index || 0, () => {
                handleChange(index || 0);
              });
            }
          } else {
            handleChange(index || 0);
          }
        });
      }
      function getChangeColumn(now, origin) {
        if (!now || !origin)
          return -1;
        const index = now.findIndex((row, index2) => row !== origin[index2]);
        return index;
      }
      function getChangeDiff(value) {
        value = value.slice(0, formatColumns.value.length);
        const origin = deepClone(selectedIndex.value);
        let selected = deepClone(selectedIndex.value);
        value.forEach((row, col) => {
          row = range(row, 0, formatColumns.value[col].length - 1);
          if (row === origin[col])
            return;
          selected = correctSelectedIndex(col, row, selected);
        });
        const diffCol = getChangeColumn(selected, origin);
        if (diffCol === -1)
          return;
        const diffRow = selected[diffCol];
        return selected.length === 1 ? diffRow : diffCol;
      }
      function handleChange(index) {
        const value = getValues();
        if (isEqual(value, props.modelValue))
          return;
        emit("update:modelValue", value);
        setTimeout(() => {
          emit("change", {
            picker: proxy.$.exposed,
            value,
            index
          });
        }, 0);
      }
      function getSelects() {
        const selects = selectedIndex.value.map((row, col) => formatColumns.value[col][row]);
        if (selects.length === 1) {
          return selects[0];
        }
        return selects;
      }
      function getValues() {
        const { valueKey } = props;
        const values = selectedIndex.value.map((row, col) => {
          return formatColumns.value[col][row][valueKey];
        });
        if (values.length === 1) {
          return values[0];
        }
        return values;
      }
      function getLabels() {
        const { labelKey } = props;
        return selectedIndex.value.map((row, col) => formatColumns.value[col][row][labelKey]);
      }
      function getColumnIndex(columnIndex) {
        return selectedIndex.value[columnIndex];
      }
      function getColumnData(columnIndex) {
        return formatColumns.value[columnIndex];
      }
      function setColumnData(columnIndex, data, rowIndex = 0) {
        formatColumns.value[columnIndex] = formatArray(data, props.valueKey, props.labelKey).reduce((acc, val) => acc.concat(val), []);
        selectedIndex.value = correctSelectedIndex(columnIndex, rowIndex, selectedIndex.value);
      }
      function getColumnsData() {
        return deepClone(formatColumns.value);
      }
      function getSelectedIndex() {
        return selectedIndex.value;
      }
      function resetColumns(columns) {
        if (isArray(columns) && columns.length) {
          formatColumns.value = formatArray(columns, props.valueKey, props.labelKey);
        }
      }
      function onPickStart() {
        emit("pickstart");
      }
      function onPickEnd() {
        emit("pickend");
      }
      __expose({
        getSelects,
        getValues,
        setColumnData,
        getColumnsData,
        getColumnData,
        getColumnIndex,
        getLabels,
        getSelectedIndex,
        resetColumns
      });
      const __returned__ = { props, emit, formatColumns, itemHeight, selectedIndex, proxy, selectWithValue, correctSelected, correctSelectedIndex, onChange, getChangeColumn, getChangeDiff, handleChange, getSelects, getValues, getLabels, getColumnIndex, getColumnData, setColumnData, getColumnsData, getSelectedIndex, resetColumns, onPickStart, onPickEnd, wdLoading: __easycom_0$3 };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$f(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: vue.normalizeClass(`wd-picker-view ${_ctx.customClass}`),
        style: vue.normalizeStyle(_ctx.customStyle)
      },
      [
        _ctx.loading ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "wd-picker-view__loading"
        }, [
          vue.createVNode($setup["wdLoading"], { color: _ctx.loadingColor }, null, 8, ["color"])
        ])) : vue.createCommentVNode("v-if", true),
        vue.createElementVNode(
          "view",
          {
            style: vue.normalizeStyle(`height: ${_ctx.columnsHeight - 20}px;`)
          },
          [
            vue.createElementVNode("picker-view", {
              "mask-class": "wd-picker-view__mask",
              "indicator-class": "wd-picker-view__roller",
              "indicator-style": `height: ${$setup.itemHeight}px;`,
              style: vue.normalizeStyle(`height: ${_ctx.columnsHeight - 20}px;`),
              value: $setup.selectedIndex,
              "immediate-change": _ctx.immediateChange,
              onChange: $setup.onChange,
              onPickstart: $setup.onPickStart,
              onPickend: $setup.onPickEnd
            }, [
              (vue.openBlock(true), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList($setup.formatColumns, (col, colIndex) => {
                  return vue.openBlock(), vue.createElementBlock("picker-view-column", {
                    key: colIndex,
                    class: "wd-picker-view-column"
                  }, [
                    (vue.openBlock(true), vue.createElementBlock(
                      vue.Fragment,
                      null,
                      vue.renderList(col, (row, rowIndex) => {
                        return vue.openBlock(), vue.createElementBlock(
                          "view",
                          {
                            key: rowIndex,
                            class: vue.normalizeClass(`wd-picker-view-column__item ${row["disabled"] ? "wd-picker-view-column__item--disabled" : ""}  ${$setup.selectedIndex[colIndex] == rowIndex ? "wd-picker-view-column__item--active" : ""}`),
                            style: vue.normalizeStyle(`line-height: ${$setup.itemHeight}px;`)
                          },
                          vue.toDisplayString(row[_ctx.labelKey]),
                          7
                          /* TEXT, CLASS, STYLE */
                        );
                      }),
                      128
                      /* KEYED_FRAGMENT */
                    ))
                  ]);
                }),
                128
                /* KEYED_FRAGMENT */
              ))
            ], 44, ["indicator-style", "value", "immediate-change"])
          ],
          4
          /* STYLE */
        )
      ],
      6
      /* CLASS, STYLE */
    );
  }
  const wdPickerView = /* @__PURE__ */ _export_sfc(_sfc_main$g, [["render", _sfc_render$f], ["__scopeId", "data-v-c3bc94ff"], ["__file", "G:/Code/campus/miniProject/uni_modules/wot-design-uni/components/wd-picker-view/wd-picker-view.vue"]]);
  function getPickerValue(value, type) {
    const values = [];
    const date = new Date(value);
    if (type === "time") {
      const pair = String(value).split(":");
      values.push(parseInt(pair[0]), parseInt(pair[1]));
    } else {
      values.push(date.getFullYear(), date.getMonth() + 1);
      if (type === "date") {
        values.push(date.getDate());
      } else if (type === "datetime") {
        values.push(date.getDate(), date.getHours(), date.getMinutes());
      }
    }
    return values;
  }
  const datetimePickerViewProps = {
    ...baseProps,
    /**
     * 选中项，当 type 为 time 时，类型为字符串，否则为 时间戳
     */
    modelValue: makeRequiredProp([String, Number]),
    /**
     * 加载中
     */
    loading: makeBooleanProp(false),
    /**
     * 加载的颜色，只能使用十六进制的色值写法，且不能使用缩写
     */
    loadingColor: makeStringProp("#4D80F0"),
    /**
     * picker内部滚筒高
     */
    columnsHeight: makeNumberProp(217),
    valueKey: makeStringProp("value"),
    labelKey: makeStringProp("label"),
    /**
     * 选择器类型，可选值：date / year-month / time
     */
    type: makeStringProp("datetime"),
    /**
     * 自定义过滤选项的函数，返回列的选项数组
     */
    filter: Function,
    /**
     * 自定义弹出层选项文案的格式化函数，返回一个字符串
     */
    formatter: Function,
    /**
     * 自定义列的格式化函数
     */
    columnFormatter: Function,
    /**
     * 最小日期
     */
    minDate: makeNumberProp(new Date((/* @__PURE__ */ new Date()).getFullYear() - 10, 0, 1).getTime()),
    /**
     * 最大日期
     */
    maxDate: makeNumberProp(new Date((/* @__PURE__ */ new Date()).getFullYear() + 10, 11, 31).getTime()),
    /**
     * 最小小时，time类型时生效
     */
    minHour: makeNumberProp(0),
    /**
     * 最大小时，time类型时生效
     */
    maxHour: makeNumberProp(23),
    /**
     * 最小分钟，time类型时生效
     */
    minMinute: makeNumberProp(0),
    /**
     * 最大分钟，time类型时生效
     */
    maxMinute: makeNumberProp(59),
    /**
     * 是否在手指松开时立即触发picker-view的 change 事件。若不开启则会在滚动动画结束后触发 change 事件，1.2.25版本起提供，仅微信小程序和支付宝小程序支持。
     */
    immediateChange: makeBooleanProp(false),
    startSymbol: makeBooleanProp(false)
  };
  const __default__$1 = {
    name: "wd-datetime-picker-view",
    virtualHost: true,
    addGlobalClass: true,
    styleIsolation: "shared"
  };
  const _sfc_main$f = /* @__PURE__ */ vue.defineComponent({
    ...__default__$1,
    props: datetimePickerViewProps,
    emits: ["change", "pickstart", "pickend", "update:modelValue"],
    setup(__props, { expose: __expose, emit: __emit }) {
      const isValidDate = (date) => isDef(date) && !Number.isNaN(date);
      const times = (n, iteratee) => {
        let index = -1;
        const length = n < 0 ? 0 : n;
        const result = Array(length);
        while (++index < n) {
          result[index] = iteratee(index);
        }
        return result;
      };
      const getMonthEndDay = (year, month) => {
        return 32 - new Date(year, month - 1, 32).getDate();
      };
      const props = __props;
      const emit = __emit;
      const datePickerview = vue.ref();
      const innerValue = vue.ref(null);
      const columns = vue.ref([]);
      const pickerValue = vue.ref([]);
      const created = vue.ref(false);
      const { proxy } = vue.getCurrentInstance();
      __expose({
        updateColumns,
        setColumns,
        getSelects,
        correctValue,
        getPickerValue,
        getOriginColumns,
        ...props
      });
      const updateValue = debounce(() => {
        if (!created.value)
          return;
        const val = correctValue(props.modelValue);
        const isEqual2 = val === innerValue.value;
        if (!isEqual2) {
          updateColumnValue(val);
        } else {
          columns.value = updateColumns();
        }
      }, 50);
      vue.watch(
        () => props.modelValue,
        (val, oldVal) => {
          if (val === oldVal)
            return;
          const value = correctValue(val);
          updateColumnValue(value);
        },
        { deep: true, immediate: true }
      );
      vue.watch(
        () => props.type,
        (target) => {
          const type = ["date", "year-month", "time", "datetime", "year"];
          if (type.indexOf(target) === -1) {
            formatAppLog("error", "at uni_modules/wot-design-uni/components/wd-datetime-picker-view/wd-datetime-picker-view.vue:126", `type must be one of ${type}`);
          }
          updateValue();
        },
        { deep: true, immediate: true }
      );
      vue.watch(
        () => props.filter,
        (fn) => {
          if (fn && !isFunction(fn)) {
            formatAppLog("error", "at uni_modules/wot-design-uni/components/wd-datetime-picker-view/wd-datetime-picker-view.vue:138", "The type of filter must be Function");
          }
          updateValue();
        },
        { deep: true, immediate: true }
      );
      vue.watch(
        () => props.formatter,
        (fn) => {
          if (fn && !isFunction(fn)) {
            formatAppLog("error", "at uni_modules/wot-design-uni/components/wd-datetime-picker-view/wd-datetime-picker-view.vue:149", "The type of formatter must be Function");
          }
          updateValue();
        },
        { deep: true, immediate: true }
      );
      vue.watch(
        () => props.columnFormatter,
        (fn) => {
          if (fn && !isFunction(fn)) {
            formatAppLog("error", "at uni_modules/wot-design-uni/components/wd-datetime-picker-view/wd-datetime-picker-view.vue:160", "The type of columnFormatter must be Function");
          }
          updateValue();
        },
        { deep: true, immediate: true }
      );
      vue.watch(
        [
          () => props.minDate,
          () => props.maxDate,
          () => props.minHour,
          () => props.maxHour,
          () => props.minMinute,
          () => props.minMinute,
          () => props.maxMinute
        ],
        () => {
          updateValue();
        },
        {
          deep: true,
          immediate: true
        }
      );
      vue.onBeforeMount(() => {
        created.value = true;
        const innerValue2 = correctValue(props.modelValue);
        updateColumnValue(innerValue2);
      });
      function onChange({ value }) {
        pickerValue.value = value;
        const result = updateInnerValue();
        emit("update:modelValue", result);
        emit("change", {
          value: result,
          picker: proxy.$.exposed
        });
      }
      function updateColumns() {
        const { formatter, columnFormatter } = props;
        if (columnFormatter) {
          return columnFormatter(proxy.$.exposed);
        } else {
          return getOriginColumns().map((column) => {
            return column.values.map((value) => {
              return {
                label: formatter ? formatter(column.type, padZero(value)) : padZero(value),
                value
              };
            });
          });
        }
      }
      function setColumns(columnList) {
        columns.value = columnList;
      }
      function getOriginColumns() {
        const { filter } = props;
        return getRanges().map(({ type, range: range2 }) => {
          let values = times(range2[1] - range2[0] + 1, (index) => {
            return range2[0] + index;
          });
          if (filter) {
            values = filter(type, values);
          }
          return {
            type,
            values
          };
        });
      }
      function getRanges() {
        if (props.type === "time") {
          return [
            {
              type: "hour",
              range: [props.minHour, props.maxHour]
            },
            {
              type: "minute",
              range: [props.minMinute, props.maxMinute]
            }
          ];
        }
        const { maxYear, maxDate, maxMonth, maxHour, maxMinute } = getBoundary("max", innerValue.value);
        const { minYear, minDate, minMonth, minHour, minMinute } = getBoundary("min", innerValue.value);
        const result = [
          {
            type: "year",
            range: [minYear, maxYear]
          },
          {
            type: "month",
            range: [minMonth, maxMonth]
          },
          {
            type: "date",
            range: [minDate, maxDate]
          },
          {
            type: "hour",
            range: [minHour, maxHour]
          },
          {
            type: "minute",
            range: [minMinute, maxMinute]
          }
        ];
        if (props.type === "date")
          result.splice(3, 2);
        if (props.type === "year-month")
          result.splice(2, 3);
        if (props.type === "year")
          result.splice(1, 4);
        return result;
      }
      function correctValue(value) {
        const isDateType = props.type !== "time";
        if (isDateType && !isValidDate(value)) {
          value = props.minDate;
        } else if (!isDateType && !value) {
          value = `${padZero(props.minHour)}:00`;
        }
        if (!isDateType) {
          let [hour, minute] = value.split(":");
          hour = padZero(range(Number(hour), props.minHour, props.maxHour));
          minute = padZero(range(Number(minute), props.minMinute, props.maxMinute));
          return `${hour}:${minute}`;
        }
        value = Math.min(Math.max(Number(value), props.minDate), props.maxDate);
        return value;
      }
      function getBoundary(type, innerValue2) {
        const value = new Date(innerValue2);
        const boundary = new Date(props[`${type}Date`]);
        const year = boundary.getFullYear();
        let month = 1;
        let date = 1;
        let hour = 0;
        let minute = 0;
        if (type === "max") {
          month = 12;
          date = getMonthEndDay(value.getFullYear(), value.getMonth() + 1);
          hour = 23;
          minute = 59;
        }
        if (value.getFullYear() === year) {
          month = boundary.getMonth() + 1;
          if (value.getMonth() + 1 === month) {
            date = boundary.getDate();
            if (value.getDate() === date) {
              hour = boundary.getHours();
              if (value.getHours() === hour) {
                minute = boundary.getMinutes();
              }
            }
          }
        }
        return {
          [`${type}Year`]: year,
          [`${type}Month`]: month,
          [`${type}Date`]: date,
          [`${type}Hour`]: hour,
          [`${type}Minute`]: minute
        };
      }
      function updateColumnValue(value) {
        const values = getPickerValue(value, props.type);
        if (props.modelValue !== value) {
          emit("update:modelValue", value);
          emit("change", {
            value,
            picker: proxy.$.exposed
          });
        }
        innerValue.value = value;
        columns.value = updateColumns();
        pickerValue.value = values;
      }
      function updateInnerValue() {
        var _a;
        const { type } = props;
        let innerValue2 = "";
        const pickerVal = ((_a = datePickerview.value) == null ? void 0 : _a.getValues()) || [];
        const values = isArray(pickerVal) ? pickerVal : [pickerVal];
        if (type === "time") {
          innerValue2 = `${padZero(values[0])}:${padZero(values[1])}`;
          return innerValue2;
        }
        const year = values[0] && parseInt(values[0]);
        const month = type === "year" ? 1 : values[1] && parseInt(values[1]);
        const maxDate = getMonthEndDay(Number(year), Number(month));
        let date = 1;
        if (type !== "year-month" && type !== "year") {
          date = (Number(values[2]) && parseInt(String(values[2]))) > maxDate ? maxDate : values[2] && parseInt(String(values[2]));
        }
        let hour = 0;
        let minute = 0;
        if (type === "datetime") {
          hour = Number(values[3]) && parseInt(values[3]);
          minute = Number(values[4]) && parseInt(values[4]);
        }
        const value = new Date(Number(year), Number(month) - 1, Number(date), hour, minute).getTime();
        innerValue2 = correctValue(value);
        return innerValue2;
      }
      function columnChange(picker) {
        if (props.type === "time" || props.type === "year-month" || props.type === "year") {
          return;
        }
        const values = picker.getValues();
        const year = Number(values[0]);
        const month = Number(values[1]);
        const maxDate = getMonthEndDay(year, month);
        let date = Number(values[2]);
        date = date > maxDate ? maxDate : date;
        let hour = 0;
        let minute = 0;
        if (props.type === "datetime") {
          hour = Number(values[3]);
          minute = Number(values[4]);
        }
        const value = new Date(year, month - 1, date, hour, minute).getTime();
        innerValue.value = correctValue(value);
        const newColumns = updateColumns();
        const selectedIndex = picker.getSelectedIndex().slice(0);
        newColumns.forEach((_columns, index) => {
          const nextColumnIndex = index + 1;
          const nextColumnData = newColumns[nextColumnIndex];
          if (nextColumnIndex > newColumns.length - 1)
            return;
          picker.setColumnData(
            nextColumnIndex,
            nextColumnData,
            selectedIndex[nextColumnIndex] <= nextColumnData.length - 1 ? selectedIndex[nextColumnIndex] : 0
          );
        });
      }
      function onPickStart() {
        emit("pickstart");
      }
      function onPickEnd() {
        emit("pickend");
      }
      function getSelects() {
        var _a;
        const pickerVal = (_a = datePickerview.value) == null ? void 0 : _a.getSelects();
        if (pickerVal == null)
          return void 0;
        if (isArray(pickerVal))
          return pickerVal;
        return [pickerVal];
      }
      const __returned__ = { isValidDate, times, getMonthEndDay, props, emit, datePickerview, innerValue, columns, pickerValue, created, proxy, updateValue, onChange, updateColumns, setColumns, getOriginColumns, getRanges, correctValue, getBoundary, updateColumnValue, updateInnerValue, columnChange, onPickStart, onPickEnd, getSelects, wdPickerView };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$e(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", null, [
      vue.createVNode($setup["wdPickerView"], {
        ref: "datePickerview",
        "custom-class": _ctx.customClass,
        "custom-style": _ctx.customStyle,
        "immediate-change": _ctx.immediateChange,
        modelValue: $setup.pickerValue,
        "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $setup.pickerValue = $event),
        columns: $setup.columns,
        "columns-height": _ctx.columnsHeight,
        columnChange: $setup.columnChange,
        loading: _ctx.loading,
        "loading-color": _ctx.loadingColor,
        onChange: $setup.onChange,
        onPickstart: $setup.onPickStart,
        onPickend: $setup.onPickEnd
      }, null, 8, ["custom-class", "custom-style", "immediate-change", "modelValue", "columns", "columns-height", "loading", "loading-color"])
    ]);
  }
  const wdDatetimePickerView = /* @__PURE__ */ _export_sfc(_sfc_main$f, [["render", _sfc_render$e], ["__scopeId", "data-v-db34fecd"], ["__file", "G:/Code/campus/miniProject/uni_modules/wot-design-uni/components/wd-datetime-picker-view/wd-datetime-picker-view.vue"]]);
  const datetimePickerProps = {
    ...baseProps,
    /**
     * 选择器左侧文案，label可以不传
     */
    label: String,
    /**
     * 选择器占位符
     */
    placeholder: String,
    /**
     * 禁用
     */
    disabled: makeBooleanProp(false),
    /**
     * 只读
     */
    readonly: makeBooleanProp(false),
    /**
     * 加载中
     */
    loading: makeBooleanProp(false),
    /**
     * 加载的颜色，只能使用十六进制的色值写法，且不能使用缩写
     */
    loadingColor: makeStringProp("#4D80F0"),
    /**
     * 弹出层标题
     */
    title: String,
    /**
     * 取消按钮文案
     */
    cancelButtonText: String,
    /**
     * 确认按钮文案
     */
    confirmButtonText: String,
    /**
     * 是否必填
     */
    required: makeBooleanProp(false),
    /**
     * 设置选择器大小，可选值：large
     */
    size: String,
    /**
     * 设置左侧标题宽度
     */
    labelWidth: makeStringProp("33%"),
    /**
     * 使用默认插槽
     */
    useDefaultSlot: makeBooleanProp(false),
    /**
     * label 使用插槽
     */
    useLabelSlot: makeBooleanProp(false),
    /**
     * 是否为错误状态，错误状态时右侧内容为红色
     */
    error: makeBooleanProp(false),
    /**
     * 选择器的值靠右展示
     */
    alignRight: makeBooleanProp(false),
    /**
     * 点击遮罩是否关闭
     */
    closeOnClickModal: makeBooleanProp(true),
    /**
     * 弹出面板是否设置底部安全距离（iphone X 类型的机型）
     */
    safeAreaInsetBottom: makeBooleanProp(true),
    /**
     * 是否超出隐藏
     */
    ellipsis: makeBooleanProp(false),
    /**
     * picker内部滚筒高
     */
    columnsHeight: makeNumberProp(217),
    valueKey: makeStringProp("value"),
    labelKey: makeStringProp("label"),
    /**
     * 选中项，当 type 为 time 时，类型为字符串；当 type 为 Array 时，类型为范围选择；否则为 时间戳
     */
    modelValue: makeRequiredProp([String, Number, Array]),
    /**
     * 选择器类型，可选值为：date / year-month / time
     */
    type: makeStringProp("datetime"),
    /**
     * 最小日期
     */
    minDate: makeNumberProp(new Date((/* @__PURE__ */ new Date()).getFullYear() - 10, 0, 1).getTime()),
    /**
     * 最大日期
     */
    maxDate: makeNumberProp(new Date((/* @__PURE__ */ new Date()).getFullYear() + 10, 11, 31, 23, 59, 59).getTime()),
    /**
     * 最小小时，time类型时生效
     */
    minHour: makeNumberProp(0),
    /**
     * 最大小时，time类型时生效
     */
    maxHour: makeNumberProp(23),
    /**
     * 最小分钟，time类型时生效
     */
    minMinute: makeNumberProp(0),
    /**
     * 最大分钟，time类型时生效
     */
    maxMinute: makeNumberProp(59),
    /**
     * 自定义过滤选项的函数，返回列的选项数组
     */
    filter: Function,
    /**
     * 自定义弹出层选项文案的格式化函数，返回一个字符串
     */
    formatter: Function,
    /**
     * 自定义展示文案的格式化函数，返回一个字符串
     */
    displayFormat: Function,
    /**
     * 确定前校验函数，接收 (value, resolve, picker) 参数，通过 resolve 继续执行 picker，resolve 接收1个boolean参数
     */
    beforeConfirm: Function,
    /**
     * 在区域选择模式下，自定义展示tab标签文案的格式化函数，返回一个字符串
     */
    displayFormatTabLabel: Function,
    /**
     * 默认日期，类型保持与 value 一致，打开面板时面板自动选到默认日期
     */
    defaultValue: [String, Number, Array],
    /**
     * 弹窗层级
     */
    zIndex: makeNumberProp(15),
    /**
     * 表单域 model 字段名，在使用表单校验功能的情况下，该属性是必填的
     */
    prop: String,
    /**
     * 表单验证规则，结合wd-form组件使用
     */
    rules: makeArrayProp(),
    /**
     * picker cell 外部自定义样式
     */
    customCellClass: makeStringProp(""),
    /**
     * pickerView 外部自定义样式
     */
    customViewClass: makeStringProp(""),
    /**
     * label 外部自定义样式
     */
    customLabelClass: makeStringProp(""),
    /**
     * value 外部自定义样式
     */
    customValueClass: makeStringProp(""),
    /**
     * 是否在手指松开时立即触发picker-view的 change 事件。若不开启则会在滚动动画结束后触发 change 事件，1.2.25版本起提供，仅微信小程序和支付宝小程序支持。
     */
    immediateChange: makeBooleanProp(false)
  };
  const __default__ = {
    name: "wd-datetime-picker",
    options: {
      virtualHost: true,
      addGlobalClass: true,
      styleIsolation: "shared"
    }
  };
  const _sfc_main$e = /* @__PURE__ */ vue.defineComponent({
    ...__default__,
    props: datetimePickerProps,
    emits: ["change", "open", "toggle", "cancel", "confirm", "update:modelValue"],
    setup(__props, { expose: __expose, emit: __emit }) {
      const props = __props;
      const emit = __emit;
      const { translate } = useTranslate("datetime-picker");
      const datetimePickerView = vue.ref();
      const datetimePickerView1 = vue.ref();
      const showValue = vue.ref("");
      const popupShow = vue.ref(false);
      const showStart = vue.ref(true);
      const region = vue.ref(false);
      const showTabLabel = vue.ref([]);
      const innerValue = vue.ref("");
      const endInnerValue = vue.ref("");
      const isPicking = vue.ref(false);
      const hasConfirmed = vue.ref(false);
      const isLoading = vue.ref(false);
      const { proxy } = vue.getCurrentInstance();
      const cell = useCell();
      vue.watch(
        () => props.modelValue,
        (val, oldVal) => {
          if (isEqual(val, oldVal))
            return;
          if (isArray(val)) {
            region.value = true;
            innerValue.value = deepClone(getDefaultInnerValue(true));
            endInnerValue.value = deepClone(getDefaultInnerValue(true, true));
          } else {
            innerValue.value = deepClone(getDefaultInnerValue());
          }
          vue.nextTick(() => {
            setShowValue(false, false, true);
          });
        },
        {
          deep: true,
          immediate: true
        }
      );
      vue.watch(
        () => props.displayFormat,
        (fn) => {
          if (fn && !isFunction(fn)) {
            formatAppLog("error", "at uni_modules/wot-design-uni/components/wd-datetime-picker/wd-datetime-picker.vue:223", "The type of displayFormat must be Function");
          }
        },
        {
          deep: true,
          immediate: true
        }
      );
      vue.watch(
        () => props.filter,
        (fn) => {
          if (fn && !isFunction(fn)) {
            formatAppLog("error", "at uni_modules/wot-design-uni/components/wd-datetime-picker/wd-datetime-picker.vue:235", "The type of filter must be Function");
          }
        },
        {
          deep: true,
          immediate: true
        }
      );
      vue.watch(
        () => props.formatter,
        (fn) => {
          if (fn && !isFunction(fn)) {
            formatAppLog("error", "at uni_modules/wot-design-uni/components/wd-datetime-picker/wd-datetime-picker.vue:247", "The type of formatter must be Function");
          }
        },
        {
          deep: true,
          immediate: true
        }
      );
      vue.watch(
        () => props.beforeConfirm,
        (fn) => {
          if (fn && !isFunction(fn)) {
            formatAppLog("error", "at uni_modules/wot-design-uni/components/wd-datetime-picker/wd-datetime-picker.vue:259", "The type of beforeConfirm must be Function");
          }
        },
        {
          deep: true,
          immediate: true
        }
      );
      vue.watch(
        () => props.displayFormatTabLabel,
        (fn) => {
          if (fn && !isFunction(fn)) {
            formatAppLog("error", "at uni_modules/wot-design-uni/components/wd-datetime-picker/wd-datetime-picker.vue:271", "The type of displayFormatTabLabel must be Function");
          }
        },
        {
          deep: true,
          immediate: true
        }
      );
      vue.watch(
        () => props.defaultValue,
        (val) => {
          if (isArray(val) || region.value) {
            innerValue.value = deepClone(getDefaultInnerValue(true));
            endInnerValue.value = deepClone(getDefaultInnerValue(true, true));
          } else {
            innerValue.value = deepClone(getDefaultInnerValue());
          }
        },
        {
          deep: true,
          immediate: true
        }
      );
      const { parent: form } = useParent(FORM_KEY);
      const errorMessage = vue.computed(() => {
        if (form && props.prop && form.errorMessages && form.errorMessages[props.prop]) {
          return form.errorMessages[props.prop];
        } else {
          return "";
        }
      });
      const isRequired = vue.computed(() => {
        let formRequired = false;
        if (form && form.props.rules) {
          const rules = form.props.rules;
          for (const key in rules) {
            if (Object.prototype.hasOwnProperty.call(rules, key) && key === props.prop && Array.isArray(rules[key])) {
              formRequired = rules[key].some((rule) => rule.required);
            }
          }
        }
        return props.required || props.rules.some((rule) => rule.required) || formRequired;
      });
      const customColumnFormatter = (picker) => {
        if (!picker) {
          return [];
        }
        const { type } = props;
        const { startSymbol, formatter } = picker;
        const start = picker.correctValue(innerValue.value);
        const end = picker.correctValue(endInnerValue.value);
        const currentValue = startSymbol ? picker.getPickerValue(start, type) : picker.getPickerValue(end, type);
        const boundary = startSymbol ? picker.getPickerValue(end, type) : picker.getPickerValue(start, type);
        const columns = picker.getOriginColumns();
        return columns.map((column, cIndex) => {
          return column.values.map((value) => {
            const disabled = columnDisabledRules(startSymbol, columns, cIndex, value, currentValue, boundary);
            return {
              label: formatter ? formatter(column.type, padZero(value)) : padZero(value),
              value,
              disabled
            };
          });
        });
      };
      vue.onBeforeMount(() => {
        const { modelValue: value } = props;
        if (isArray(value)) {
          region.value = true;
          innerValue.value = deepClone(getDefaultInnerValue(true));
          endInnerValue.value = deepClone(getDefaultInnerValue(true, true));
        } else {
          innerValue.value = deepClone(getDefaultInnerValue());
        }
      });
      vue.onMounted(() => {
        setShowValue(false, false, true);
      });
      function getSelects(picker) {
        let value = picker === "before" ? innerValue.value : endInnerValue.value;
        let selected = [];
        if (value) {
          selected = getPickerValue(value, props.type);
        }
        let selects = selected.map((value2) => {
          return {
            [props.labelKey]: padZero(value2),
            [props.valueKey]: value2
          };
        });
        return selects;
      }
      function noop() {
      }
      function getDefaultInnerValue(isRegion, isEnd) {
        const { modelValue: value, defaultValue, maxDate, minDate, type } = props;
        if (isRegion) {
          const index = isEnd ? 1 : 0;
          const targetValue = isArray(value) ? value[index] : "";
          const targetDefault = isArray(defaultValue) ? defaultValue[index] : "";
          const maxValue = type === "time" ? dayjs(maxDate).format("HH:mm") : maxDate;
          const minValue = type === "time" ? dayjs(minDate).format("HH:mm") : minDate;
          return targetValue || targetDefault || (isEnd ? maxValue : minValue);
        } else {
          return isDef(value || defaultValue) ? value || defaultValue : "";
        }
      }
      function open() {
        showPopup();
      }
      function close() {
        onCancel();
      }
      function showPopup() {
        if (props.disabled || props.readonly)
          return;
        emit("open");
        if (region.value) {
          popupShow.value = true;
          showStart.value = true;
          innerValue.value = deepClone(getDefaultInnerValue(true, false));
          endInnerValue.value = deepClone(getDefaultInnerValue(true, true));
        } else {
          popupShow.value = true;
          innerValue.value = deepClone(getDefaultInnerValue());
        }
        setShowValue(true, false, true);
      }
      function tabChange() {
        showStart.value = !showStart.value;
        const picker = showStart.value ? datetimePickerView.value : datetimePickerView1.value;
        picker.setColumns(picker.updateColumns());
        emit("toggle", showStart.value ? innerValue.value : endInnerValue.value);
      }
      function onChangeStart({ value }) {
        innerValue.value = deepClone(value);
        if (region.value) {
          showTabLabel.value = [setTabLabel(), deepClone(showTabLabel.value[1])];
          emit("change", {
            value: [value, endInnerValue.value]
          });
          datetimePickerView.value && datetimePickerView.value.setColumns(datetimePickerView.value.updateColumns());
          datetimePickerView1.value && datetimePickerView1.value.setColumns(datetimePickerView1.value.updateColumns());
        } else {
          emit("change", {
            value: innerValue.value
          });
        }
      }
      function onChangeEnd({ value }) {
        endInnerValue.value = deepClone(value);
        showTabLabel.value = [deepClone(showTabLabel.value[0]), setTabLabel(1)];
        emit("change", {
          value: [innerValue.value, value]
        });
        datetimePickerView.value && datetimePickerView.value.setColumns(datetimePickerView.value.updateColumns());
        datetimePickerView1.value && datetimePickerView1.value.setColumns(datetimePickerView1.value.updateColumns());
      }
      function onCancel() {
        popupShow.value = false;
        setTimeout(() => {
          if (region.value) {
            innerValue.value = deepClone(getDefaultInnerValue(true));
            endInnerValue.value = deepClone(getDefaultInnerValue(true, true));
          } else {
            innerValue.value = deepClone(getDefaultInnerValue());
          }
        }, 200);
        emit("cancel");
      }
      function onConfirm() {
        if (props.loading || isLoading.value)
          return;
        if (isPicking.value) {
          hasConfirmed.value = true;
          return;
        }
        const { beforeConfirm } = props;
        if (beforeConfirm) {
          beforeConfirm(
            region.value ? [innerValue.value, endInnerValue.value] : innerValue.value,
            (isPass) => {
              isPass && handleConfirm();
            },
            proxy.$.exposed
          );
        } else {
          handleConfirm();
        }
      }
      function onPickStart() {
        isPicking.value = true;
      }
      function onPickEnd() {
        isPicking.value = false;
        setTimeout(() => {
          if (hasConfirmed.value) {
            hasConfirmed.value = false;
            onConfirm();
          }
        }, 50);
      }
      function handleConfirm() {
        if (props.loading || isLoading.value || props.disabled) {
          popupShow.value = false;
          return;
        }
        const value = region.value ? [innerValue.value, endInnerValue.value] : innerValue.value;
        popupShow.value = false;
        emit("update:modelValue", value);
        emit("confirm", {
          value
        });
        setShowValue(false, true);
      }
      function setTabLabel(index = 0) {
        if (region.value) {
          let items = [];
          if (index === 0) {
            items = (datetimePickerView.value ? datetimePickerView.value.getSelects() : void 0) || innerValue.value && getSelects("before");
          } else {
            items = (datetimePickerView1.value ? datetimePickerView1.value.getSelects() : void 0) || endInnerValue.value && getSelects("after");
          }
          return defaultDisplayFormat(items, true);
        } else {
          return "";
        }
      }
      function setShowValue(tab = false, isConfirm = false, beforeMount = false) {
        if (region.value) {
          const items = beforeMount ? innerValue.value && getSelects("before") || [] : datetimePickerView.value && datetimePickerView.value.getSelects && datetimePickerView.value.getSelects() || [];
          const endItems = beforeMount ? endInnerValue.value && getSelects("after") || [] : datetimePickerView1.value && datetimePickerView1.value.getSelects && datetimePickerView1.value.getSelects() || [];
          showValue.value = tab ? showValue.value : [
            props.modelValue[0] || isConfirm ? defaultDisplayFormat(items) : "",
            props.modelValue[1] || isConfirm ? defaultDisplayFormat(endItems) : ""
          ];
          showTabLabel.value = [defaultDisplayFormat(items, true), defaultDisplayFormat(endItems, true)];
        } else {
          const items = beforeMount ? innerValue.value && getSelects("before") || [] : datetimePickerView.value && datetimePickerView.value.getSelects && datetimePickerView.value.getSelects() || [];
          showValue.value = deepClone(props.modelValue || isConfirm ? defaultDisplayFormat(items) : "");
        }
      }
      function defaultDisplayFormat(items, tabLabel = false) {
        if (items.length === 0)
          return "";
        if (tabLabel && props.displayFormatTabLabel) {
          return props.displayFormatTabLabel(items);
        }
        if (props.displayFormat) {
          return props.displayFormat(items);
        }
        if (props.formatter) {
          const typeMaps = {
            year: ["year"],
            datetime: ["year", "month", "date", "hour", "minute"],
            date: ["year", "month", "date"],
            time: ["hour", "minute"],
            "year-month": ["year", "month"]
          };
          return items.map((item, index) => {
            return props.formatter(typeMaps[props.type][index], item.value);
          }).join("");
        }
        switch (props.type) {
          case "year":
            return items[0].label;
          case "date":
            return `${items[0].label}-${items[1].label}-${items[2].label}`;
          case "year-month":
            return `${items[0].label}-${items[1].label}`;
          case "time":
            return `${items[0].label}:${items[1].label}`;
          case "datetime":
            return `${items[0].label}-${items[1].label}-${items[2].label} ${items[3].label}:${items[4].label}`;
        }
      }
      function columnDisabledRules(isStart, columns, cIndex, value, currentValue, boundary) {
        const { type } = props;
        const column = columns[cIndex];
        if (type === "datetime") {
          const year = boundary[0];
          const month = boundary[1];
          const date = boundary[2];
          const hour = boundary[3];
          const minute = boundary[4];
          if (column.type === "year") {
            return isStart ? value > year : value < year;
          }
          if (column.type === "month" && currentValue[0] === year) {
            return isStart ? value > month : value < month;
          }
          if (column.type === "date" && currentValue[0] === year && currentValue[1] === month) {
            return isStart ? value > date : value < date;
          }
          if (column.type === "hour" && currentValue[0] === year && currentValue[1] === month && currentValue[2] === date) {
            return isStart ? value > hour : value < hour;
          }
          if (column.type === "minute" && currentValue[0] === year && currentValue[1] === month && currentValue[2] === date && currentValue[3] === hour) {
            return isStart ? value > minute : value < minute;
          }
        } else if (type === "year-month") {
          const year = boundary[0];
          const month = boundary[1];
          if (column.type === "year") {
            return isStart ? value > year : value < year;
          }
          if (column.type === "month" && currentValue[0] === year) {
            return isStart ? value > month : value < month;
          }
        } else if (type === "year") {
          const year = boundary[0];
          if (column.type === "year") {
            return isStart ? value > year : value < year;
          }
        } else if (type === "date") {
          const year = boundary[0];
          const month = boundary[1];
          const date = boundary[2];
          if (column.type === "year") {
            return isStart ? value > year : value < year;
          }
          if (column.type === "month" && currentValue[0] === year) {
            return isStart ? value > month : value < month;
          }
          if (column.type === "date" && currentValue[0] === year && currentValue[1] === month) {
            return isStart ? value > date : value < date;
          }
        } else if (type === "time") {
          const hour = boundary[0];
          const minute = boundary[1];
          if (column.type === "hour") {
            return isStart ? value > hour : value < hour;
          }
          if (column.type === "minute" && currentValue[0] === hour) {
            return isStart ? value > minute : value < minute;
          }
        }
        return false;
      }
      function setLoading(loading) {
        isLoading.value = loading;
      }
      __expose({
        open,
        close,
        setLoading
      });
      const __returned__ = { props, emit, translate, datetimePickerView, datetimePickerView1, showValue, popupShow, showStart, region, showTabLabel, innerValue, endInnerValue, isPicking, hasConfirmed, isLoading, proxy, cell, form, errorMessage, isRequired, customColumnFormatter, getSelects, noop, getDefaultInnerValue, open, close, showPopup, tabChange, onChangeStart, onChangeEnd, onCancel, onConfirm, onPickStart, onPickEnd, handleConfirm, setTabLabel, setShowValue, defaultDisplayFormat, columnDisabledRules, setLoading, wdPopup, wdDatetimePickerView, get isArray() {
        return isArray;
      } };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$d(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_wd_icon = resolveEasycom(vue.resolveDynamicComponent("wd-icon"), __easycom_0$5);
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: vue.normalizeClass(`wd-picker ${_ctx.disabled ? "is-disabled" : ""} ${_ctx.size ? "is-" + _ctx.size : ""}  ${$setup.cell.border.value ? "is-border" : ""} ${_ctx.alignRight ? "is-align-right" : ""} ${_ctx.error ? "is-error" : ""} ${_ctx.customClass}`),
        style: vue.normalizeStyle(_ctx.customStyle)
      },
      [
        vue.createCommentVNode("文案"),
        vue.createElementVNode("view", {
          class: "wd-picker__field",
          onClick: $setup.showPopup
        }, [
          _ctx.useDefaultSlot ? vue.renderSlot(_ctx.$slots, "default", { key: 0 }, void 0, true) : (vue.openBlock(), vue.createElementBlock(
            "view",
            {
              key: 1,
              class: vue.normalizeClass(["wd-picker__cell", _ctx.customCellClass])
            },
            [
              _ctx.label || _ctx.useLabelSlot ? (vue.openBlock(), vue.createElementBlock(
                "view",
                {
                  key: 0,
                  class: vue.normalizeClass(`wd-picker__label ${_ctx.customLabelClass} ${$setup.isRequired ? "is-required" : ""}`),
                  style: vue.normalizeStyle(_ctx.labelWidth ? "min-width:" + _ctx.labelWidth + ";max-width:" + _ctx.labelWidth + ";" : "")
                },
                [
                  _ctx.label ? (vue.openBlock(), vue.createElementBlock(
                    vue.Fragment,
                    { key: 0 },
                    [
                      vue.createTextVNode(
                        vue.toDisplayString(_ctx.label),
                        1
                        /* TEXT */
                      )
                    ],
                    64
                    /* STABLE_FRAGMENT */
                  )) : vue.renderSlot(_ctx.$slots, "label", { key: 1 }, void 0, true)
                ],
                6
                /* CLASS, STYLE */
              )) : vue.createCommentVNode("v-if", true),
              vue.createElementVNode("view", { class: "wd-picker__body" }, [
                vue.createElementVNode("view", { class: "wd-picker__value-wraper" }, [
                  vue.createElementVNode(
                    "view",
                    {
                      class: vue.normalizeClass(`wd-picker__value ${_ctx.customValueClass}`)
                    },
                    [
                      $setup.region ? (vue.openBlock(), vue.createElementBlock(
                        vue.Fragment,
                        { key: 0 },
                        [
                          $setup.isArray($setup.showValue) ? (vue.openBlock(), vue.createElementBlock("view", { key: 0 }, [
                            vue.createElementVNode(
                              "text",
                              {
                                class: vue.normalizeClass($setup.showValue[0] ? "" : "wd-picker__placeholder")
                              },
                              vue.toDisplayString($setup.showValue[0] ? $setup.showValue[0] : _ctx.placeholder || $setup.translate("placeholder")),
                              3
                              /* TEXT, CLASS */
                            ),
                            vue.createTextVNode(
                              " " + vue.toDisplayString($setup.translate("to")) + " ",
                              1
                              /* TEXT */
                            ),
                            vue.createElementVNode(
                              "text",
                              {
                                class: vue.normalizeClass($setup.showValue[1] ? "" : "wd-picker__placeholder")
                              },
                              vue.toDisplayString($setup.showValue[1] ? $setup.showValue[1] : _ctx.placeholder || $setup.translate("placeholder")),
                              3
                              /* TEXT, CLASS */
                            )
                          ])) : (vue.openBlock(), vue.createElementBlock(
                            "view",
                            {
                              key: 1,
                              class: "wd-picker__placeholder"
                            },
                            vue.toDisplayString(_ctx.placeholder || $setup.translate("placeholder")),
                            1
                            /* TEXT */
                          ))
                        ],
                        64
                        /* STABLE_FRAGMENT */
                      )) : (vue.openBlock(), vue.createElementBlock(
                        "view",
                        {
                          key: 1,
                          class: vue.normalizeClass($setup.showValue ? "" : "wd-picker__placeholder")
                        },
                        vue.toDisplayString($setup.showValue ? $setup.showValue : _ctx.placeholder || $setup.translate("placeholder")),
                        3
                        /* TEXT, CLASS */
                      ))
                    ],
                    2
                    /* CLASS */
                  ),
                  !_ctx.disabled && !_ctx.readonly ? (vue.openBlock(), vue.createBlock(_component_wd_icon, {
                    key: 0,
                    "custom-class": "wd-picker__arrow",
                    name: "arrow-right"
                  })) : vue.createCommentVNode("v-if", true)
                ]),
                $setup.errorMessage ? (vue.openBlock(), vue.createElementBlock(
                  "view",
                  {
                    key: 0,
                    class: "wd-picker__error-message"
                  },
                  vue.toDisplayString($setup.errorMessage),
                  1
                  /* TEXT */
                )) : vue.createCommentVNode("v-if", true)
              ])
            ],
            2
            /* CLASS */
          ))
        ]),
        vue.createCommentVNode("弹出层，picker-view 在隐藏时修改值，会触发多次change事件，从而导致所有列选中第一项，因此picker在关闭时不隐藏 "),
        vue.createVNode($setup["wdPopup"], {
          modelValue: $setup.popupShow,
          "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $setup.popupShow = $event),
          position: "bottom",
          "hide-when-close": false,
          "close-on-click-modal": _ctx.closeOnClickModal,
          "safe-area-inset-bottom": _ctx.safeAreaInsetBottom,
          "z-index": _ctx.zIndex,
          onClose: $setup.onCancel,
          "custom-class": "wd-picker__popup"
        }, {
          default: vue.withCtx(() => [
            vue.createElementVNode("view", { class: "wd-picker__wraper" }, [
              vue.createCommentVNode("toolBar"),
              vue.createElementVNode(
                "view",
                {
                  class: "wd-picker__toolbar",
                  onTouchmove: $setup.noop
                },
                [
                  vue.createCommentVNode("取消按钮"),
                  vue.createElementVNode(
                    "view",
                    {
                      class: "wd-picker__action wd-picker__action--cancel",
                      onClick: $setup.onCancel
                    },
                    vue.toDisplayString(_ctx.cancelButtonText || $setup.translate("cancel")),
                    1
                    /* TEXT */
                  ),
                  vue.createCommentVNode("标题"),
                  _ctx.title ? (vue.openBlock(), vue.createElementBlock(
                    "view",
                    {
                      key: 0,
                      class: "wd-picker__title"
                    },
                    vue.toDisplayString(_ctx.title),
                    1
                    /* TEXT */
                  )) : vue.createCommentVNode("v-if", true),
                  vue.createCommentVNode("确定按钮"),
                  vue.createElementVNode(
                    "view",
                    {
                      class: vue.normalizeClass(`wd-picker__action ${_ctx.loading || $setup.isLoading ? "is-loading" : ""}`),
                      onClick: $setup.onConfirm
                    },
                    vue.toDisplayString(_ctx.confirmButtonText || $setup.translate("confirm")),
                    3
                    /* TEXT, CLASS */
                  )
                ],
                32
                /* NEED_HYDRATION */
              ),
              vue.createCommentVNode(" 区域选择tab展示 "),
              $setup.region ? (vue.openBlock(), vue.createElementBlock("view", {
                key: 0,
                class: "wd-picker__region-tabs"
              }, [
                vue.createElementVNode(
                  "view",
                  {
                    class: vue.normalizeClass(`wd-picker__region ${$setup.showStart ? "is-active" : ""} `),
                    onClick: $setup.tabChange
                  },
                  [
                    vue.createElementVNode(
                      "view",
                      null,
                      vue.toDisplayString($setup.translate("start")),
                      1
                      /* TEXT */
                    ),
                    vue.createElementVNode(
                      "view",
                      { class: "wd-picker__region-time" },
                      vue.toDisplayString($setup.showTabLabel[0]),
                      1
                      /* TEXT */
                    )
                  ],
                  2
                  /* CLASS */
                ),
                vue.createElementVNode(
                  "view",
                  {
                    class: vue.normalizeClass(`wd-picker__region ${$setup.showStart ? "" : "is-active"}`),
                    onClick: $setup.tabChange
                  },
                  [
                    vue.createElementVNode(
                      "view",
                      null,
                      vue.toDisplayString($setup.translate("end")),
                      1
                      /* TEXT */
                    ),
                    vue.createElementVNode(
                      "view",
                      { class: "wd-picker__region-time" },
                      vue.toDisplayString($setup.showTabLabel[1]),
                      1
                      /* TEXT */
                    )
                  ],
                  2
                  /* CLASS */
                )
              ])) : vue.createCommentVNode("v-if", true),
              vue.createCommentVNode("datetimePickerView"),
              vue.createElementVNode(
                "view",
                {
                  class: vue.normalizeClass($setup.showStart ? "wd-picker__show" : "wd-picker__hidden")
                },
                [
                  vue.createVNode($setup["wdDatetimePickerView"], {
                    "custom-class": _ctx.customViewClass,
                    ref: "datetimePickerView",
                    type: _ctx.type,
                    modelValue: $setup.innerValue,
                    "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $setup.innerValue = $event),
                    loading: _ctx.loading || $setup.isLoading,
                    "loading-color": _ctx.loadingColor,
                    "columns-height": _ctx.columnsHeight,
                    "value-key": _ctx.valueKey,
                    "label-key": _ctx.labelKey,
                    formatter: _ctx.formatter,
                    filter: _ctx.filter,
                    "column-formatter": $setup.isArray(_ctx.modelValue) ? $setup.customColumnFormatter : void 0,
                    "max-hour": _ctx.maxHour,
                    "min-hour": _ctx.minHour,
                    "max-date": _ctx.maxDate,
                    "min-date": _ctx.minDate,
                    "max-minute": _ctx.maxMinute,
                    "min-minute": _ctx.minMinute,
                    "start-symbol": true,
                    "immediate-change": _ctx.immediateChange,
                    onChange: $setup.onChangeStart,
                    onPickstart: $setup.onPickStart,
                    onPickend: $setup.onPickEnd
                  }, null, 8, ["custom-class", "type", "modelValue", "loading", "loading-color", "columns-height", "value-key", "label-key", "formatter", "filter", "column-formatter", "max-hour", "min-hour", "max-date", "min-date", "max-minute", "min-minute", "immediate-change"])
                ],
                2
                /* CLASS */
              ),
              vue.createElementVNode(
                "view",
                {
                  class: vue.normalizeClass($setup.showStart ? "wd-picker__hidden" : "wd-picker__show")
                },
                [
                  vue.createVNode($setup["wdDatetimePickerView"], {
                    "custom-class": _ctx.customViewClass,
                    ref: "datetimePickerView1",
                    type: _ctx.type,
                    modelValue: $setup.endInnerValue,
                    "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $setup.endInnerValue = $event),
                    loading: _ctx.loading || $setup.isLoading,
                    "loading-color": _ctx.loadingColor,
                    "columns-height": _ctx.columnsHeight,
                    "value-key": _ctx.valueKey,
                    "label-key": _ctx.labelKey,
                    formatter: _ctx.formatter,
                    filter: _ctx.filter,
                    "column-formatter": $setup.isArray(_ctx.modelValue) ? $setup.customColumnFormatter : void 0,
                    "max-hour": _ctx.maxHour,
                    "min-hour": _ctx.minHour,
                    "max-date": _ctx.maxDate,
                    "min-date": _ctx.minDate,
                    "max-minute": _ctx.maxMinute,
                    "min-minute": _ctx.minMinute,
                    "start-symbol": false,
                    "immediate-change": _ctx.immediateChange,
                    onChange: $setup.onChangeEnd,
                    onPickstart: $setup.onPickStart,
                    onPickend: $setup.onPickEnd
                  }, null, 8, ["custom-class", "type", "modelValue", "loading", "loading-color", "columns-height", "value-key", "label-key", "formatter", "filter", "column-formatter", "max-hour", "min-hour", "max-date", "min-date", "max-minute", "min-minute", "immediate-change"])
                ],
                2
                /* CLASS */
              )
            ])
          ]),
          _: 1
          /* STABLE */
        }, 8, ["modelValue", "close-on-click-modal", "safe-area-inset-bottom", "z-index"])
      ],
      6
      /* CLASS, STYLE */
    );
  }
  const __easycom_1 = /* @__PURE__ */ _export_sfc(_sfc_main$e, [["render", _sfc_render$d], ["__scopeId", "data-v-2a8ca3bd"], ["__file", "G:/Code/campus/miniProject/uni_modules/wot-design-uni/components/wd-datetime-picker/wd-datetime-picker.vue"]]);
  const _sfc_main$d = /* @__PURE__ */ vue.defineComponent({
    __name: "lostFoundPublish",
    setup(__props, { expose: __expose }) {
      __expose();
      const toast = useToast();
      const fileList = vue.ref();
      const dateValue = vue.ref(Date.now());
      const handleSubmit = () => {
        lostFoundPublishParams.value.eventTime = dayjs(dateValue.value).format("YYYY-MM-DD HH:mm:ss");
        formatAppLog("log", "at pages/lostFoundPublish/lostFoundPublish.vue:118", lostFoundPublishParams.value);
        toast.show("该功能暂未完成~");
      };
      const categoryTags = vue.ref([
        "手机数码",
        "证件卡片",
        "钱包",
        "钥匙",
        "包包",
        "衣物",
        "首饰配件",
        "图书资料",
        "生活用品",
        "其他"
      ]);
      const lostFoundPublishParams = vue.ref({
        category: "",
        description: "",
        eventTime: "",
        itemType: 1,
        // 1-丢失 2-招领
        location: "",
        currentLocation: "",
        title: "",
        urlList: [],
        userId: 0
      });
      const handleChange = (file) => {
        formatAppLog("log", "at pages/lostFoundPublish/lostFoundPublish.vue:151", "files:", file);
        formatAppLog("log", "at pages/lostFoundPublish/lostFoundPublish.vue:152", fileList.value);
        fileList.value = file;
      };
      const beforeImageRemove = (res) => {
        const url2 = lostFoundPublishParams.value.urlList[res.index];
        formatAppLog("log", "at pages/lostFoundPublish/lostFoundPublish.vue:159", "删除前置处理", url2);
        deleteFile(url2).then((response) => {
          if (response.code === 200) {
            formatAppLog("log", "at pages/lostFoundPublish/lostFoundPublish.vue:162", "删除成功", response);
            fileList.value.splice(res.index, 1);
            lostFoundPublishParams.value.urlList.splice(res.index, 1);
            formatAppLog("log", "at pages/lostFoundPublish/lostFoundPublish.vue:166", "publishArticleParams>>>", lostFoundPublishParams);
          } else {
            formatAppLog("log", "at pages/lostFoundPublish/lostFoundPublish.vue:168", "删除失败", response);
          }
        });
      };
      const uploadSuccess = (res) => {
        formatAppLog("log", "at pages/lostFoundPublish/lostFoundPublish.vue:175", "上传成功res", res.file.response);
        const result = JSON.parse(res.file.response);
        formatAppLog("log", "at pages/lostFoundPublish/lostFoundPublish.vue:177", "上传成功result.data", result.data);
        lostFoundPublishParams.value.urlList.push(...result.data);
        formatAppLog("log", "at pages/lostFoundPublish/lostFoundPublish.vue:180", lostFoundPublishParams.value);
      };
      const handleTagSelect = (tag2) => {
        lostFoundPublishParams.value.category = tag2;
      };
      const validateForm = () => {
        var _a, _b, _c, _d, _e;
        const params = lostFoundPublishParams.value;
        if (!((_a = params.title) == null ? void 0 : _a.trim())) {
          toast.show("请输入标题");
          return false;
        }
        if (!((_b = params.description) == null ? void 0 : _b.trim())) {
          toast.show("请输入描述");
          return false;
        }
        if (!((_c = params.location) == null ? void 0 : _c.trim())) {
          toast.show("请输入丢失/拾获地点");
          return false;
        }
        if (!dateValue) {
          toast.show("请选择时间");
          return false;
        }
        if (!((_d = params.category) == null ? void 0 : _d.trim())) {
          toast.show("请选择物品类型");
          return false;
        }
        if (params.itemType === 2 && !((_e = params.currentLocation) == null ? void 0 : _e.trim())) {
          toast.show("请输入当前物品位置");
          return false;
        }
        return true;
      };
      const handlePublish = async () => {
        if (!validateForm()) {
          return;
        }
        lostFoundPublishParams.value.eventTime = dayjs(dateValue.value).format("YYYY-MM-DD HH:mm:ss");
        uni.showLoading({
          title: "发布中",
          mask: true
        });
        try {
          const res = await addItems(lostFoundPublishParams.value);
          if (res.code === 200) {
            toast.show({
              msg: "发布成功",
              cover: true
            });
            const pages = getCurrentPages();
            const prevPage = pages[pages.length - 2];
            setTimeout(() => {
              if (prevPage && prevPage.route === "pages/lostFound/lostFound") {
                if (typeof prevPage.$vm.setNeedRefresh === "function") {
                  formatAppLog("log", "at pages/lostFoundPublish/lostFoundPublish.vue:258", "调用刷新方法");
                  prevPage.$vm.setNeedRefresh();
                } else {
                  formatAppLog("error", "at pages/lostFoundPublish/lostFoundPublish.vue:261", "setNeedRefresh 方法未找到");
                }
              }
              uni.navigateBack({
                delta: 1
              });
            }, 1500);
          } else {
            toast.error(res.message);
          }
        } catch (error) {
          formatAppLog("error", "at pages/lostFoundPublish/lostFoundPublish.vue:274", "发布失败:", error);
          toast.error("发布失败，请重试");
        } finally {
          uni.hideLoading();
        }
      };
      const handleTypeChange = (type) => {
        lostFoundPublishParams.value.itemType = type;
        if (type === 1) {
          lostFoundPublishParams.value.currentLocation = "";
        }
      };
      onLoad((options) => {
        const loginUser = getUserInfo();
        lostFoundPublishParams.value.userId = loginUser == null ? void 0 : loginUser.id;
        if (options && options.type) {
          const type = parseInt(options.type);
          formatAppLog("log", "at pages/lostFoundPublish/lostFoundPublish.vue:297", "type>>", type);
          lostFoundPublishParams.value.itemType = type;
          if (type === 2) {
            lostFoundPublishParams.value.currentLocation = "";
          }
        }
      });
      onShareAppMessage((res) => {
        formatAppLog("log", "at pages/lostFoundPublish/lostFoundPublish.vue:309", res);
        return {
          title: "青春共享站",
          path: "/pages/index/index",
          imageUrl: "/static/logo.jpg"
          // 分享图片
        };
      });
      onShareTimeline(() => {
        return {
          title: "青春共享站",
          path: "/pages/index/index",
          imageUrl: "/static/logo.jpg"
          // 分享图片
        };
      });
      const __returned__ = { toast, fileList, dateValue, handleSubmit, categoryTags, lostFoundPublishParams, handleChange, beforeImageRemove, uploadSuccess, handleTagSelect, validateForm, handlePublish, handleTypeChange };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$c(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_wd_input = resolveEasycom(vue.resolveDynamicComponent("wd-input"), __easycom_0$2);
    const _component_wd_datetime_picker = resolveEasycom(vue.resolveDynamicComponent("wd-datetime-picker"), __easycom_1);
    const _component_wd_tag = resolveEasycom(vue.resolveDynamicComponent("wd-tag"), __easycom_2$1);
    const _component_wd_upload = resolveEasycom(vue.resolveDynamicComponent("wd-upload"), __easycom_4);
    const _component_wd_button = resolveEasycom(vue.resolveDynamicComponent("wd-button"), __easycom_3);
    const _component_wd_toast = resolveEasycom(vue.resolveDynamicComponent("wd-toast"), __easycom_2$2);
    return vue.openBlock(), vue.createElementBlock("view", { class: "lostFoundPublish" }, [
      vue.createCommentVNode(" 发布类型选择 "),
      vue.createElementVNode("view", { class: "type-selector card-style" }, [
        vue.createElementVNode(
          "view",
          {
            class: vue.normalizeClass(["type-btn", { active: $setup.lostFoundPublishParams.itemType === 1 }]),
            onClick: _cache[0] || (_cache[0] = ($event) => {
              $setup.handleTypeChange(1);
              $setup.lostFoundPublishParams.currentLocation = "";
            })
          },
          " 我丢失了 ",
          2
          /* CLASS */
        ),
        vue.createElementVNode(
          "view",
          {
            class: vue.normalizeClass(["type-btn", { active: $setup.lostFoundPublishParams.itemType === 2 }]),
            onClick: _cache[1] || (_cache[1] = ($event) => $setup.handleTypeChange(2))
          },
          " 我捡到了 ",
          2
          /* CLASS */
        )
      ]),
      vue.createCommentVNode(" 基本信息区块 "),
      vue.createElementVNode("view", { class: "easyInfo card-style" }, [
        vue.createElementVNode("view", { class: "info-item" }, [
          vue.createElementVNode("text", { class: "item-label" }, "标题"),
          vue.createVNode(_component_wd_input, {
            placeholder: "请输入标题",
            modelValue: $setup.lostFoundPublishParams.title,
            "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $setup.lostFoundPublishParams.title = $event),
            clearable: "",
            maxlength: 20,
            "show-word-limit": ""
          }, null, 8, ["modelValue"])
        ]),
        vue.createCommentVNode('<view class="info-item">'),
        vue.createCommentVNode('  <text class="item-label">物品名称</text>'),
        vue.createCommentVNode('  <wd-input placeholder="请输入物品名称" clearable :maxlength="20" show-word-limit />'),
        vue.createCommentVNode("</view>"),
        vue.createElementVNode("view", { class: "info-item" }, [
          vue.createElementVNode("text", { class: "item-label" }, "发现时间"),
          vue.createVNode(_component_wd_datetime_picker, {
            label: "",
            modelValue: $setup.dateValue,
            "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $setup.dateValue = $event)
          }, null, 8, ["modelValue"])
        ]),
        vue.createElementVNode("view", { class: "info-item" }, [
          vue.createElementVNode("text", { class: "item-label" }, "掉落/遗失地点"),
          vue.createVNode(_component_wd_input, {
            placeholder: "请输入掉落地点",
            modelValue: $setup.lostFoundPublishParams.location,
            "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => $setup.lostFoundPublishParams.location = $event),
            clearable: ""
          }, null, 8, ["modelValue"])
        ]),
        vue.createElementVNode("view", { class: "info-item" }, [
          vue.createElementVNode("text", { class: "item-label" }, "描述信息"),
          vue.createVNode(_component_wd_input, {
            placeholder: "请输入物品描述",
            modelValue: $setup.lostFoundPublishParams.description,
            "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => $setup.lostFoundPublishParams.description = $event),
            type: "textarea",
            rows: 3
          }, null, 8, ["modelValue"])
        ]),
        vue.createCommentVNode('<view class="info-item">'),
        vue.createCommentVNode('  <text class="item-label">物品标签</text>'),
        vue.createCommentVNode('  <view class="label-container">'),
        vue.createCommentVNode('    <wd-tag v-for="tag in tags" :key="tag" round color="#fff" bg-color="#007AFF" class="tag-item">'),
        vue.createCommentVNode("      {{ tag }}"),
        vue.createCommentVNode("    </wd-tag>"),
        vue.createCommentVNode("  </view>"),
        vue.createCommentVNode("</view>"),
        vue.createCommentVNode(" 标签选择区域 "),
        vue.createElementVNode("view", { class: "info-item" }, [
          vue.createElementVNode("text", { class: "item-label" }, "物品类型"),
          vue.createElementVNode("view", { class: "label-container" }, [
            (vue.openBlock(true), vue.createElementBlock(
              vue.Fragment,
              null,
              vue.renderList($setup.categoryTags, (tag2) => {
                return vue.openBlock(), vue.createBlock(_component_wd_tag, {
                  key: tag2,
                  type: $setup.lostFoundPublishParams.category === tag2 ? "primary" : "default",
                  round: "",
                  onClick: ($event) => $setup.handleTagSelect(tag2)
                }, {
                  default: vue.withCtx(() => [
                    vue.createTextVNode(
                      vue.toDisplayString(tag2),
                      1
                      /* TEXT */
                    )
                  ]),
                  _: 2
                  /* DYNAMIC */
                }, 1032, ["type", "onClick"]);
              }),
              128
              /* KEYED_FRAGMENT */
            ))
          ])
        ])
      ]),
      vue.createCommentVNode(" 地址信息区块 "),
      $setup.lostFoundPublishParams.itemType == 2 ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 0,
        class: "addressInfo card-style"
      }, [
        vue.createElementVNode("text", { class: "section-title" }, "当前物品所在地"),
        vue.createVNode(_component_wd_input, {
          placeholder: "请输入物品当前所在地",
          modelValue: $setup.lostFoundPublishParams.currentLocation,
          "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => $setup.lostFoundPublishParams.currentLocation = $event),
          clearable: ""
        }, null, 8, ["modelValue"])
      ])) : vue.createCommentVNode("v-if", true),
      vue.createCommentVNode(" 上传区块 "),
      vue.createElementVNode("view", { class: "upload-section card-style" }, [
        vue.createElementVNode("text", { class: "section-title" }, "上传图片（最多6张）"),
        vue.createVNode(_component_wd_upload, {
          "file-list": $setup.fileList,
          "onUpdate:fileList": _cache[7] || (_cache[7] = ($event) => $setup.fileList = $event),
          ref: "uploadFile",
          limit: 6,
          multiple: "",
          accept: "image",
          action: "https://campus.fybreeze.cn/api/article/uploadImages",
          onChange: $setup.handleChange,
          "before-remove": $setup.beforeImageRemove,
          onSuccess: $setup.uploadSuccess
        }, null, 8, ["file-list"])
      ]),
      vue.createCommentVNode(" 操作按钮 "),
      vue.createElementVNode("view", { class: "action-bar" }, [
        vue.createVNode(_component_wd_button, {
          type: "primary",
          block: "",
          onClick: $setup.handlePublish
        }, {
          default: vue.withCtx(() => [
            vue.createTextVNode("立即发布")
          ]),
          _: 1
          /* STABLE */
        })
      ]),
      vue.createVNode(_component_wd_toast)
    ]);
  }
  const PagesLostFoundPublishLostFoundPublish = /* @__PURE__ */ _export_sfc(_sfc_main$d, [["render", _sfc_render$c], ["__scopeId", "data-v-543fff71"], ["__file", "G:/Code/campus/miniProject/pages/lostFoundPublish/lostFoundPublish.vue"]]);
  const _sfc_main$c = /* @__PURE__ */ vue.defineComponent({
    __name: "lostFoundDetail",
    setup(__props, { expose: __expose }) {
      __expose();
      const show = vue.ref(false);
      const value = vue.ref("");
      const toast = useToast();
      const itemsDetail = vue.ref({});
      const fileList = vue.ref([]);
      const paramsMatch = vue.ref({
        urlList: [],
        userId: 0,
        description: "",
        foundItemId: 0
      });
      const handleChange = (file) => {
        formatAppLog("log", "at pages/lostFoundDetail/lostFoundDetail.vue:128", "files:", file);
        formatAppLog("log", "at pages/lostFoundDetail/lostFoundDetail.vue:129", fileList.value);
        fileList.value = file;
      };
      const beforeImageRemove = (res) => {
        const url2 = paramsMatch.value.urlList[res.index];
        formatAppLog("log", "at pages/lostFoundDetail/lostFoundDetail.vue:137", "删除前置处理", url2);
        deleteFile(url2).then((response) => {
          if (response.code === 200) {
            formatAppLog("log", "at pages/lostFoundDetail/lostFoundDetail.vue:140", "删除成功", response);
            fileList.value.splice(res.index, 1);
            paramsMatch.value.urlList.splice(res.index, 1);
            formatAppLog("log", "at pages/lostFoundDetail/lostFoundDetail.vue:144", "paramsMatch>>>", paramsMatch);
          } else {
            formatAppLog("log", "at pages/lostFoundDetail/lostFoundDetail.vue:146", "删除失败", response);
          }
        });
      };
      const uploadSuccess = (res) => {
        formatAppLog("log", "at pages/lostFoundDetail/lostFoundDetail.vue:153", "上传成功res", res.file.response);
        const result = JSON.parse(res.file.response);
        formatAppLog("log", "at pages/lostFoundDetail/lostFoundDetail.vue:155", "上传成功result.data", result.data);
        paramsMatch.value.urlList.push(...result.data);
        formatAppLog("log", "at pages/lostFoundDetail/lostFoundDetail.vue:158", paramsMatch.value);
      };
      const handleSubmit = async () => {
        formatAppLog("log", "at pages/lostFoundDetail/lostFoundDetail.vue:163", paramsMatch.value);
        const res = await addMatchRecords(paramsMatch.value);
        if (res.code === 200) {
          formatAppLog("log", "at pages/lostFoundDetail/lostFoundDetail.vue:166", res);
          toast.success({
            msg: "等待对方审核~",
            zIndex: 1e3,
            cover: true
          });
          setTimeout(() => {
            uni.navigateBack();
          }, 1e3);
        } else {
          toast.error({
            msg: res.message,
            zIndex: 1e3,
            cover: true
          });
        }
      };
      function handleClick(e) {
      }
      function onChange(e) {
      }
      const getLostFoundDetail = async (id) => {
        formatAppLog("log", "at pages/lostFoundDetail/lostFoundDetail.vue:188", id);
        const res = await getItemsById(id);
        if (res.code === 200) {
          formatAppLog("log", "at pages/lostFoundDetail/lostFoundDetail.vue:191", res.data);
          itemsDetail.value = res.data;
        } else {
          formatAppLog("log", "at pages/lostFoundDetail/lostFoundDetail.vue:194", res.message);
        }
      };
      onLoad((options) => {
        formatAppLog("log", "at pages/lostFoundDetail/lostFoundDetail.vue:198", options);
        getLostFoundDetail(options.id);
        paramsMatch.value.foundItemId = options.id;
        paramsMatch.value.userId = getUserInfo().id;
      });
      onShareAppMessage((res) => {
        formatAppLog("log", "at pages/lostFoundDetail/lostFoundDetail.vue:206", res);
        return {
          title: "青春共享站",
          path: "/pages/index/index",
          imageUrl: "/static/logo.jpg"
          // 分享图片
        };
      });
      onShareTimeline(() => {
        return {
          title: "青春共享站",
          path: "/pages/index/index",
          imageUrl: "/static/logo.jpg"
          // 分享图片
        };
      });
      const __returned__ = { show, value, toast, itemsDetail, fileList, paramsMatch, handleChange, beforeImageRemove, uploadSuccess, handleSubmit, handleClick, onChange, getLostFoundDetail };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$b(_ctx, _cache, $props, $setup, $data, $options) {
    var _a, _b, _c, _d, _e, _f;
    const _component_wd_icon = resolveEasycom(vue.resolveDynamicComponent("wd-icon"), __easycom_0$5);
    const _component_wd_swiper = resolveEasycom(vue.resolveDynamicComponent("wd-swiper"), __easycom_1$2);
    const _component_wd_img = resolveEasycom(vue.resolveDynamicComponent("wd-img"), WdImg);
    const _component_wd_button = resolveEasycom(vue.resolveDynamicComponent("wd-button"), __easycom_3);
    const _component_wd_upload = resolveEasycom(vue.resolveDynamicComponent("wd-upload"), __easycom_4);
    const _component_wd_textarea = resolveEasycom(vue.resolveDynamicComponent("wd-textarea"), __easycom_5$1);
    const _component_wd_overlay = resolveEasycom(vue.resolveDynamicComponent("wd-overlay"), __easycom_6$2);
    const _component_wd_toast = resolveEasycom(vue.resolveDynamicComponent("wd-toast"), __easycom_2$2);
    return vue.openBlock(), vue.createElementBlock("view", { class: "layout" }, [
      vue.createElementVNode("view", { class: "Thing-info card-style" }, [
        vue.createElementVNode("view", { class: "title" }, [
          vue.createElementVNode(
            "view",
            { class: "title-text" },
            vue.toDisplayString($setup.itemsDetail.title),
            1
            /* TEXT */
          ),
          vue.createElementVNode(
            "view",
            { class: "time" },
            vue.toDisplayString($setup.itemsDetail.eventTime),
            1
            /* TEXT */
          )
        ]),
        vue.createCommentVNode(" 小标签信息 "),
        vue.createElementVNode("view", { class: "class-info" }, [
          vue.createCommentVNode('<view class="class-icon">'),
          vue.createCommentVNode('  <wd-icon name="goods" size="22px" color="#b0a0e6"></wd-icon>'),
          vue.createCommentVNode('  <view class="class-text">'),
          vue.createCommentVNode("    白日梦"),
          vue.createCommentVNode("  </view>"),
          vue.createCommentVNode("</view>"),
          vue.createElementVNode("view", { class: "class-icon" }, [
            vue.createVNode(_component_wd_icon, {
              name: "discount",
              size: "18px",
              color: "#b0a0e6"
            }),
            vue.createElementVNode(
              "view",
              { class: "class-text" },
              vue.toDisplayString($setup.itemsDetail.category),
              1
              /* TEXT */
            )
          ]),
          vue.createElementVNode("view", { class: "class-icon" }, [
            vue.createVNode(_component_wd_icon, {
              name: "view",
              size: "18px",
              color: "#b0a0e6"
            }),
            vue.createElementVNode("view", { class: "class-text" }, " 本人保管")
          ]),
          vue.createElementVNode("view", { class: "class-icon" }, [
            vue.createVNode(_component_wd_icon, {
              name: "location",
              size: "18px",
              color: "#b0a0e6"
            }),
            vue.createElementVNode(
              "view",
              { class: "class-text" },
              vue.toDisplayString($setup.itemsDetail.location),
              1
              /* TEXT */
            )
          ])
        ]),
        vue.createCommentVNode(" 图片信息区 "),
        ((_a = $setup.itemsDetail.url) == null ? void 0 : _a.length) != 0 ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "Ting-pic"
        }, [
          vue.createVNode(_component_wd_swiper, {
            list: (_b = $setup.itemsDetail) == null ? void 0 : _b.url,
            indicator: { type: "fraction" },
            autoplay: true,
            indicatorPosition: "bottom-right",
            onClick: $setup.handleClick,
            onChange: $setup.onChange
          }, null, 8, ["list"])
        ])) : vue.createCommentVNode("v-if", true),
        vue.createCommentVNode(" 备注信息区 "),
        vue.createElementVNode(
          "view",
          { class: "info-item" },
          vue.toDisplayString($setup.itemsDetail.description),
          1
          /* TEXT */
        )
      ]),
      vue.createElementVNode("view", { class: "user-info card-style" }, [
        vue.createElementVNode("view", { class: "user-pic" }, [
          vue.createVNode(_component_wd_img, {
            width: 50,
            height: 50,
            round: "",
            src: (_d = (_c = $setup.itemsDetail) == null ? void 0 : _c.userVO) == null ? void 0 : _d.imageUrl
          }, null, 8, ["src"])
        ]),
        vue.createElementVNode("view", { class: "user" }, [
          vue.createElementVNode(
            "view",
            { class: "name" },
            vue.toDisplayString((_f = (_e = $setup.itemsDetail) == null ? void 0 : _e.userVO) == null ? void 0 : _f.userName),
            1
            /* TEXT */
          ),
          vue.createElementVNode("view", { class: "class" }, " 发布者 ")
        ]),
        vue.createElementVNode("view", { class: "bottom" }, [
          vue.createVNode(_component_wd_button, {
            type: "primary",
            onClick: _cache[0] || (_cache[0] = ($event) => $setup.show = true)
          }, {
            default: vue.withCtx(() => [
              vue.createTextVNode("是我的")
            ]),
            _: 1
            /* STABLE */
          }),
          vue.createVNode(_component_wd_overlay, {
            show: $setup.show,
            onClick: _cache[5] || (_cache[5] = ($event) => $setup.show = false)
          }, {
            default: vue.withCtx(() => [
              vue.createElementVNode("view", { class: "wrapper" }, [
                vue.createElementVNode("view", {
                  class: "block",
                  onClick: _cache[4] || (_cache[4] = vue.withModifiers(() => {
                  }, ["stop"]))
                }, [
                  vue.createElementVNode("view", { class: "title" }, " 验证消息 "),
                  vue.createElementVNode("view", { class: "title-info" }, " 上传证明材料 "),
                  vue.createCommentVNode(" 图片上传区域 "),
                  vue.createVNode(_component_wd_upload, {
                    "file-list": $setup.fileList,
                    "onUpdate:fileList": _cache[1] || (_cache[1] = ($event) => $setup.fileList = $event),
                    ref: "uploadFile",
                    limit: 6,
                    multiple: "",
                    accept: "image",
                    action: "https://campus.fybreeze.cn/api/article/uploadImages",
                    onChange: $setup.handleChange,
                    "before-remove": $setup.beforeImageRemove,
                    onSuccess: $setup.uploadSuccess
                  }, null, 8, ["file-list"]),
                  vue.createElementVNode("view", { class: "title-info" }, " 请你简要描述一下物品的特征 "),
                  vue.createElementVNode("view", { class: "input-text" }, [
                    vue.createVNode(_component_wd_textarea, {
                      modelValue: $setup.paramsMatch.description,
                      "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $setup.paramsMatch.description = $event),
                      placeholder: "请填写物品的信息"
                    }, null, 8, ["modelValue"])
                  ]),
                  vue.createElementVNode("view", { class: "bottom-pop" }, [
                    vue.createVNode(_component_wd_button, {
                      type: "info",
                      onClick: _cache[3] || (_cache[3] = ($event) => $setup.show = false)
                    }, {
                      default: vue.withCtx(() => [
                        vue.createTextVNode("取消")
                      ]),
                      _: 1
                      /* STABLE */
                    }),
                    vue.createVNode(_component_wd_button, { onClick: $setup.handleSubmit }, {
                      default: vue.withCtx(() => [
                        vue.createTextVNode("确认")
                      ]),
                      _: 1
                      /* STABLE */
                    })
                  ])
                ])
              ])
            ]),
            _: 1
            /* STABLE */
          }, 8, ["show"])
        ])
      ]),
      vue.createVNode(_component_wd_toast)
    ]);
  }
  const PagesLostFoundDetailLostFoundDetail = /* @__PURE__ */ _export_sfc(_sfc_main$c, [["render", _sfc_render$b], ["__scopeId", "data-v-3b1cb06c"], ["__file", "G:/Code/campus/miniProject/pages/lostFoundDetail/lostFoundDetail.vue"]]);
  const _sfc_main$b = /* @__PURE__ */ vue.defineComponent({
    __name: "userDetail",
    setup(__props, { expose: __expose }) {
      __expose();
      const toast = useToast();
      const userInfo = vue.ref(null);
      const articleList = vue.ref([]);
      const currentPage = vue.ref(1);
      const pageSize = vue.ref(10);
      const total = vue.ref(0);
      const loading = vue.ref(false);
      const finished = vue.ref(false);
      const currentUserId = vue.ref("");
      onLoad((options) => {
        formatAppLog("log", "at pages/userDetail/userDetail.vue:214", options);
        if (options == null ? void 0 : options.userId) {
          currentUserId.value = options.userId;
          fetchUser(options.userId);
          fetchArticles(options.userId);
        }
      });
      const fetchUser = async (id) => {
        formatAppLog("log", "at pages/userDetail/userDetail.vue:223", id);
        const res = await getUserVOById(id);
        formatAppLog("log", "at pages/userDetail/userDetail.vue:225", res);
        if (res.code === 200) {
          userInfo.value = res.data;
        } else {
          toast.error(res.message);
        }
      };
      const fetchArticles = async (userId) => {
        if (loading.value || finished.value)
          return;
        try {
          loading.value = true;
          const res = await getArticleList({
            pageNum: currentPage.value,
            pageSize: pageSize.value,
            userId
          });
          if (res.code === 200) {
            if (currentPage.value === 1) {
              articleList.value = res.data.records;
            } else {
              articleList.value = [...articleList.value, ...res.data.records];
            }
            total.value = res.data.total;
            if (articleList.value.length >= total.value) {
              finished.value = true;
            } else {
              currentPage.value++;
            }
          } else {
            toast.error(res.message);
          }
        } catch (error) {
          formatAppLog("error", "at pages/userDetail/userDetail.vue:264", "获取文章列表失败:", error);
          toast.error("获取文章列表失败");
        } finally {
          loading.value = false;
        }
      };
      const onLoadMore = () => {
        if (currentUserId.value) {
          fetchArticles(currentUserId.value);
        }
      };
      const isShow = () => {
        const localUserInfo = getUserInfo();
        if (!localUserInfo || !userInfo.value)
          return 1;
        if (localUserInfo.id === userInfo.value.id)
          return 3;
        return 2;
      };
      const handleToEdit = () => {
        uni.navigateTo({
          url: "/pages/updateUserInfo/updateUserInfo"
        });
      };
      const handleToArticle = (articleId) => {
        uni.navigateTo({
          url: `/pages/articleDetail/articleDetail?articleId=${articleId}`
        });
      };
      const previewImage = (images, current) => {
        uni.previewImage({
          urls: images,
          current: images[current]
        });
      };
      const __returned__ = { toast, userInfo, articleList, currentPage, pageSize, total, loading, finished, currentUserId, fetchUser, fetchArticles, onLoadMore, isShow, handleToEdit, handleToArticle, previewImage };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  const _imports_0$5 = "/static/logo.jpg";
  function _sfc_render$a(_ctx, _cache, $props, $setup, $data, $options) {
    var _a, _b, _c, _d;
    const _component_wd_img = resolveEasycom(vue.resolveDynamicComponent("wd-img"), WdImg);
    const _component_wd_icon = resolveEasycom(vue.resolveDynamicComponent("wd-icon"), __easycom_0$5);
    const _component_wd_tag = resolveEasycom(vue.resolveDynamicComponent("wd-tag"), __easycom_2$1);
    const _component_wd_button = resolveEasycom(vue.resolveDynamicComponent("wd-button"), __easycom_3);
    const _component_wd_loading = resolveEasycom(vue.resolveDynamicComponent("wd-loading"), __easycom_0$3);
    const _component_wd_tab = resolveEasycom(vue.resolveDynamicComponent("wd-tab"), __easycom_0$1);
    const _component_wd_tabs = resolveEasycom(vue.resolveDynamicComponent("wd-tabs"), __easycom_1$1);
    const _component_wd_toast = resolveEasycom(vue.resolveDynamicComponent("wd-toast"), __easycom_2$2);
    return vue.openBlock(), vue.createElementBlock(
      vue.Fragment,
      null,
      [
        vue.createElementVNode("view", { class: "container" }, [
          vue.createCommentVNode(" 背景图区域 "),
          vue.createElementVNode("view", { class: "banner-wrap" }, [
            vue.createElementVNode("image", {
              class: "banner-bg",
              src: _imports_0$5,
              mode: "aspectFill"
            }),
            vue.createElementVNode("view", { class: "banner-overlay" }),
            vue.createCommentVNode(" 用户头像卡片 "),
            vue.createElementVNode("view", { class: "user-card" }, [
              vue.createElementVNode("view", { class: "user-info" }, [
                vue.createElementVNode("view", { class: "avatar-container" }, [
                  vue.createVNode(_component_wd_img, {
                    width: "160rpx",
                    height: "160rpx",
                    round: "",
                    src: ((_a = $setup.userInfo) == null ? void 0 : _a.imageUrl) || "/static/default-avatar.png",
                    class: "avatar-image"
                  }, null, 8, ["src"]),
                  vue.createElementVNode("view", { class: "online-status" })
                ]),
                vue.createElementVNode("view", { class: "text-info" }, [
                  vue.createElementVNode("view", { class: "name-row" }, [
                    vue.createElementVNode(
                      "text",
                      { class: "username" },
                      vue.toDisplayString(((_b = $setup.userInfo) == null ? void 0 : _b.userName) || "未设置昵称"),
                      1
                      /* TEXT */
                    ),
                    ((_c = $setup.userInfo) == null ? void 0 : _c.gender) ? (vue.openBlock(), vue.createBlock(_component_wd_icon, {
                      key: 0,
                      name: $setup.userInfo.gender === 1 ? "male" : "female",
                      color: $setup.userInfo.gender === 1 ? "#007AFF" : "#FF69B4",
                      size: "32rpx"
                    }, null, 8, ["name", "color"])) : vue.createCommentVNode("v-if", true)
                  ]),
                  vue.createElementVNode("view", { class: "tags-row" }, [
                    vue.createVNode(_component_wd_tag, {
                      type: "success",
                      size: "small"
                    }, {
                      default: vue.withCtx(() => [
                        vue.createTextVNode("Lv.3")
                      ]),
                      _: 1
                      /* STABLE */
                    }),
                    vue.createVNode(_component_wd_tag, {
                      type: "warning",
                      size: "small"
                    }, {
                      default: vue.withCtx(() => [
                        vue.createTextVNode("活跃用户")
                      ]),
                      _: 1
                      /* STABLE */
                    })
                  ]),
                  vue.createElementVNode("text", { class: "active-time" }, "最近活跃：刚刚")
                ])
              ])
            ])
          ]),
          vue.createCommentVNode(" 详细信息区域 "),
          vue.createElementVNode("view", { class: "profile-detail" }, [
            vue.createElementVNode("view", { class: "left-section" }, [
              vue.createElementVNode("view", { class: "profile-text" }, [
                vue.createElementVNode(
                  "text",
                  { class: "profile-content" },
                  vue.toDisplayString(((_d = $setup.userInfo) == null ? void 0 : _d.userProfile) || "这个人很懒，还没有填写简介~"),
                  1
                  /* TEXT */
                )
              ]),
              vue.createElementVNode("view", { class: "location-info" }, [
                vue.createVNode(_component_wd_icon, {
                  name: "location",
                  size: "28rpx",
                  color: "#666"
                }),
                vue.createVNode(_component_wd_tag, {
                  plain: "",
                  size: "small"
                }, {
                  default: vue.withCtx(() => [
                    vue.createTextVNode("IP属地：陕西")
                  ]),
                  _: 1
                  /* STABLE */
                })
              ])
            ]),
            vue.createElementVNode("view", { class: "right-section" }, [
              vue.createElementVNode("view", { class: "data-grid" }, [
                vue.createElementVNode("view", { class: "data-item" }, [
                  vue.createElementVNode("text", { class: "num" }, "122"),
                  vue.createElementVNode("text", { class: "label" }, "获赞")
                ]),
                vue.createElementVNode("view", { class: "divider" }),
                vue.createElementVNode("view", { class: "data-item" }, [
                  vue.createElementVNode("text", { class: "num" }, "6"),
                  vue.createElementVNode("text", { class: "label" }, "粉丝")
                ]),
                vue.createElementVNode("view", { class: "divider" }),
                vue.createElementVNode("view", { class: "data-item" }, [
                  vue.createElementVNode("text", { class: "num" }, "0"),
                  vue.createElementVNode("text", { class: "label" }, "关注")
                ])
              ]),
              vue.createElementVNode("view", { class: "action-buttons" }, [
                $setup.isShow() == 1 ? (vue.openBlock(), vue.createBlock(_component_wd_button, {
                  key: 0,
                  type: "success",
                  size: "small"
                }, {
                  default: vue.withCtx(() => [
                    vue.createVNode(_component_wd_icon, { name: "plus" }),
                    vue.createTextVNode("关注 ")
                  ]),
                  _: 1
                  /* STABLE */
                })) : $setup.isShow() == 2 ? (vue.openBlock(), vue.createBlock(_component_wd_button, {
                  key: 1,
                  type: "info",
                  size: "small"
                }, {
                  default: vue.withCtx(() => [
                    vue.createVNode(_component_wd_icon, { name: "check" }),
                    vue.createTextVNode("已关注 ")
                  ]),
                  _: 1
                  /* STABLE */
                })) : (vue.openBlock(), vue.createBlock(_component_wd_button, {
                  key: 2,
                  type: "primary",
                  size: "small",
                  onClick: $setup.handleToEdit
                }, {
                  default: vue.withCtx(() => [
                    vue.createVNode(_component_wd_icon, { name: "edit" }),
                    vue.createTextVNode("编辑资料 ")
                  ]),
                  _: 1
                  /* STABLE */
                }))
              ])
            ])
          ]),
          vue.createCommentVNode(" 用户动态区域 "),
          vue.createElementVNode("view", { class: "past-records" }, [
            vue.createVNode(_component_wd_tabs, {
              slidable: "always",
              animated: "",
              "auto-line-width": "",
              sticky: "",
              "offset-top": "0"
            }, {
              default: vue.withCtx(() => [
                vue.createVNode(_component_wd_tab, {
                  title: "发表",
                  badge: $setup.total
                }, {
                  default: vue.withCtx(() => [
                    $setup.articleList.length === 0 ? (vue.openBlock(), vue.createElementBlock("view", {
                      key: 0,
                      class: "empty-content"
                    }, [
                      vue.createVNode(_component_wd_icon, {
                        name: "comment",
                        size: "80rpx",
                        color: "#ccc"
                      }),
                      vue.createElementVNode("text", null, "暂无发表内容")
                    ])) : (vue.openBlock(), vue.createElementBlock("view", {
                      key: 1,
                      class: "article-list"
                    }, [
                      (vue.openBlock(true), vue.createElementBlock(
                        vue.Fragment,
                        null,
                        vue.renderList($setup.articleList, (article) => {
                          return vue.openBlock(), vue.createElementBlock("view", {
                            key: article.id,
                            class: "article-card",
                            onClick: ($event) => $setup.handleToArticle(article.id)
                          }, [
                            vue.createElementVNode("view", { class: "article-header" }, [
                              vue.createElementVNode("view", { class: "author-info" }, [
                                vue.createVNode(_component_wd_img, {
                                  width: "60rpx",
                                  height: "60rpx",
                                  round: "",
                                  src: article.userVO.imageUrl,
                                  class: "author-avatar"
                                }, null, 8, ["src"]),
                                vue.createElementVNode(
                                  "text",
                                  { class: "author-name" },
                                  vue.toDisplayString(article.userVO.userName),
                                  1
                                  /* TEXT */
                                )
                              ]),
                              vue.createElementVNode(
                                "text",
                                { class: "article-time" },
                                vue.toDisplayString(article.createTime),
                                1
                                /* TEXT */
                              )
                            ]),
                            vue.createElementVNode("view", { class: "article-content" }, [
                              vue.createElementVNode(
                                "text",
                                { class: "article-desc" },
                                vue.toDisplayString(article.content),
                                1
                                /* TEXT */
                              )
                            ]),
                            vue.createCommentVNode(" 图片列表展示 "),
                            article.imagesList && article.imagesList.length > 0 ? (vue.openBlock(), vue.createElementBlock(
                              "view",
                              {
                                key: 0,
                                class: vue.normalizeClass(["image-list", [`image-count-${article.imagesList.length}`]])
                              },
                              [
                                (vue.openBlock(true), vue.createElementBlock(
                                  vue.Fragment,
                                  null,
                                  vue.renderList(article.imagesList, (img, index) => {
                                    return vue.openBlock(), vue.createElementBlock("image", {
                                      key: index,
                                      src: img,
                                      mode: "aspectFill",
                                      class: vue.normalizeClass(["content-image", {
                                        "single-image": article.imagesList.length === 1,
                                        "double-image": article.imagesList.length === 2,
                                        "multi-image": article.imagesList.length > 2
                                      }]),
                                      onClick: vue.withModifiers(($event) => $setup.previewImage(article.imagesList, index), ["stop"])
                                    }, null, 10, ["src", "onClick"]);
                                  }),
                                  128
                                  /* KEYED_FRAGMENT */
                                ))
                              ],
                              2
                              /* CLASS */
                            )) : vue.createCommentVNode("v-if", true),
                            vue.createElementVNode("view", { class: "article-footer" }, [
                              vue.createElementVNode("view", { class: "article-stats" }, [
                                vue.createElementVNode("view", { class: "stat-item" }, [
                                  vue.createVNode(_component_wd_icon, {
                                    name: "view",
                                    size: "28rpx",
                                    color: "#666"
                                  }),
                                  vue.createElementVNode(
                                    "text",
                                    null,
                                    vue.toDisplayString(article.viewCount),
                                    1
                                    /* TEXT */
                                  )
                                ]),
                                vue.createElementVNode("view", { class: "stat-item" }, [
                                  vue.createElementVNode(
                                    "i",
                                    {
                                      class: vue.normalizeClass(article.isLike ? "t-icon t-icon-like-selected" : "t-icon t-icon-like"),
                                      size: "28rpx"
                                    },
                                    null,
                                    2
                                    /* CLASS */
                                  ),
                                  vue.createElementVNode(
                                    "text",
                                    null,
                                    vue.toDisplayString(article.likeCount),
                                    1
                                    /* TEXT */
                                  )
                                ]),
                                vue.createElementVNode("view", { class: "stat-item" }, [
                                  vue.createVNode(_component_wd_icon, {
                                    name: "chat",
                                    size: "28rpx",
                                    color: "#666"
                                  }),
                                  vue.createElementVNode(
                                    "text",
                                    null,
                                    vue.toDisplayString(article.commentCount),
                                    1
                                    /* TEXT */
                                  )
                                ])
                              ]),
                              article.tags && article.tags.length > 0 ? (vue.openBlock(), vue.createElementBlock("view", {
                                key: 0,
                                class: "article-tags"
                              }, [
                                (vue.openBlock(true), vue.createElementBlock(
                                  vue.Fragment,
                                  null,
                                  vue.renderList(article.tags, (tag2) => {
                                    return vue.openBlock(), vue.createBlock(
                                      _component_wd_tag,
                                      {
                                        key: tag2,
                                        type: "info",
                                        size: "small"
                                      },
                                      {
                                        default: vue.withCtx(() => [
                                          vue.createTextVNode(
                                            vue.toDisplayString(tag2),
                                            1
                                            /* TEXT */
                                          )
                                        ]),
                                        _: 2
                                        /* DYNAMIC */
                                      },
                                      1024
                                      /* DYNAMIC_SLOTS */
                                    );
                                  }),
                                  128
                                  /* KEYED_FRAGMENT */
                                ))
                              ])) : vue.createCommentVNode("v-if", true)
                            ])
                          ], 8, ["onClick"]);
                        }),
                        128
                        /* KEYED_FRAGMENT */
                      )),
                      vue.createCommentVNode(" 加载更多区域 "),
                      $setup.articleList.length > 0 ? (vue.openBlock(), vue.createElementBlock("view", {
                        key: 0,
                        class: "load-more"
                      }, [
                        $setup.loading ? (vue.openBlock(), vue.createElementBlock("view", {
                          key: 0,
                          class: "loading"
                        }, [
                          vue.createVNode(_component_wd_loading, { size: "28rpx" }),
                          vue.createElementVNode("text", null, "加载中...")
                        ])) : $setup.finished ? (vue.openBlock(), vue.createElementBlock("view", {
                          key: 1,
                          class: "no-more"
                        }, [
                          vue.createElementVNode("text", null, "没有更多了")
                        ])) : (vue.openBlock(), vue.createElementBlock("view", {
                          key: 2,
                          class: "load-more-btn",
                          onClick: $setup.onLoadMore
                        }, [
                          vue.createElementVNode("text", null, "点击加载更多")
                        ]))
                      ])) : vue.createCommentVNode("v-if", true)
                    ]))
                  ]),
                  _: 1
                  /* STABLE */
                }, 8, ["badge"]),
                vue.createVNode(_component_wd_tab, {
                  title: "收藏",
                  badge: 1
                }, {
                  default: vue.withCtx(() => [
                    vue.createElementVNode("view", { class: "empty-content" }, [
                      vue.createVNode(_component_wd_icon, {
                        name: "star",
                        size: "80rpx",
                        color: "#ccc"
                      }),
                      vue.createElementVNode("text", null, "暂无收藏内容")
                    ])
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              _: 1
              /* STABLE */
            })
          ])
        ]),
        vue.createVNode(_component_wd_toast)
      ],
      64
      /* STABLE_FRAGMENT */
    );
  }
  const PagesUserDetailUserDetail = /* @__PURE__ */ _export_sfc(_sfc_main$b, [["render", _sfc_render$a], ["__file", "G:/Code/campus/miniProject/pages/userDetail/userDetail.vue"]]);
  const _sfc_main$a = /* @__PURE__ */ vue.defineComponent({
    __name: "clubDetail",
    setup(__props, { expose: __expose }) {
      __expose();
      const toast = useToast();
      const imageLoaded = vue.ref(false);
      const loading = vue.ref(true);
      const clubInfo = vue.ref({
        id: 0,
        name: "",
        profile: "",
        cover: "",
        avatar: "",
        grandTotal: 0,
        awards: [],
        userVO: {
          imageUrl: "",
          userName: "",
          userAccount: "",
          userProfile: "",
          userRole: ""
        }
      });
      const handleImageLoad = () => {
        imageLoaded.value = true;
      };
      const handleSectionClick = () => {
        uni.vibrateShort();
      };
      const fetchClubDetail = async (id) => {
        try {
          loading.value = true;
          const res = await getClubDetail(id);
          formatAppLog("log", "at pages/clubDetail/clubDetail.vue:212", res);
          if (res.code === 200 && res.data) {
            clubInfo.value = res.data;
          } else {
            toast.error("获取社团详情失败");
          }
        } catch (error) {
          formatAppLog("error", "at pages/clubDetail/clubDetail.vue:219", "获取社团详情错误:", error);
          toast.error("获取社团详情失败");
        } finally {
          loading.value = false;
        }
      };
      const previewImage = (url2) => {
        uni.previewImage({
          urls: clubInfo.value.awards,
          current: url2
        });
      };
      const handleActivityClick = (activity) => {
        formatAppLog("log", "at pages/clubDetail/clubDetail.vue:236", activity);
        uni.navigateTo({
          url: `/pages/activityDetail/activityDetail?activityInfo=${JSON.stringify(activity)}`
        });
      };
      const getStatusClass = (status) => {
        switch (status) {
          case 0:
            return "status-upcoming";
          case 1:
            return "status-ongoing";
          case 2:
            return "status-ended";
          default:
            return "status-unknown";
        }
      };
      const getStatusText = (status) => {
        switch (status) {
          case 0:
            return "即将开始";
          case 1:
            return "进行中";
          case 2:
            return "已结束";
          default:
            return "未知状态";
        }
      };
      onLoad((option) => {
        if (option == null ? void 0 : option.id) {
          fetchClubDetail(Number(option.id));
        } else {
          toast.error("参数错误");
          setTimeout(() => {
            uni.navigateBack();
          }, 1500);
        }
      });
      const __returned__ = { toast, imageLoaded, loading, clubInfo, handleImageLoad, handleSectionClick, fetchClubDetail, previewImage, handleActivityClick, getStatusClass, getStatusText };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$9(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_wd_loading = resolveEasycom(vue.resolveDynamicComponent("wd-loading"), __easycom_0$3);
    const _component_wd_icon = resolveEasycom(vue.resolveDynamicComponent("wd-icon"), __easycom_0$5);
    const _component_wd_toast = resolveEasycom(vue.resolveDynamicComponent("wd-toast"), __easycom_2$2);
    return vue.openBlock(), vue.createElementBlock("view", { class: "container" }, [
      $setup.loading ? (vue.openBlock(), vue.createBlock(_component_wd_loading, { key: 0 })) : (vue.openBlock(), vue.createElementBlock(
        vue.Fragment,
        { key: 1 },
        [
          vue.createCommentVNode(" 顶部封面和基本信息 "),
          vue.createElementVNode("view", { class: "header" }, [
            $setup.clubInfo.cover ? (vue.openBlock(), vue.createElementBlock("image", {
              key: 0,
              src: $setup.clubInfo.cover,
              mode: "aspectFill",
              class: "cover-image"
            }, null, 8, ["src"])) : vue.createCommentVNode("v-if", true),
            vue.createElementVNode("view", { class: "club-info" }, [
              $setup.clubInfo.avatar ? (vue.openBlock(), vue.createElementBlock("image", {
                key: 0,
                src: $setup.clubInfo.avatar,
                class: "club-avatar",
                mode: "aspectFill"
              }, null, 8, ["src"])) : vue.createCommentVNode("v-if", true),
              vue.createElementVNode(
                "text",
                { class: "club-name" },
                vue.toDisplayString($setup.clubInfo.name),
                1
                /* TEXT */
              ),
              vue.createElementVNode(
                "text",
                { class: "member-count" },
                "成员数：" + vue.toDisplayString($setup.clubInfo.grandTotal || 0),
                1
                /* TEXT */
              )
            ])
          ]),
          vue.createCommentVNode(" 社团介绍模块 "),
          vue.createElementVNode("view", {
            class: "section intro-box",
            onClick: $setup.handleSectionClick
          }, [
            vue.createElementVNode("view", { class: "section-title" }, [
              vue.createVNode(_component_wd_icon, {
                name: "info",
                color: "#007AFF"
              }),
              vue.createElementVNode("text", null, "社团介绍")
            ]),
            vue.createElementVNode(
              "text",
              { class: "content-text" },
              vue.toDisplayString($setup.clubInfo.profile || "暂无介绍"),
              1
              /* TEXT */
            )
          ]),
          vue.createCommentVNode(" 社长介绍模块 "),
          vue.createElementVNode("view", {
            class: "section profile-box",
            onClick: $setup.handleSectionClick
          }, [
            vue.createElementVNode("view", { class: "section-title" }, [
              vue.createVNode(_component_wd_icon, {
                name: "user",
                color: "#007AFF"
              }),
              vue.createElementVNode("text", null, "社长介绍")
            ]),
            $setup.clubInfo.userVO ? (vue.openBlock(), vue.createElementBlock("view", {
              key: 0,
              class: "president-info"
            }, [
              vue.createElementVNode("view", { class: "president-card" }, [
                vue.createElementVNode("view", { class: "photo-wrapper" }, [
                  vue.createElementVNode("image", {
                    class: "photo",
                    src: $setup.clubInfo.userVO.imageUrl || "/static/default-avatar.png",
                    mode: "aspectFill",
                    "lazy-load": "",
                    onLoad: $setup.handleImageLoad
                  }, null, 40, ["src"]),
                  !$setup.imageLoaded ? (vue.openBlock(), vue.createElementBlock("view", {
                    key: 0,
                    class: "loading-text"
                  }, "照片加载中...")) : vue.createCommentVNode("v-if", true),
                  vue.createElementVNode("view", { class: "president-tag" }, "社长")
                ]),
                vue.createElementVNode("view", { class: "info-wrapper" }, [
                  vue.createElementVNode("view", { class: "basic-info" }, [
                    vue.createElementVNode(
                      "text",
                      { class: "name" },
                      vue.toDisplayString($setup.clubInfo.userVO.userName || "未设置姓名"),
                      1
                      /* TEXT */
                    ),
                    vue.createElementVNode(
                      "text",
                      { class: "account" },
                      vue.toDisplayString($setup.clubInfo.userVO.userAccount),
                      1
                      /* TEXT */
                    )
                  ]),
                  $setup.clubInfo.userVO.tagList && $setup.clubInfo.userVO.tagList.length > 0 ? (vue.openBlock(), vue.createElementBlock("view", {
                    key: 0,
                    class: "tags"
                  }, [
                    (vue.openBlock(true), vue.createElementBlock(
                      vue.Fragment,
                      null,
                      vue.renderList($setup.clubInfo.userVO.tagList, (tag2, index) => {
                        return vue.openBlock(), vue.createElementBlock(
                          "text",
                          {
                            key: index,
                            class: "tag"
                          },
                          vue.toDisplayString(tag2),
                          1
                          /* TEXT */
                        );
                      }),
                      128
                      /* KEYED_FRAGMENT */
                    ))
                  ])) : vue.createCommentVNode("v-if", true),
                  vue.createElementVNode("view", { class: "extra-info" }, [
                    $setup.clubInfo.userVO.gender !== void 0 ? (vue.openBlock(), vue.createElementBlock("view", {
                      key: 0,
                      class: "info-item"
                    }, [
                      vue.createVNode(_component_wd_icon, {
                        name: $setup.clubInfo.userVO.gender === 1 ? "male" : "female",
                        color: $setup.clubInfo.userVO.gender === 1 ? "#007AFF" : "#FF69B4",
                        size: "28rpx"
                      }, null, 8, ["name", "color"])
                    ])) : vue.createCommentVNode("v-if", true),
                    $setup.clubInfo.userVO.constellation ? (vue.openBlock(), vue.createElementBlock("view", {
                      key: 1,
                      class: "info-item"
                    }, [
                      vue.createVNode(_component_wd_icon, {
                        name: "star",
                        color: "#FFB900",
                        size: "28rpx"
                      }),
                      vue.createElementVNode(
                        "text",
                        null,
                        vue.toDisplayString($setup.clubInfo.userVO.constellation),
                        1
                        /* TEXT */
                      )
                    ])) : vue.createCommentVNode("v-if", true)
                  ]),
                  vue.createElementVNode("view", { class: "profile" }, [
                    vue.createElementVNode(
                      "text",
                      { class: "profile-text" },
                      vue.toDisplayString($setup.clubInfo.userVO.userProfile || "这个社长很懒，还没有填写简介~"),
                      1
                      /* TEXT */
                    )
                  ])
                ])
              ])
            ])) : (vue.openBlock(), vue.createElementBlock("view", {
              key: 1,
              class: "empty-tip"
            }, "暂无社长信息"))
          ]),
          vue.createCommentVNode(" 社团荣誉墙 "),
          $setup.clubInfo.awards && $setup.clubInfo.awards.length > 0 ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 0,
            class: "section honor-box"
          }, [
            vue.createElementVNode("view", { class: "section-title" }, [
              vue.createVNode(_component_wd_icon, {
                name: "trophy",
                color: "#FFB900"
              }),
              vue.createElementVNode("text", null, "社团荣誉")
            ]),
            vue.createElementVNode("view", { class: "awards-grid" }, [
              (vue.openBlock(true), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList($setup.clubInfo.awards, (award, index) => {
                  return vue.openBlock(), vue.createElementBlock("view", {
                    key: index,
                    class: "award-item",
                    onClick: ($event) => $setup.previewImage(award)
                  }, [
                    vue.createElementVNode("image", {
                      src: award,
                      mode: "aspectFill",
                      class: "award-image",
                      "lazy-load": ""
                    }, null, 8, ["src"]),
                    vue.createElementVNode("view", { class: "award-mask" }, [
                      vue.createVNode(_component_wd_icon, {
                        name: "zoom-in",
                        color: "#fff",
                        size: "40rpx"
                      })
                    ])
                  ], 8, ["onClick"]);
                }),
                128
                /* KEYED_FRAGMENT */
              ))
            ])
          ])) : vue.createCommentVNode("v-if", true),
          vue.createCommentVNode(" 社团活动 "),
          $setup.clubInfo.activityVOList && $setup.clubInfo.activityVOList.length > 0 ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 1,
            class: "section activity-box"
          }, [
            vue.createElementVNode("view", { class: "section-title" }, [
              vue.createVNode(_component_wd_icon, {
                name: "calendar",
                color: "#007AFF"
              }),
              vue.createElementVNode("text", null, "社团活动")
            ]),
            vue.createElementVNode("view", { class: "activity-list" }, [
              (vue.openBlock(true), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList($setup.clubInfo.activityVOList, (activity, index) => {
                  return vue.openBlock(), vue.createElementBlock("view", {
                    key: index,
                    class: "activity-card",
                    onClick: ($event) => $setup.handleActivityClick(activity)
                  }, [
                    activity.coverPicture ? (vue.openBlock(), vue.createElementBlock("image", {
                      key: 0,
                      src: activity.coverPicture,
                      mode: "aspectFill",
                      class: "activity-cover",
                      "lazy-load": ""
                    }, null, 8, ["src"])) : vue.createCommentVNode("v-if", true),
                    vue.createElementVNode("view", { class: "activity-info" }, [
                      vue.createElementVNode(
                        "text",
                        { class: "activity-title" },
                        vue.toDisplayString(activity.title),
                        1
                        /* TEXT */
                      ),
                      vue.createElementVNode("view", { class: "activity-meta" }, [
                        vue.createElementVNode("view", { class: "meta-item" }, [
                          vue.createVNode(_component_wd_icon, {
                            name: "time",
                            size: "24rpx",
                            color: "#666"
                          }),
                          vue.createElementVNode(
                            "text",
                            null,
                            vue.toDisplayString(activity.startTime),
                            1
                            /* TEXT */
                          )
                        ]),
                        vue.createElementVNode("view", { class: "meta-item" }, [
                          vue.createVNode(_component_wd_icon, {
                            name: "location",
                            size: "24rpx",
                            color: "#666"
                          }),
                          vue.createElementVNode(
                            "text",
                            null,
                            vue.toDisplayString(activity.position || "暂无地点"),
                            1
                            /* TEXT */
                          )
                        ])
                      ]),
                      vue.createElementVNode(
                        "text",
                        { class: "activity-desc" },
                        vue.toDisplayString(activity.profile || "暂无描述"),
                        1
                        /* TEXT */
                      ),
                      vue.createElementVNode("view", { class: "activity-footer" }, [
                        vue.createElementVNode(
                          "view",
                          {
                            class: vue.normalizeClass(["activity-status", $setup.getStatusClass(activity.status)])
                          },
                          vue.toDisplayString($setup.getStatusText(activity.status)),
                          3
                          /* TEXT, CLASS */
                        ),
                        activity.status !== 2 ? (vue.openBlock(), vue.createElementBlock(
                          "view",
                          {
                            key: 0,
                            class: vue.normalizeClass(["registration-status", activity.isRegistration ? "registered" : "not-registered"])
                          },
                          vue.toDisplayString(activity.isRegistration ? "已报名" : "未报名"),
                          3
                          /* TEXT, CLASS */
                        )) : vue.createCommentVNode("v-if", true)
                      ])
                    ])
                  ], 8, ["onClick"]);
                }),
                128
                /* KEYED_FRAGMENT */
              ))
            ])
          ])) : vue.createCommentVNode("v-if", true)
        ],
        64
        /* STABLE_FRAGMENT */
      )),
      vue.createCommentVNode(" 添加提示组件 "),
      vue.createVNode(_component_wd_toast)
    ]);
  }
  const PagesClubDetailClubDetail = /* @__PURE__ */ _export_sfc(_sfc_main$a, [["render", _sfc_render$9], ["__file", "G:/Code/campus/miniProject/pages/clubDetail/clubDetail.vue"]]);
  const _imports_0$4 = "/static/message/empty-follow.png";
  const _sfc_main$9 = {
    __name: "newFollowers",
    setup(__props, { expose: __expose }) {
      __expose();
      const followers = vue.ref([
        {
          id: 1,
          nickname: "小明同学",
          avatar: "/static/avatar.jpg",
          gender: "male",
          signature: "热爱生活，热爱学习",
          isFollowing: false
        },
        {
          id: 2,
          nickname: "小红同学",
          avatar: "/static/avatar.jpg",
          gender: "female",
          signature: "追求进步，永不止步",
          isFollowing: true
        },
        {
          id: 3,
          nickname: "小华同学",
          avatar: "/static/avatar.jpg",
          gender: "male",
          signature: "计算机科学与技术专业在读",
          isFollowing: false
        }
      ]);
      const handleFollow = (user) => {
        user.isFollowing = !user.isFollowing;
        uni.showToast({
          title: user.isFollowing ? "已关注" : "已取消关注",
          icon: "none"
        });
      };
      const __returned__ = { followers, handleFollow, ref: vue.ref };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  };
  function _sfc_render$8(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_wd_img = resolveEasycom(vue.resolveDynamicComponent("wd-img"), WdImg);
    const _component_wd_icon = resolveEasycom(vue.resolveDynamicComponent("wd-icon"), __easycom_0$5);
    return vue.openBlock(), vue.createElementBlock("view", { class: "container" }, [
      vue.createElementVNode("view", { class: "header" }, [
        vue.createElementVNode("text", { class: "title" }, "新增关注"),
        vue.createElementVNode(
          "text",
          { class: "subtitle" },
          vue.toDisplayString($setup.followers.length) + "位用户关注了你",
          1
          /* TEXT */
        )
      ]),
      vue.createElementVNode("view", { class: "follower-list" }, [
        (vue.openBlock(true), vue.createElementBlock(
          vue.Fragment,
          null,
          vue.renderList($setup.followers, (item, index) => {
            return vue.openBlock(), vue.createElementBlock("view", {
              key: index,
              class: "follower-item"
            }, [
              vue.createElementVNode("view", { class: "user-info" }, [
                vue.createElementVNode("view", { class: "avatar-wrap" }, [
                  vue.createVNode(_component_wd_img, {
                    width: 100,
                    height: 100,
                    round: "",
                    src: item.avatar
                  }, null, 8, ["src"]),
                  vue.createElementVNode(
                    "view",
                    {
                      class: vue.normalizeClass(["gender-icon", item.gender])
                    },
                    [
                      vue.createVNode(_component_wd_icon, {
                        name: item.gender === "male" ? "male" : "female",
                        size: "28rpx"
                      }, null, 8, ["name"])
                    ],
                    2
                    /* CLASS */
                  )
                ]),
                vue.createElementVNode("view", { class: "info" }, [
                  vue.createElementVNode(
                    "view",
                    { class: "name" },
                    vue.toDisplayString(item.nickname),
                    1
                    /* TEXT */
                  ),
                  vue.createElementVNode(
                    "view",
                    { class: "signature" },
                    vue.toDisplayString(item.signature),
                    1
                    /* TEXT */
                  )
                ])
              ]),
              vue.createElementVNode("view", { class: "action" }, [
                vue.createElementVNode("button", {
                  class: vue.normalizeClass(["follow-btn", { following: item.isFollowing }]),
                  onClick: ($event) => $setup.handleFollow(item)
                }, vue.toDisplayString(item.isFollowing ? "已关注" : "关注"), 11, ["onClick"])
              ])
            ]);
          }),
          128
          /* KEYED_FRAGMENT */
        ))
      ]),
      vue.createCommentVNode(" 空状态 "),
      $setup.followers.length === 0 ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 0,
        class: "empty-state"
      }, [
        vue.createElementVNode("image", {
          class: "empty-icon",
          src: _imports_0$4,
          mode: "aspectFit"
        }),
        vue.createElementVNode("text", { class: "empty-text" }, "暂无新的关注")
      ])) : vue.createCommentVNode("v-if", true)
    ]);
  }
  const PagesMessageNewFollowersNewFollowers = /* @__PURE__ */ _export_sfc(_sfc_main$9, [["render", _sfc_render$8], ["__scopeId", "data-v-d3064bbf"], ["__file", "G:/Code/campus/miniProject/pages/message/newFollowers/newFollowers.vue"]]);
  const _sfc_main$8 = /* @__PURE__ */ vue.defineComponent({
    __name: "likes",
    setup(__props, { expose: __expose }) {
      __expose();
      const activeTab = vue.ref(0);
      const likeList = vue.ref([
        {
          id: 1,
          userName: "小明",
          userAvatar: "/static/avatar.jpg",
          time: "刚刚",
          type: "帖子",
          content: "这是一个非常有趣的话题...",
          image: "https://minio.fybreeze.cn/campus/tmp_f4748c1c384f7acb2240ce3cd7000943.webp"
        },
        {
          id: 2,
          userName: "小红",
          userAvatar: "/static/avatar.jpg",
          time: "10分钟前",
          type: "评论",
          content: "说得很对，我也是这么认为的！"
        }
      ]);
      const favoriteList = vue.ref([
        {
          id: 3,
          userName: "小华",
          userAvatar: "/static/avatar.jpg",
          time: "30分钟前",
          type: "帖子",
          content: "关于期末考试复习的一些建议...",
          image: "https://bpic.588ku.com/back_origin_min_pic/19/10/22/7d5760a4e3926576c237d950d5964db1.jpg"
        }
      ]);
      const navigateToDetail = (item) => {
        if (item.type === "帖子") {
          uni.navigateTo({
            url: `/pages/post/detail?id=${item.id}`
          });
        } else {
          uni.navigateTo({
            url: `/pages/comment/detail?id=${item.id}`
          });
        }
      };
      const __returned__ = { activeTab, likeList, favoriteList, navigateToDetail };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  const _imports_0$3 = "/static/message/empty-like.png";
  const _imports_1 = "/static/message/empty-favorite.png";
  function _sfc_render$7(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_wd_tab = resolveEasycom(vue.resolveDynamicComponent("wd-tab"), __easycom_0$1);
    const _component_wd_tabs = resolveEasycom(vue.resolveDynamicComponent("wd-tabs"), __easycom_1$1);
    const _component_wd_img = resolveEasycom(vue.resolveDynamicComponent("wd-img"), WdImg);
    return vue.openBlock(), vue.createElementBlock("view", { class: "container" }, [
      vue.createVNode(_component_wd_tabs, {
        modelValue: $setup.activeTab,
        "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $setup.activeTab = $event),
        sticky: "",
        animated: ""
      }, {
        default: vue.withCtx(() => [
          vue.createVNode(_component_wd_tab, { title: "收到的赞" }),
          vue.createVNode(_component_wd_tab, { title: "收到的收藏" })
        ]),
        _: 1
        /* STABLE */
      }, 8, ["modelValue"]),
      vue.createCommentVNode(" 点赞列表 "),
      vue.withDirectives(vue.createElementVNode(
        "view",
        { class: "like-list" },
        [
          (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            null,
            vue.renderList($setup.likeList, (item, index) => {
              return vue.openBlock(), vue.createElementBlock("view", {
                key: index,
                class: "like-item",
                onClick: ($event) => $setup.navigateToDetail(item)
              }, [
                vue.createElementVNode("view", { class: "user-info" }, [
                  vue.createVNode(_component_wd_img, {
                    width: 80,
                    height: 80,
                    round: "",
                    src: item.userAvatar
                  }, null, 8, ["src"]),
                  vue.createElementVNode("view", { class: "info" }, [
                    vue.createElementVNode(
                      "view",
                      { class: "name" },
                      vue.toDisplayString(item.userName),
                      1
                      /* TEXT */
                    ),
                    vue.createElementVNode(
                      "view",
                      { class: "time" },
                      vue.toDisplayString(item.time),
                      1
                      /* TEXT */
                    )
                  ])
                ]),
                vue.createElementVNode("view", { class: "content" }, [
                  vue.createElementVNode(
                    "text",
                    { class: "action" },
                    "赞了你的" + vue.toDisplayString(item.type),
                    1
                    /* TEXT */
                  ),
                  vue.createElementVNode("view", { class: "preview" }, [
                    vue.createElementVNode(
                      "text",
                      { class: "text" },
                      vue.toDisplayString(item.content),
                      1
                      /* TEXT */
                    ),
                    item.image ? (vue.openBlock(), vue.createElementBlock("image", {
                      key: 0,
                      class: "image",
                      src: item.image,
                      mode: "aspectFill"
                    }, null, 8, ["src"])) : vue.createCommentVNode("v-if", true)
                  ])
                ])
              ], 8, ["onClick"]);
            }),
            128
            /* KEYED_FRAGMENT */
          )),
          $setup.likeList.length === 0 ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 0,
            class: "empty-state"
          }, [
            vue.createElementVNode("image", {
              class: "empty-icon",
              src: _imports_0$3,
              mode: "aspectFit"
            }),
            vue.createElementVNode("text", { class: "empty-text" }, "暂无收到的赞")
          ])) : vue.createCommentVNode("v-if", true)
        ],
        512
        /* NEED_PATCH */
      ), [
        [vue.vShow, $setup.activeTab === 0]
      ]),
      vue.createCommentVNode(" 收藏列表 "),
      vue.withDirectives(vue.createElementVNode(
        "view",
        { class: "favorite-list" },
        [
          (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            null,
            vue.renderList($setup.favoriteList, (item, index) => {
              return vue.openBlock(), vue.createElementBlock("view", {
                key: index,
                class: "favorite-item",
                onClick: ($event) => $setup.navigateToDetail(item)
              }, [
                vue.createElementVNode("view", { class: "user-info" }, [
                  vue.createVNode(_component_wd_img, {
                    width: 80,
                    height: 80,
                    round: "",
                    src: item.userAvatar
                  }, null, 8, ["src"]),
                  vue.createElementVNode("view", { class: "info" }, [
                    vue.createElementVNode(
                      "view",
                      { class: "name" },
                      vue.toDisplayString(item.userName),
                      1
                      /* TEXT */
                    ),
                    vue.createElementVNode(
                      "view",
                      { class: "time" },
                      vue.toDisplayString(item.time),
                      1
                      /* TEXT */
                    )
                  ])
                ]),
                vue.createElementVNode("view", { class: "content" }, [
                  vue.createElementVNode(
                    "text",
                    { class: "action" },
                    "收藏了你的" + vue.toDisplayString(item.type),
                    1
                    /* TEXT */
                  ),
                  vue.createElementVNode("view", { class: "preview" }, [
                    vue.createElementVNode(
                      "text",
                      { class: "text" },
                      vue.toDisplayString(item.content),
                      1
                      /* TEXT */
                    ),
                    item.image ? (vue.openBlock(), vue.createElementBlock("image", {
                      key: 0,
                      class: "image",
                      src: item.image,
                      mode: "aspectFill"
                    }, null, 8, ["src"])) : vue.createCommentVNode("v-if", true)
                  ])
                ])
              ], 8, ["onClick"]);
            }),
            128
            /* KEYED_FRAGMENT */
          )),
          $setup.favoriteList.length === 0 ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 0,
            class: "empty-state"
          }, [
            vue.createElementVNode("image", {
              class: "empty-icon",
              src: _imports_1,
              mode: "aspectFit"
            }),
            vue.createElementVNode("text", { class: "empty-text" }, "暂无收到的收藏")
          ])) : vue.createCommentVNode("v-if", true)
        ],
        512
        /* NEED_PATCH */
      ), [
        [vue.vShow, $setup.activeTab === 1]
      ])
    ]);
  }
  const PagesMessageLikesLikes = /* @__PURE__ */ _export_sfc(_sfc_main$8, [["render", _sfc_render$7], ["__scopeId", "data-v-e86f8f41"], ["__file", "G:/Code/campus/miniProject/pages/message/likes/likes.vue"]]);
  const _sfc_main$7 = /* @__PURE__ */ vue.defineComponent({
    __name: "comments",
    setup(__props, { expose: __expose }) {
      __expose();
      const comments = vue.ref([
        {
          id: 1,
          userName: "小明",
          userAvatar: "/static/avatar.jpg",
          gender: "male",
          time: "刚刚",
          content: "这个观点说得很好，我也是这么认为的！",
          sourceType: "post",
          sourceId: 101,
          sourceContent: "关于如何提高学习效率，我有以下几点建议...",
          sourceImage: "https://bpic.588ku.com/back_origin_min_pic/19/10/22/7d5760a4e3926576c237d950d5964db1.jpg",
          isLiked: false,
          likeCount: 3
        },
        {
          id: 2,
          userName: "小红",
          userAvatar: "/static/avatar.jpg",
          gender: "female",
          time: "10分钟前",
          content: "同学你好，请问这个活动具体在哪个教室举办？",
          sourceType: "activity",
          sourceId: 202,
          sourceContent: "欢迎参加本周六下午的编程交流会...",
          isLiked: true,
          likeCount: 1
        }
      ]);
      const getTypeIcon = (type) => {
        const icons = {
          post: "document",
          activity: "calendar",
          course: "education"
        };
        return icons[type] || "document";
      };
      const getTypeText = (type) => {
        const texts = {
          post: "帖子",
          activity: "活动",
          course: "课程"
        };
        return texts[type] || "帖子";
      };
      const navigateToDetail = (item) => {
        const routes = {
          post: `/pages/post/detail?id=${item.sourceId}`,
          activity: `/pages/activity/detail?id=${item.sourceId}`,
          course: `/pages/course/detail?id=${item.sourceId}`
        };
        uni.navigateTo({
          url: routes[item.sourceType] || routes.post
        });
      };
      const handleLike = (item) => {
        item.isLiked = !item.isLiked;
        item.likeCount += item.isLiked ? 1 : -1;
        uni.showToast({
          title: item.isLiked ? "已点赞" : "已取消点赞",
          icon: "none"
        });
      };
      const handleReply = (item) => {
        uni.navigateTo({
          url: `/pages/comment/reply?id=${item.id}&userName=${item.userName}`
        });
      };
      const __returned__ = { comments, getTypeIcon, getTypeText, navigateToDetail, handleLike, handleReply };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  const _imports_0$2 = "/static/message/empty-comment.png";
  function _sfc_render$6(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_wd_img = resolveEasycom(vue.resolveDynamicComponent("wd-img"), WdImg);
    const _component_wd_icon = resolveEasycom(vue.resolveDynamicComponent("wd-icon"), __easycom_0$5);
    return vue.openBlock(), vue.createElementBlock("view", { class: "container" }, [
      vue.createElementVNode("view", { class: "header" }, [
        vue.createElementVNode("text", { class: "title" }, "收到的评论"),
        vue.createElementVNode(
          "text",
          { class: "subtitle" },
          vue.toDisplayString($setup.comments.length) + "条新评论",
          1
          /* TEXT */
        )
      ]),
      vue.createElementVNode("view", { class: "comment-list" }, [
        (vue.openBlock(true), vue.createElementBlock(
          vue.Fragment,
          null,
          vue.renderList($setup.comments, (item, index) => {
            return vue.openBlock(), vue.createElementBlock("view", {
              key: index,
              class: "comment-item",
              onClick: ($event) => $setup.navigateToDetail(item)
            }, [
              vue.createElementVNode("view", { class: "user-info" }, [
                vue.createElementVNode("view", { class: "avatar-wrap" }, [
                  vue.createVNode(_component_wd_img, {
                    width: 80,
                    height: 80,
                    round: "",
                    src: item.userAvatar
                  }, null, 8, ["src"]),
                  vue.createElementVNode(
                    "view",
                    {
                      class: vue.normalizeClass(["gender-icon", item.gender])
                    },
                    [
                      vue.createVNode(_component_wd_icon, {
                        name: item.gender === "male" ? "male" : "female",
                        size: "24rpx"
                      }, null, 8, ["name"])
                    ],
                    2
                    /* CLASS */
                  )
                ]),
                vue.createElementVNode("view", { class: "info" }, [
                  vue.createElementVNode("view", { class: "name-time" }, [
                    vue.createElementVNode(
                      "text",
                      { class: "name" },
                      vue.toDisplayString(item.userName),
                      1
                      /* TEXT */
                    ),
                    vue.createElementVNode(
                      "text",
                      { class: "time" },
                      vue.toDisplayString(item.time),
                      1
                      /* TEXT */
                    )
                  ]),
                  vue.createElementVNode(
                    "view",
                    { class: "comment-text" },
                    vue.toDisplayString(item.content),
                    1
                    /* TEXT */
                  )
                ])
              ]),
              vue.createElementVNode("view", { class: "original-post" }, [
                vue.createElementVNode("view", { class: "post-type" }, [
                  vue.createVNode(_component_wd_icon, {
                    name: $setup.getTypeIcon(item.sourceType),
                    size: "28rpx"
                  }, null, 8, ["name"]),
                  vue.createElementVNode(
                    "text",
                    null,
                    vue.toDisplayString($setup.getTypeText(item.sourceType)),
                    1
                    /* TEXT */
                  )
                ]),
                vue.createElementVNode("view", { class: "post-content" }, [
                  vue.createElementVNode(
                    "text",
                    { class: "text" },
                    vue.toDisplayString(item.sourceContent),
                    1
                    /* TEXT */
                  ),
                  item.sourceImage ? (vue.openBlock(), vue.createElementBlock("image", {
                    key: 0,
                    class: "image",
                    src: item.sourceImage,
                    mode: "aspectFill"
                  }, null, 8, ["src"])) : vue.createCommentVNode("v-if", true)
                ])
              ]),
              vue.createElementVNode("view", { class: "action-bar" }, [
                vue.createElementVNode("view", {
                  class: "action-item",
                  onClick: vue.withModifiers(($event) => $setup.handleLike(item), ["stop"])
                }, [
                  vue.createVNode(_component_wd_icon, {
                    name: item.isLiked ? "like-fill" : "like",
                    size: "32rpx",
                    color: item.isLiked ? "#409EFF" : "#999"
                  }, null, 8, ["name", "color"]),
                  vue.createElementVNode(
                    "text",
                    {
                      class: vue.normalizeClass({ active: item.isLiked })
                    },
                    vue.toDisplayString(item.likeCount || "点赞"),
                    3
                    /* TEXT, CLASS */
                  )
                ], 8, ["onClick"]),
                vue.createElementVNode("view", {
                  class: "action-item",
                  onClick: vue.withModifiers(($event) => $setup.handleReply(item), ["stop"])
                }, [
                  vue.createVNode(_component_wd_icon, {
                    name: "comment",
                    size: "32rpx",
                    color: "#999"
                  }),
                  vue.createElementVNode("text", null, "回复")
                ], 8, ["onClick"])
              ])
            ], 8, ["onClick"]);
          }),
          128
          /* KEYED_FRAGMENT */
        ))
      ]),
      vue.createCommentVNode(" 空状态 "),
      $setup.comments.length === 0 ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 0,
        class: "empty-state"
      }, [
        vue.createElementVNode("image", {
          class: "empty-icon",
          src: _imports_0$2,
          mode: "aspectFit"
        }),
        vue.createElementVNode("text", { class: "empty-text" }, "暂无新的评论")
      ])) : vue.createCommentVNode("v-if", true)
    ]);
  }
  const PagesMessageCommentsComments = /* @__PURE__ */ _export_sfc(_sfc_main$7, [["render", _sfc_render$6], ["__scopeId", "data-v-2ffb9542"], ["__file", "G:/Code/campus/miniProject/pages/message/comments/comments.vue"]]);
  const _sfc_main$6 = /* @__PURE__ */ vue.defineComponent({
    __name: "systemMessage",
    setup(__props, { expose: __expose }) {
      __expose();
      const messages2 = vue.ref([
        {
          id: 1,
          type: "sound",
          title: "系统维护通知",
          content: "亲爱的用户，系统将于本周六凌晨2:00-4:00进行例行维护，期间可能影响部分功能的使用。",
          time: "2024-01-20 10:00",
          isRead: false
        },
        {
          id: 2,
          type: "update",
          title: "版本更新提醒",
          content: "校园社区2.0版本已发布，新增动态表情功能，欢迎体验！",
          time: "2024-01-19 15:30",
          isRead: true
        },
        {
          id: 3,
          type: "internet",
          title: "账号安全提醒",
          content: "检测到您的账号在新设备上登录，如非本人操作，请及时修改密码。",
          time: "2024-01-18 20:15",
          isRead: false
        }
      ]);
      const getTypeIcon = (type) => {
        const icons = {
          sound: "sound",
          update: "refresh",
          internet: "internet"
        };
        return icons[type] || "sound";
      };
      const getTypeColor = (type) => {
        const colors = {
          notice: "#409EFF",
          update: "#67C23A",
          security: "#E6A23C"
        };
        return colors[type] || "#409EFF";
      };
      const handleMessageClick = (item) => {
        item.isRead = true;
        uni.navigateTo({
          url: `/pages/message/detail?id=${item.id}&type=system`
        });
      };
      const __returned__ = { messages: messages2, getTypeIcon, getTypeColor, handleMessageClick };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  const _imports_0$1 = "/static/message/empty-system.png";
  function _sfc_render$5(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_wd_icon = resolveEasycom(vue.resolveDynamicComponent("wd-icon"), __easycom_0$5);
    return vue.openBlock(), vue.createElementBlock("view", { class: "container" }, [
      vue.createElementVNode("view", { class: "header" }, [
        vue.createElementVNode("text", { class: "title" }, "系统消息"),
        vue.createElementVNode(
          "text",
          { class: "subtitle" },
          vue.toDisplayString($setup.messages.length) + "条系统通知",
          1
          /* TEXT */
        )
      ]),
      vue.createElementVNode("view", { class: "message-list" }, [
        (vue.openBlock(true), vue.createElementBlock(
          vue.Fragment,
          null,
          vue.renderList($setup.messages, (item, index) => {
            return vue.openBlock(), vue.createElementBlock("view", {
              key: index,
              class: vue.normalizeClass(["message-item", { unread: !item.isRead }]),
              onClick: ($event) => $setup.handleMessageClick(item)
            }, [
              vue.createElementVNode("view", { class: "icon-wrap" }, [
                vue.createVNode(_component_wd_icon, {
                  name: $setup.getTypeIcon(item.type),
                  size: "48rpx",
                  color: $setup.getTypeColor(item.type)
                }, null, 8, ["name", "color"])
              ]),
              vue.createElementVNode("view", { class: "content" }, [
                vue.createElementVNode(
                  "view",
                  { class: "title" },
                  vue.toDisplayString(item.title),
                  1
                  /* TEXT */
                ),
                vue.createElementVNode(
                  "view",
                  { class: "desc" },
                  vue.toDisplayString(item.content),
                  1
                  /* TEXT */
                ),
                vue.createElementVNode(
                  "view",
                  { class: "time" },
                  vue.toDisplayString(item.time),
                  1
                  /* TEXT */
                )
              ]),
              !item.isRead ? (vue.openBlock(), vue.createElementBlock("view", {
                key: 0,
                class: "status"
              })) : vue.createCommentVNode("v-if", true)
            ], 10, ["onClick"]);
          }),
          128
          /* KEYED_FRAGMENT */
        ))
      ]),
      vue.createCommentVNode(" 空状态 "),
      $setup.messages.length === 0 ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 0,
        class: "empty-state"
      }, [
        vue.createElementVNode("image", {
          class: "empty-icon",
          src: _imports_0$1,
          mode: "aspectFit"
        }),
        vue.createElementVNode("text", { class: "empty-text" }, "暂无系统消息")
      ])) : vue.createCommentVNode("v-if", true)
    ]);
  }
  const PagesMessageSystemMessageSystemMessage = /* @__PURE__ */ _export_sfc(_sfc_main$6, [["render", _sfc_render$5], ["__scopeId", "data-v-f9e2dd3f"], ["__file", "G:/Code/campus/miniProject/pages/message/systemMessage/systemMessage.vue"]]);
  const _sfc_main$5 = /* @__PURE__ */ vue.defineComponent({
    __name: "activityMessage",
    setup(__props, { expose: __expose }) {
      __expose();
      const messages2 = vue.ref([
        {
          id: 1,
          type: "invite",
          title: "编程技术交流会",
          time: "2024-01-25 14:00-16:00",
          location: "图书馆三楼会议室",
          content: "诚邀您参加本周四下午的编程技术交流会，届时将讨论前端开发的最新趋势。",
          status: "pending",
          isRead: false
        },
        {
          id: 2,
          type: "update",
          title: "校园歌手大赛",
          time: "2024-01-28 19:00-21:00",
          location: "大学生活动中心",
          content: "您报名的校园歌手大赛时间已调整，请查看最新安排。",
          status: "confirmed",
          isRead: true
        },
        {
          id: 3,
          type: "reminder",
          title: "篮球友谊赛",
          time: "2024-01-22 15:00-17:00",
          location: "体育馆主场",
          content: "提醒：您报名的篮球友谊赛将在明天下午开始，请准时到场。",
          status: "declined",
          isRead: false
        }
      ]);
      const getStatusText = (status) => {
        const statusMap = {
          pending: "待确认",
          confirmed: "已确认",
          declined: "已婉拒",
          canceled: "已取消"
        };
        return statusMap[status] || "待确认";
      };
      const getNoticeLabel = (type) => {
        const labels = {
          invite: "活动邀请",
          update: "活动更新",
          reminder: "活动提醒",
          cancel: "活动取消"
        };
        return labels[type] || "活动通知";
      };
      const getActionText = (status) => {
        const actionMap = {
          confirmed: "您已确认参加",
          declined: "您已婉拒参加",
          canceled: "活动已取消"
        };
        return actionMap[status] || "";
      };
      const handleMessageClick = (item) => {
        item.isRead = true;
        uni.navigateTo({
          url: `/pages/activity/detail?id=${item.id}`
        });
      };
      const handleConfirm = (item) => {
        item.status = "confirmed";
        uni.showToast({
          title: "已确认参加",
          icon: "success"
        });
      };
      const handleDecline = (item) => {
        item.status = "declined";
        uni.showToast({
          title: "已婉拒参加",
          icon: "none"
        });
      };
      const __returned__ = { messages: messages2, getStatusText, getNoticeLabel, getActionText, handleMessageClick, handleConfirm, handleDecline };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  const _imports_0 = "/static/message/empty-activity.png";
  function _sfc_render$4(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_wd_icon = resolveEasycom(vue.resolveDynamicComponent("wd-icon"), __easycom_0$5);
    return vue.openBlock(), vue.createElementBlock("view", { class: "container" }, [
      vue.createElementVNode("view", { class: "header" }, [
        vue.createElementVNode("text", { class: "title" }, "活动消息"),
        vue.createElementVNode(
          "text",
          { class: "subtitle" },
          vue.toDisplayString($setup.messages.length) + "条活动通知",
          1
          /* TEXT */
        )
      ]),
      vue.createElementVNode("view", { class: "message-list" }, [
        (vue.openBlock(true), vue.createElementBlock(
          vue.Fragment,
          null,
          vue.renderList($setup.messages, (item, index) => {
            return vue.openBlock(), vue.createElementBlock("view", {
              key: index,
              class: vue.normalizeClass(["message-item", { unread: !item.isRead }]),
              onClick: ($event) => $setup.handleMessageClick(item)
            }, [
              vue.createElementVNode("view", { class: "activity-info" }, [
                vue.createElementVNode(
                  "view",
                  {
                    class: vue.normalizeClass(["status-tag", item.status])
                  },
                  vue.toDisplayString($setup.getStatusText(item.status)),
                  3
                  /* TEXT, CLASS */
                ),
                vue.createElementVNode(
                  "view",
                  { class: "title" },
                  vue.toDisplayString(item.title),
                  1
                  /* TEXT */
                ),
                vue.createElementVNode("view", { class: "time-location" }, [
                  vue.createElementVNode("view", { class: "time" }, [
                    vue.createVNode(_component_wd_icon, {
                      name: "time",
                      size: "28rpx",
                      color: "#999"
                    }),
                    vue.createElementVNode(
                      "text",
                      null,
                      vue.toDisplayString(item.time),
                      1
                      /* TEXT */
                    )
                  ]),
                  vue.createElementVNode("view", { class: "location" }, [
                    vue.createVNode(_component_wd_icon, {
                      name: "location",
                      size: "28rpx",
                      color: "#999"
                    }),
                    vue.createElementVNode(
                      "text",
                      null,
                      vue.toDisplayString(item.location),
                      1
                      /* TEXT */
                    )
                  ])
                ])
              ]),
              vue.createElementVNode("view", { class: "notice-content" }, [
                vue.createElementVNode(
                  "text",
                  { class: "label" },
                  vue.toDisplayString($setup.getNoticeLabel(item.type)),
                  1
                  /* TEXT */
                ),
                vue.createElementVNode(
                  "text",
                  { class: "content" },
                  vue.toDisplayString(item.content),
                  1
                  /* TEXT */
                )
              ]),
              vue.createElementVNode("view", { class: "action-bar" }, [
                item.status === "pending" ? (vue.openBlock(), vue.createElementBlock("button", {
                  key: 0,
                  class: "action-btn primary",
                  onClick: vue.withModifiers(($event) => $setup.handleConfirm(item), ["stop"])
                }, "确认参加", 8, ["onClick"])) : vue.createCommentVNode("v-if", true),
                item.status === "pending" ? (vue.openBlock(), vue.createElementBlock("button", {
                  key: 1,
                  class: "action-btn secondary",
                  onClick: vue.withModifiers(($event) => $setup.handleDecline(item), ["stop"])
                }, "婉拒", 8, ["onClick"])) : (vue.openBlock(), vue.createElementBlock(
                  "view",
                  {
                    key: 2,
                    class: "status-text"
                  },
                  vue.toDisplayString($setup.getActionText(item.status)),
                  1
                  /* TEXT */
                ))
              ])
            ], 10, ["onClick"]);
          }),
          128
          /* KEYED_FRAGMENT */
        ))
      ]),
      vue.createCommentVNode(" 空状态 "),
      $setup.messages.length === 0 ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 0,
        class: "empty-state"
      }, [
        vue.createElementVNode("image", {
          class: "empty-icon",
          src: _imports_0,
          mode: "aspectFit"
        }),
        vue.createElementVNode("text", { class: "empty-text" }, "暂无活动消息")
      ])) : vue.createCommentVNode("v-if", true)
    ]);
  }
  const PagesMessageActivityMessageActivityMessage = /* @__PURE__ */ _export_sfc(_sfc_main$5, [["render", _sfc_render$4], ["__scopeId", "data-v-82ff9c19"], ["__file", "G:/Code/campus/miniProject/pages/message/activityMessage/activityMessage.vue"]]);
  const _sfc_main$4 = /* @__PURE__ */ vue.defineComponent({
    __name: "graduateExperience",
    setup(__props, { expose: __expose }) {
      __expose();
      const url2 = vue.ref();
      onLoad((option) => {
        formatAppLog("log", "at pages/graduateExperience/graduateExperience.vue:18", option);
        url2.value = option.param;
      });
      const __returned__ = { url: url2, WdImg };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$3(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", null, [
      vue.createCommentVNode('<web-view :src="url"/>'),
      vue.createVNode($setup["WdImg"], {
        src: "/static/temp/img.png",
        width: "100%",
        height: "100vh"
      })
    ]);
  }
  const PagesGraduateExperienceGraduateExperience = /* @__PURE__ */ _export_sfc(_sfc_main$4, [["render", _sfc_render$3], ["__file", "G:/Code/campus/miniProject/pages/graduateExperience/graduateExperience.vue"]]);
  const _sfc_main$3 = /* @__PURE__ */ vue.defineComponent({
    __name: "studentExperience",
    setup(__props, { expose: __expose }) {
      __expose();
      const url2 = vue.ref();
      onLoad((option) => {
        formatAppLog("log", "at pages/studentExperience/studentExperience.vue:15", option);
        url2.value = option.param;
      });
      const __returned__ = { url: url2 };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$2(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", null, [
      vue.createElementVNode("web-view", { src: $setup.url }, null, 8, ["src"])
    ]);
  }
  const PagesStudentExperienceStudentExperience = /* @__PURE__ */ _export_sfc(_sfc_main$3, [["render", _sfc_render$2], ["__file", "G:/Code/campus/miniProject/pages/studentExperience/studentExperience.vue"]]);
  const _sfc_main$2 = /* @__PURE__ */ vue.defineComponent({
    __name: "user",
    setup(__props, { expose: __expose }) {
      __expose();
      const goBack = () => {
        uni.navigateBack();
      };
      const __returned__ = { goBack };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render$1(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "agreement-page" }, [
      vue.createElementVNode("scroll-view", {
        "scroll-y": "",
        class: "content"
      }, [
        vue.createElementVNode("view", { class: "section" }, [
          vue.createElementVNode("view", { class: "title" }, "1. 服务说明"),
          vue.createElementVNode("view", { class: "text" }, [
            vue.createTextVNode(" 青春共享站是一个面向高校学生的学习资源共享和交流平台，致力于为用户提供优质的学习体验。 "),
            vue.createElementVNode("view", { class: "sub-title" }, "我们提供以下服务："),
            vue.createElementVNode("view", { class: "item" }, "学习资源共享：支持文档、图片等多种格式的资源上传和下载"),
            vue.createElementVNode("view", { class: "item" }, "校园信息交流：发布和浏览校园动态、学习经验等"),
            vue.createElementVNode("view", { class: "item" }, "学习互助：用户之间可以进行学习经验分享和问题解答"),
            vue.createElementVNode("view", { class: "item" }, "AI智能助手：提供智能化的学习辅导和问答服务"),
            vue.createElementVNode("view", { class: "item" }, "个性化推荐：基于用户兴趣推荐相关学习资源")
          ])
        ]),
        vue.createElementVNode("view", { class: "section" }, [
          vue.createElementVNode("view", { class: "title" }, "2. 账号使用规范"),
          vue.createElementVNode("view", { class: "text" }, [
            vue.createElementVNode("view", { class: "sub-title" }, "基本要求："),
            vue.createElementVNode("view", { class: "item" }, "用户需通过微信授权登录，确保账号真实性"),
            vue.createElementVNode("view", { class: "item" }, "妥善保管账号信息，不得将账号借给他人使用"),
            vue.createElementVNode("view", { class: "item" }, "遵守国家法律法规和校园相关规定"),
            vue.createElementVNode("view", { class: "sub-title" }, "禁止行为："),
            vue.createElementVNode("view", { class: "item" }, "发布违法、违规、色情、暴力等不当内容"),
            vue.createElementVNode("view", { class: "item" }, "侵犯他人知识产权或隐私权"),
            vue.createElementVNode("view", { class: "item" }, "利用平台进行商业推广或垃圾信息传播"),
            vue.createElementVNode("view", { class: "item" }, "干扰平台正常运营或损害其他用户权益")
          ])
        ]),
        vue.createElementVNode("view", { class: "section" }, [
          vue.createElementVNode("view", { class: "title" }, "3. 内容规范"),
          vue.createElementVNode("view", { class: "text" }, [
            vue.createElementVNode("view", { class: "sub-title" }, "内容要求："),
            vue.createElementVNode("view", { class: "item" }, "上传的资源必须是合法、无害且不侵犯他人权益"),
            vue.createElementVNode("view", { class: "item" }, "分享的学习经验应真实可靠，有实际参考价值"),
            vue.createElementVNode("view", { class: "item" }, "互动交流应文明友善，促进良好的学习氛围"),
            vue.createElementVNode("view", { class: "sub-title" }, "学术诚信："),
            vue.createElementVNode("view", { class: "item" }, "尊重原创，标明资源来源"),
            vue.createElementVNode("view", { class: "item" }, "不得抄袭、剽窃他人作品"),
            vue.createElementVNode("view", { class: "item" }, "遵守学术规范和知识产权保护规定")
          ])
        ]),
        vue.createElementVNode("view", { class: "section" }, [
          vue.createElementVNode("view", { class: "title" }, "4. 用户权益"),
          vue.createElementVNode("view", { class: "text" }, [
            vue.createElementVNode("view", { class: "sub-title" }, "基本权益："),
            vue.createElementVNode("view", { class: "item" }, "免费使用平台基础功能和服务"),
            vue.createElementVNode("view", { class: "item" }, "获取和分享优质学习资源"),
            vue.createElementVNode("view", { class: "item" }, "参与平台社区互动和交流"),
            vue.createElementVNode("view", { class: "item" }, "获得技术支持和服务保障"),
            vue.createElementVNode("view", { class: "sub-title" }, "特殊权益："),
            vue.createElementVNode("view", { class: "item" }, "优质内容创作者可获得平台奖励"),
            vue.createElementVNode("view", { class: "item" }, "活跃用户享有更多互动特权"),
            vue.createElementVNode("view", { class: "item" }, "内容举报及投诉的处理权")
          ])
        ]),
        vue.createElementVNode("view", { class: "section" }, [
          vue.createElementVNode("view", { class: "title" }, "5. 服务变更与终止"),
          vue.createElementVNode("view", { class: "text" }, [
            vue.createElementVNode("view", { class: "item" }, "平台保留随时修改或中断服务的权利"),
            vue.createElementVNode("view", { class: "item" }, "用户违反协议可能导致账号被限制或终止使用"),
            vue.createElementVNode("view", { class: "item" }, "服务变更会提前通知用户"),
            vue.createElementVNode("view", { class: "item" }, "用户可随时终止使用平台服务")
          ])
        ]),
        vue.createElementVNode("view", { class: "section" }, [
          vue.createElementVNode("view", { class: "title" }, "6. 免责声明"),
          vue.createElementVNode("view", { class: "text" }, [
            vue.createElementVNode("view", { class: "item" }, "用户对自己发布的内容负责"),
            vue.createElementVNode("view", { class: "item" }, "平台不对用户间的纠纷承担责任"),
            vue.createElementVNode("view", { class: "item" }, "因不可抗力导致的服务中断不承担责任"),
            vue.createElementVNode("view", { class: "item" }, "平台有权对违规内容进行处理")
          ])
        ])
      ])
    ]);
  }
  const PagesAgreementUser = /* @__PURE__ */ _export_sfc(_sfc_main$2, [["render", _sfc_render$1], ["__scopeId", "data-v-ff1e87b4"], ["__file", "G:/Code/campus/miniProject/pages/agreement/user.vue"]]);
  const _sfc_main$1 = /* @__PURE__ */ vue.defineComponent({
    __name: "privacy",
    setup(__props, { expose: __expose }) {
      __expose();
      const goBack = () => {
        uni.navigateBack();
      };
      const __returned__ = { goBack };
      Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
      return __returned__;
    }
  });
  function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "privacy-page" }, [
      vue.createElementVNode("scroll-view", {
        "scroll-y": "",
        class: "content"
      }, [
        vue.createElementVNode("view", { class: "section" }, [
          vue.createElementVNode("view", { class: "title" }, "1. 信息收集"),
          vue.createElementVNode("view", { class: "text" }, [
            vue.createElementVNode("view", { class: "sub-title" }, "基本信息："),
            vue.createElementVNode("view", { class: "item" }, "微信授权信息：头像、昵称等基本资料"),
            vue.createElementVNode("view", { class: "item" }, "手机号码：用于账号安全验证和通知"),
            vue.createElementVNode("view", { class: "item" }, "学校信息：用于校园社区身份认证"),
            vue.createElementVNode("view", { class: "sub-title" }, "使用信息："),
            vue.createElementVNode("view", { class: "item" }, "浏览记录：您访问的页面和内容"),
            vue.createElementVNode("view", { class: "item" }, "搜索记录：搜索的关键词和历史"),
            vue.createElementVNode("view", { class: "item" }, "互动数据：点赞、评论、收藏等"),
            vue.createElementVNode("view", { class: "item" }, "设备信息：设备型号、系统版本等")
          ])
        ]),
        vue.createElementVNode("view", { class: "section" }, [
          vue.createElementVNode("view", { class: "title" }, "2. 信息使用"),
          vue.createElementVNode("view", { class: "text" }, [
            vue.createElementVNode("view", { class: "sub-title" }, "核心功能："),
            vue.createElementVNode("view", { class: "item" }, "提供基础平台服务和功能"),
            vue.createElementVNode("view", { class: "item" }, "账号安全管理和身份验证"),
            vue.createElementVNode("view", { class: "item" }, "社区互动和消息通知"),
            vue.createElementVNode("view", { class: "sub-title" }, "服务优化："),
            vue.createElementVNode("view", { class: "item" }, "个性化内容推荐和搜索结果"),
            vue.createElementVNode("view", { class: "item" }, "改进产品功能和用户体验"),
            vue.createElementVNode("view", { class: "item" }, "提供智能化的学习辅导服务")
          ])
        ]),
        vue.createElementVNode("view", { class: "section" }, [
          vue.createElementVNode("view", { class: "title" }, "3. 信息保护"),
          vue.createElementVNode("view", { class: "text" }, [
            vue.createElementVNode("view", { class: "sub-title" }, "技术保障："),
            vue.createElementVNode("view", { class: "item" }, "采用加密技术传输和存储数据"),
            vue.createElementVNode("view", { class: "item" }, "实施严格的数据访问控制"),
            vue.createElementVNode("view", { class: "item" }, "定期安全评估和系统升级"),
            vue.createElementVNode("view", { class: "sub-title" }, "管理措施："),
            vue.createElementVNode("view", { class: "item" }, "建立完善的信息安全制度"),
            vue.createElementVNode("view", { class: "item" }, "员工保密培训和责任约束"),
            vue.createElementVNode("view", { class: "item" }, "及时处理安全事件和漏洞")
          ])
        ]),
        vue.createElementVNode("view", { class: "section" }, [
          vue.createElementVNode("view", { class: "title" }, "4. 信息共享"),
          vue.createElementVNode("view", { class: "text" }, [
            vue.createElementVNode("view", { class: "sub-title" }, "共享原则："),
            vue.createElementVNode("view", { class: "item" }, "严格遵守最小必要原则"),
            vue.createElementVNode("view", { class: "item" }, "确保数据接收方履行保密义务"),
            vue.createElementVNode("view", { class: "item" }, "依法依规进行信息共享"),
            vue.createElementVNode("view", { class: "sub-title" }, "共享场景："),
            vue.createElementVNode("view", { class: "item" }, "经您明确同意的信息共享"),
            vue.createElementVNode("view", { class: "item" }, "法律法规要求的信息提供"),
            vue.createElementVNode("view", { class: "item" }, "维护平台安全的必要共享")
          ])
        ]),
        vue.createElementVNode("view", { class: "section" }, [
          vue.createElementVNode("view", { class: "title" }, "5. 用户权利"),
          vue.createElementVNode("view", { class: "text" }, [
            vue.createElementVNode("view", { class: "sub-title" }, "信息管理："),
            vue.createElementVNode("view", { class: "item" }, "访问、更正您的个人信息"),
            vue.createElementVNode("view", { class: "item" }, "删除不准确的个人信息"),
            vue.createElementVNode("view", { class: "item" }, "注销账号及清除信息"),
            vue.createElementVNode("view", { class: "sub-title" }, "其他权利："),
            vue.createElementVNode("view", { class: "item" }, "撤回授权同意的权利"),
            vue.createElementVNode("view", { class: "item" }, "投诉举报的权利"),
            vue.createElementVNode("view", { class: "item" }, "获取隐私政策更新提醒")
          ])
        ]),
        vue.createElementVNode("view", { class: "section" }, [
          vue.createElementVNode("view", { class: "title" }, "6. AI服务隐私"),
          vue.createElementVNode("view", { class: "text" }, [
            vue.createElementVNode("view", { class: "sub-title" }, "数据处理："),
            vue.createElementVNode("view", { class: "item" }, "AI对话内容仅用于服务提供"),
            vue.createElementVNode("view", { class: "item" }, "对话数据进行脱敏处理"),
            vue.createElementVNode("view", { class: "item" }, "定期清理历史对话数据"),
            vue.createElementVNode("view", { class: "sub-title" }, "安全保障："),
            vue.createElementVNode("view", { class: "item" }, "AI服务符合伦理和安全标准"),
            vue.createElementVNode("view", { class: "item" }, "严格控制对话数据访问权限"),
            vue.createElementVNode("view", { class: "item" }, "保护用户对话内容安全")
          ])
        ])
      ])
    ]);
  }
  const PagesAgreementPrivacy = /* @__PURE__ */ _export_sfc(_sfc_main$1, [["render", _sfc_render], ["__scopeId", "data-v-d015f332"], ["__file", "G:/Code/campus/miniProject/pages/agreement/privacy.vue"]]);
  __definePage("pages/index/index", PagesIndexIndex);
  __definePage("pages/my/my", PagesMyMy);
  __definePage("pages/publishArticle/publishArticle", PagesPublishArticlePublishArticle);
  __definePage("pages/login/login", PagesLoginLogin);
  __definePage("pages/reportArticle/reportArticle", PagesReportArticleReportArticle);
  __definePage("pages/activity/activity", PagesActivityActivity);
  __definePage("pages/club/club", PagesClubClub);
  __definePage("pages/study/study", PagesStudyStudy);
  __definePage("pages/lostFound/lostFound", PagesLostFoundLostFound);
  __definePage("pages/message/message", PagesMessageMessage);
  __definePage("pages/articleInfo/articleInfo", PagesArticleInfoArticleInfo);
  __definePage("pages/updateUserInfo/updateUserInfo", PagesUpdateUserInfoUpdateUserInfo);
  __definePage("pages/feedback/feedback", PagesFeedbackFeedback);
  __definePage("pages/relation/relation", PagesRelationRelation);
  __definePage("pages/activityDetail/activityDetail", PagesActivityDetailActivityDetail);
  __definePage("pages/aiService/aiService", PagesDeepseekDeepseek);
  __definePage("pages/lostFoundPublish/lostFoundPublish", PagesLostFoundPublishLostFoundPublish);
  __definePage("pages/lostFoundDetail/lostFoundDetail", PagesLostFoundDetailLostFoundDetail);
  __definePage("pages/userDetail/userDetail", PagesUserDetailUserDetail);
  __definePage("pages/clubDetail/clubDetail", PagesClubDetailClubDetail);
  __definePage("pages/message/newFollowers/newFollowers", PagesMessageNewFollowersNewFollowers);
  __definePage("pages/message/likes/likes", PagesMessageLikesLikes);
  __definePage("pages/message/comments/comments", PagesMessageCommentsComments);
  __definePage("pages/message/systemMessage/systemMessage", PagesMessageSystemMessageSystemMessage);
  __definePage("pages/message/activityMessage/activityMessage", PagesMessageActivityMessageActivityMessage);
  __definePage("pages/graduateExperience/graduateExperience", PagesGraduateExperienceGraduateExperience);
  __definePage("pages/studentExperience/studentExperience", PagesStudentExperienceStudentExperience);
  __definePage("pages/agreement/user", PagesAgreementUser);
  __definePage("pages/agreement/privacy", PagesAgreementPrivacy);
  const _sfc_main = {
    onLaunch: function() {
      formatAppLog("log", "at App.vue:4", "App Launch");
    },
    onShow: function() {
      formatAppLog("log", "at App.vue:7", "App Show");
    },
    onHide: function() {
      formatAppLog("log", "at App.vue:10", "App Hide");
    }
  };
  const App = /* @__PURE__ */ _export_sfc(_sfc_main, [["__file", "G:/Code/campus/miniProject/App.vue"]]);
  function createApp() {
    const app = vue.createVueApp(App);
    return {
      app
    };
  }
  const { app: __app__, Vuex: __Vuex__, Pinia: __Pinia__ } = createApp();
  uni.Vuex = __Vuex__;
  uni.Pinia = __Pinia__;
  __app__.provide("__globalStyles", __uniConfig.styles);
  __app__._component.mpType = "app";
  __app__._component.render = () => {
  };
  __app__.mount("#app");
})(Vue);
